#!/usr/bin/env perl

use strict;
use v5.16;

my @configs = (
    {
        type    => "text/html; charset=utf-8",
        include => [qw(*.html *.atom* atom.xml *.rss10)],
    },
    {
        type    => "application/atom+xml; charset=utf-8",
        include => [qw(feed.xml)],
    },
    {
        type    => "application/xml; charset=utf-8",
        include => [qw(browserconfig.xml sitemap.xml)],
    },
    {
        type    => "text/plain; charset=utf-8",
        include => [qw(*.txt *.text */README */MANIFEST */Changes */sociable-1.0 *.md *mmd *.pm *.pl *.sql .ldap *.diff *.patch *.pod *.gpg)],
    },
    {
        type    => "application/x-gtar",
        include => [qw(*.tar.gz *.tgz *.tar.Z *.tar.bz2 *.tbz2 *.tar.lz *.tlz. *.tar.xz *.txz)],
    },
    {
        type    => "application/manifest+json",
        include => [qw(*.webmanifest)],
    },
    {
        type    => "application/feed+json",
        include => [qw(feed.json)],
    },
    {
        type    => "font/woff",
        include => [qw(*.woff)],
    },
    {
        type    => "font/woff2",
        include => [qw(*.woff2)],
    },
    {
        type    => "text/yaml; charset=utf-8",
        include => [qw(*.yaml *.yml)],
    },
);

############################################################################
sub run { system(@_) == 0 or die "system @_ failed: $?" }
sub echo { say join ' ', map { /[\s*]/ ? "'$_'" : $_ } @_ }

my ($dir, $bucket, $distid, $script) = @ARGV;
die "Usage: $0 SRC_DIR BUCKET CLOUDFRONT_DISTID\n"
    unless $dir & $bucket && $distid;

# Make sure we have a media type and include for each.
die "Missing type from one or more configs\n"
    if grep { !$_->{type} || !$_->{include} } @configs;

my $do = \&run;
if ($script) {
    $do = \&echo;
    print "set -ex\n\n";
}

# Run each of the configs.
$do->( sync($_) ) for @configs;

# Sync everything else, excluding everything we just included, and letting
# the AWS client guess the media type.
$do->( sync({ exclude => [map { @{ $_->{include} } } @configs] }) );

# Invalidate the CloudFront cache.
$do->(qw(aws configure set preview.cloudfront true));
$do->(qw(aws cloudfront create-invalidation --distribution-id), $distid, qw(--paths /*));

############################################################################
sub sync {
    my $p = shift;

    # Core options.
    my @cmd = qw(
        aws s3 sync
        --acl public-read
        --sse
        --metadata-directive=REPLACE
        --delete
    );

    # Media type.
    if (my $t = $p->{type}) {
        push @cmd => '--content-type', $t;
    }

    # Files to include.
    if (my $i = $p->{include}) {
        push @cmd => qw(--exclude *);
        push @cmd => '--include', $_ for @{ $i };
    }

    # Files to exclude.
    push @cmd => '--exclude', $_ for @{ $p->{exclude} || [] };

    # Command to run.
    return @cmd, $dir, "s3://$bucket";
}
