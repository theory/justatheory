<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">
	<id>https://justatheory.com/tags/postgres/</id>
	<title>Postgres on Just a Theory</title>
	<subtitle>An ongoing list of Just a Theory posts about Postgres</subtitle>
	<updated>2024-03-04T18:50:24Z</updated>
	<link rel="self" type="application/atom+xml" href="https://justatheory.com/tags/postgres/feed.xml"/>
	<link rel="alternate" type="text/html" href="https://justatheory.com/tags/postgres/"/>
	<link rel="alternate" type="application/json" href="https://justatheory.com/tags/postgres/feed.json"/>
	<author>
		<name>David E. Wheeler</name>
		<email>david@justatheory.com</email>
		<uri>https://justatheory.com/</uri>
	</author>
	<generator uri="https://gohugo.io/" version="0.123.7">Hugo</generator>
	<icon>https://justatheory.com/icon-512x512.png</icon>
	<rights>© David E. Wheeler. This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</rights>
	<entry>
		<id>https://justatheory.com/2024/03/state-of-the-extension-ecosystem/</id>
		<title type="html"><![CDATA[Talk: State of the Extension Ecosystem]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2024/03/state-of-the-extension-ecosystem/"/>
		<updated>2024-03-04T20:12:11Z</updated>
		<published>2024-03-04T18:50:24Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="pgxn" label="PGXN"/>
		<category scheme="https://justatheory.com/tags" term="extensions" label="Extensions"/>
		<category scheme="https://justatheory.com/tags" term="pgconf" label="PGConf"/>
		<category scheme="https://justatheory.com/tags" term="summit" label="Summit"/>
		<summary type="html"><![CDATA[A quick reminder that I&rsquo;ll be giving a brief talk on the &ldquo;State of the
Extension Ecosystem&rdquo; on Wednesday at noon US Eastern / 17:00 UTC.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">


	<figure title="Postgres Extension Ecosystem Mini-Summit"><a href="https://www.eventbrite.com/e/851125899477/">
			<img src="https://justatheory.com/2024/02/extension-ecosystem-summit/summit.jpeg" alt="Photo of the summit of Mount Hood" title="Postgres Extension Ecosystem Mini-Summit" />
		</a>
	</figure>

        <div class="text">
<p>A quick reminder that I&rsquo;ll be giving a brief talk on the &ldquo;State of the Extension
Ecosystem&rdquo; on Wednesday at noon US Eastern / 17:00 UTC. This talk is the first
in a series of <a href="https://www.eventbrite.com/e/851125899477/" title="Postgres Extension Ecosystem Mini-Summit">community talks and discussions</a> on the postgres
extension ecosystem leading up to the <a href="https://www.pgevents.ca/events/pgconfdev2024/schedule/session/191">Extension Ecosystem Summit</a>
at pgconf.dev on May 28.</p>
<p>I plan to give a brief history of Postgres extension tools and distribution,
the challenges encountered, recent developments, and opportunities for the
future. It should take about 30 minutes, followed by discussion. Following
this pattern for all the talks in <a href="https://www.eventbrite.com/e/851125899477/" title="Postgres Extension Ecosystem Mini-Summit">the series</a>,  I hope to set up
some engaging discussions and to surface significant topics ahead of <a href="https://www.pgevents.ca/events/pgconfdev2024/schedule/session/191">the
summit</a>.</p>
<p><a href="https://www.eventbrite.com/e/851125899477/" title="Postgres Extension Ecosystem Mini-Summit">Join us</a>! Need other information or just want an invitation
without using Eventbrite, hit me up at <code>david@</code> this domain, <a href="https://xoxo.zone/@theory" title="@theory@xoxo.zone">on Mastodon</a>, or
via the <a href="https://postgresteam.slack.com/archives/C056ZA93H1A" title="Postgres Slack/#extensions: Extensions and extension-related accessories">#extensions</a> channel on the <a href="https://pgtreats.info/slack-invite" title="Join the Postgres Slack">Postgres Slack</a>.</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/pgxn/">PGXN</a></li>
                <li><a href="https://justatheory.com/tags/extensions/">Extensions</a></li>
                <li><a href="https://justatheory.com/tags/pgconf/">PGConf</a></li>
                <li><a href="https://justatheory.com/tags/summit/">Summit</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2024/02/extension-ecosystem-summit/</id>
		<title type="html"><![CDATA[Extension Ecosystem Summit 2024]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2024/02/extension-ecosystem-summit/"/>
		<updated>2024-02-27T17:46:58Z</updated>
		<published>2024-02-27T17:46:58Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="pgxn" label="PGXN"/>
		<category scheme="https://justatheory.com/tags" term="extensions" label="Extensions"/>
		<category scheme="https://justatheory.com/tags" term="pgconf" label="PGConf"/>
		<category scheme="https://justatheory.com/tags" term="vancouver" label="Vancouver"/>
		<category scheme="https://justatheory.com/tags" term="summit" label="Summit"/>
		<summary type="html"><![CDATA[Some pals and I organized a summit at PGConf.dev on May 28 to work together
as a community toward comprehensive indexing, discovery, and binary
distribution, as well as a speaker series &ldquo;mini summit&rdquo; leading up to the
event.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">


	<figure title="PGConf.dev"><a href="https://pgconf.dev">
			<img src="https://justatheory.com/2024/02/extension-ecosystem-summit/pgconf.dev.png" alt="Logo for PGConf.dev" title="PGConf.dev" />
		</a>
	</figure>

        <div class="text">
<p>I&rsquo;m pleased to announce that some pals and I have organized and will host the
(first annual?) <a href="https://www.pgevents.ca/events/pgconfdev2024/schedule/session/191-extension-ecosystem-summit/" title="PGConf.dev: Extensions Ecosystem Summit: Enabling comprehensive indexing, discovery, and binary distribution">Extension Ecosystem Summit</a> at <a href="https://2024.pgconf.dev" title="PostgresQL Development Conference 2024">PGConf.dev</a> in Vancouver (and
more, see below) on May 28:</p>
<blockquote>
<p>Enabling comprehensive indexing, discovery, and binary distribution.</p>
<p>Participants will collaborate to examine the ongoing work on PostgreSQL
extension distribution, examine its challenges, identify questions, propose
solutions, and agree on directions for execution.</p>
</blockquote>
<p>Going to PGConf? Select it as an &ldquo;Additional Option&rdquo; when you <a href="https://www.pgevents.ca/events/pgconfdev2024/register/" title="Register for PGConf.dev or Update your Registration">register</a>, or
<a href="https://www.pgevents.ca/events/pgconfdev2024/register/" title="Register for PGConf.dev or Update your Registration">update your registration</a> if you&rsquo;ve already registered. Hope to see
you there!</p>
<hr>


	<figure title="Photo of the summit of Mount Hood"><a href="https://www.eventbrite.com/e/851125899477">
			<img src="https://justatheory.com/2024/02/extension-ecosystem-summit/summit.jpeg" alt="Photo of the summit of Mount Hood" />
		</a>
	</figure>

<h2 id="extension-ecosystem-mini-summit">Extension Ecosystem Mini-Summit</h2>
<p>But if you can&rsquo;t make it, that&rsquo;s okay, because in the lead up to the Summit, to
we&rsquo;re hosting a series of six virtual gatherings, the <a href="https://www.eventbrite.com/e/851125899477" title="Postgres Extension Ecosystem Mini-Summit on eventbrite">Postgres Extension
Ecosystem Mini-Summit</a>.</p>
<p>Join us for an hour or so every other Wednesday starting March 6 to hear
contributors to a variety of community and commercial extension initiatives
outline the problems they want to solve, their attempts to so, challenges
discovered along the way, and dreams for an ideal extension ecosystem in the
future. Tentative speaker lineup:</p>
<ul>
<li>March 6: <a href="https://justatheory.com/">David Wheeler</a>, PGXN: “History and Context of Extension Distribution”</li>
<li>March 20: <a href="https://www.linkedin.com/in/istanton">Ian Stanton</a>, Tembo: “Trunk”</li>
<li>April 3: <a href="https://github.com/devrimgunduz">Devrim Gündüz</a>: “Overview of the yum.postgresql.org architecture,
how new RPMs are added, and issues and challenges with distributing RPMed
extensions”</li>
<li>April 17: TBD</li>
<li>May 1: <a href="https://ca.linkedin.com/in/yrashk">Yurii Rashkovskii</a>, Omnigres: “Universally buildable extensions: dev
to prod”</li>
<li>May 15: <a href="https://justatheory.com/">David Wheeler</a>, PGXN: “Metadata for All: Enabling discovery,
packaging, and community”</li>
</ul>
<p>Hit the <a href="https://www.eventbrite.com/e/851125899477" title="Postgres Extension Ecosystem Mini-Summit on eventbrite">event page</a> for details. Many thanks to my co-organizers
<a href="https://about.me/jeremy_schneider">Jeremy Schneider</a>, <a href="https://www.crunchydata.com/blog/author/david-christensen">David Christensen</a>, <a href="https://pgxn.org/user/keithf4">Keith Fiske</a>, and <a href="https://github.com/devrimgunduz">Devrim Gündüz</a>,
as well as the <a href="https://2024.pgconf.dev/about/">PGConf.dev organizers</a> for making this all happen!</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/pgxn/">PGXN</a></li>
                <li><a href="https://justatheory.com/tags/extensions/">Extensions</a></li>
                <li><a href="https://justatheory.com/tags/pgconf/">PGConf</a></li>
                <li><a href="https://justatheory.com/tags/vancouver/">Vancouver</a></li>
                <li><a href="https://justatheory.com/tags/summit/">Summit</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2024/02/extension-metadata-typology/</id>
		<title type="html"><![CDATA[RFC: Extension Metadata Typology]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2024/02/extension-metadata-typology/"/>
		<updated>2024-02-27T17:19:24Z</updated>
		<published>2024-02-27T17:19:24Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="extensions" label="Extensions"/>
		<category scheme="https://justatheory.com/tags" term="metadata" label="Metadata"/>
		<category scheme="https://justatheory.com/tags" term="classification" label="Classification"/>
		<category scheme="https://justatheory.com/tags" term="categories" label="Categories"/>
		<category scheme="https://justatheory.com/tags" term="rfc" label="RFC"/>
		<summary type="html"><![CDATA[Thinking through the PostgreSQL extension metadata use cases and
recognizing the types of information they need.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>Lately I&rsquo;ve been thinking a lot about metadata for Postgres extensions.
Traditional use cases include <a href="https://www.postgresql.org/docs/current/extend-extensions.html#EXTEND-EXTENSIONS-FILES" title="PostgreSQL Docs: Extension Files">control file metadata</a>, which lives in
<code>.control</code> files used by <code>CREATE EXTENSION</code> and friends, and <a href="https://pgxn.org/spec/" title="PGXN Meta Spec - The PGXN distribution metadata specification">PGXN metadata</a>,
which lives in <code>META.json</code> files used by <a href="https://pgxn.org" title="The postgreSQL Extension Network">PGXN</a> to index and publish extensions.
But these two narrow use cases for SQL behavior and source code distribution
don&rsquo;t provide the information necessary to enable other use cases, including
building, installing, configuration, and more.</p>
<p>So I have also been exploring other metadata formats, including:</p>
<ul>
<li><a href="https://go.dev/doc/modules/gomod-ref" title="go.mod file reference">Go <code>go.mod</code></a></li>
<li><a href="https://doc.rust-lang.org/cargo/reference/manifest.html" title="The Cargo Book: The Manifest Format">Cargo Manifest File</a></li>
<li><a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json" title="npm Docs: Specifics of npm's package.json handling">npm <code>package.json</code></a></li>
<li><a href="https://github.com/tembo-io/trunk/tree/main/contrib"><code>trunk.toml</code></a></li>
<li><a href="https://docs.pgxman.com/spec/buildkit">pgxman buildkit</a></li>
</ul>
<p>These standards from neighboring communities reveal a great deal of overlap, as
one might expect (everything has a name, a version, an author, license, and so
on), but also types of metadata that had not occurred to me. As I took notes and
gathered suggestions from colleagues and coworkers, I began to recognize natural
groupings of metadata. This lead to the realization that it might be easier &mdash;
and more productive &mdash; to think about these groupings rather than individual
fields.</p>
<p>I therefore propose a typology for Postgres extension metadata.</p>
<h2 id="extension-metadata-typology">Extension Metadata Typology</h2>
<h3 id="essentials">Essentials</h3>
<p>Essential information about the extension itself, including its name (or unique
package name), version, list of authors, license, etc. Pretty much every
metadata format encompasses this data. Ecosystem applications use it for
indexing, installation locations, naming conventions, and display information.</p>
<h3 id="artifacts">Artifacts</h3>
<p>A list of links and checksums for downloading the extension in one or more
formats, including source code, binaries, system packages, and more. Apps use
this information to determine the best option for installing an extension on a
particular system.</p>
<h3 id="resources">Resources</h3>
<p>External information about the extension, mostly links, including source code
repository, bug reporting, documentation, badges, funding, etc. Apps use this
data for links, of course, but also full text indexing, documentation rendering,
and displaying useful information about the extension.</p>
<h3 id="contents">Contents</h3>
<p>A description of what&rsquo;s included in the extension package. Often an &ldquo;extension&rdquo;
consists of <em>multiple</em> extensions, such as <a href="http://postgis.net/">PostGIS</a>, which includes <code>postgis</code>,
<code>postgis_tiger_geocoder</code>, <code>address_standardizer</code>, and more. Furthermore, some
extensions are not <code>CREATE EXTENSION</code>-type extension at all, such as <a href="https://www.postgresql.org/docs/current/bgworker.html" title="PostgreSQL Docs: Background Worker Processes">background
workers</a>, command-line apps, libraries, etc. Each should be listed along with
documentation links where they differ from the package overall (or are simply
more specific).</p>
<h3 id="prerequisites">Prerequisites</h3>
<p>A list of external dependencies required to configure, build, test, install, and
run the extension. These include not only other extensions, but also external
libraries and OS-specific lists of binary package dependencies. And let&rsquo;s not
forget the versions of Postgres required, as well as any OS and version
dependencies (e.g, does it work on Windows? FreeBSD? What versions?) and
architectures (<a href="https://en.wikipedia.org/wiki/AArch64" title="Wikipedia: AArch64">arm64</a>, <a href="https://en.wikipedia.org/wiki/amd64" title="Wikipedia: AMD64">amd64</a>, etc.)</p>
<h3 id="how-to-build-it">How to Build It</h3>
<p>Metadata that apps use to determine how to build the extension. Does it use the
PostgreSQL <a href="https://www.postgresql.org/docs/current/extend-pgxs.html" title="PostgreSQL Docs: Extension Building Infrastructure">PGXS</a> build pipeline? Or perhaps it needs the <a href="https://github.com/pgcentralfoundation/pgrx/blob/develop/cargo-pgrx/README.md" title="pgrx: cargo-pgrx">cargo</a>-based <a href="https://github.com/pgcentralfoundation/pgrx" title="pgrx: Build Postgres Extensions with Rust!">pgrx</a>
toolchain. Maybe a traditional <code>./configure &amp;&amp; make</code> pattern? Perl, Ruby,
Python, Go, Rust, or NPM tooling? Whatever the pattern, this metadata needs to
be sufficient for an ecosystem app to programmatically determine how to build
an extension.</p>
<h3 id="how-to-install-it">How to Install It</h3>
<p>Usually an extension of the build metadata, the install metadata describes how
to install the extension. That could be <a href="https://www.postgresql.org/docs/current/extend-pgxs.html" title="PostgreSQL Docs: Extension Building Infrastructure">PGXS</a> or <a href="https://github.com/pgcentralfoundation/pgrx" title="pgrx: Build Postgres Extensions with Rust!">pgrx</a> again, but could also
use other patterns &mdash; or multiple patterns! For example, perhaps an extension
can be built and installed with <a href="https://www.postgresql.org/docs/current/extend-pgxs.html" title="PostgreSQL Docs: Extension Building Infrastructure">PGXS</a>, but it might <em>also</em> be <a href="https://github.com/aws/pg_tle" title="pg_tle: Framework for building trusted language extensions for PostgreSQL">TLE</a>-safe, and
therefore provide details for handing the SQL files off to a <a href="https://github.com/aws/pg_tle/blob/main/examples/README.md" title="TLE examples/pgtle.mk README">TLE installer</a>.</p>
<p>This typology might include additional data, such as documentation files to
install (<a href="https://en.wikipedia.org/wiki/Man_page" title="Wikipedia: Man page">man pages</a> anyone?), or directories of dependent files or libraries,
and the like &mdash; whatever needs to be installed for the extension.</p>
<h3 id="how-to-run-it">How to Run It</h3>
<p>Not all Postgres extensions are <code>CREATE EXTENSION</code> extensions. Some provide
<a href="https://www.postgresql.org/docs/current/bgworker.html" title="PostgreSQL Docs: Background Worker Processes">background workers</a> to perform various tasks; others simply provide Utility
applications like <a href="https://pg_top.gitlab.io" title="Welcome to the PostgreSQL top Project Home Page">pg_top</a> and <a href="https://reorg.github.io/pg_repack/" title="pg_repack --- Reorganize tables in PostgreSQL databases with minimal locks">pg_repack</a>. In fact <a href="https://reorg.github.io/pg_repack/" title="pg_repack --- Reorganize tables in PostgreSQL databases with minimal locks">pg_repack</a> provides <em>both</em>
a command-line application and a <code>CREATE EXTENSION</code> extension in one package!</p>
<p>This metadata also provides configuration information, both <a href="https://www.postgresql.org/docs/current/extend-extensions.html#EXTEND-EXTENSIONS-FILES" title="PostgreSQL Docs: Extension Files">control file
parameters</a> like <code>trusted</code>, <code>superuser</code>, and <code>schema</code>, but also load
configuration information, like whether an extension needs its libraries
included in <a href="https://www.postgresql.org/docs/current/runtime-config-client.html#GUC-SHARED-PRELOAD-LIBRARIES" title="PostgreSQL Docs: shared_preload_libraries"><code>shared_preload_libraries</code></a> to enable <a href="https://www.postgresql.org/docs/current/sql-load.html" title="PostgreSQL Docs: LOAD"><code>LOAD</code></a> or requires a
cluster restart. (Arguably this information should be in the &ldquo;install&rdquo; typology
rather than &ldquo;run&rdquo;.)</p>
<h3 id="classification">Classification</h3>
<p>Classification metadata lets the extension developer associate additional
information to improve discovery, such as key words. It might also allow
selections from a curated list of extension classifications, such as the
<a href="https://crates.io/category_slugs" title="crates.io: All Valid Category Slugs">category slugs</a> supported for the <a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-categories-field" title="The Cargo Book: The Manifest Format --- Categories">cargo categories field</a>. Ecosystem apps use
this data to organize extensions under key words or categories, making it easier
for users to find extensions often used together or for various workloads or
tasks.</p>
<h3 id="metrics-and-reports">Metrics and Reports</h3>
<p>This final typology differs from the others in that its metadata derives from
third party sources rather than the extension developer. It includes data such
as number of downloads, build and test status on various Postgres/OS/version
combinations, binary packaging distributions, test coverage, security scan
results, vulnerability detection, quality metrics and user ratings, and more.</p>
<p>In the broader ecosystem, it would be the responsibility of the root registry to
ensure such data in the canonical data for each extension comes only from
trusted sources, although applications downstream of the root registry might
extend metrics and reports metadata with their own information.</p>
<h2 id="what-more">What More?</h2>
<p>Reading through various metadata standards, I suspect this typology is fairly
comprehensive, but I&rsquo;m usually mistaken about such things. What other types of
metadata do you find essential for the use cases you&rsquo;re familiar with? Do they
fit one of the types here, or do they require some other typology I&rsquo;ve failed to
imagine? Hit the <a href="https://postgresteam.slack.com/archives/C056ZA93H1A" title="Postgres Slack/#extensions: Extensions and extension-related accessories">#extensions</a> channel on the <a href="https://pgtreats.info/slack-invite" title="Join the Postgres Slack">Postgres Slack</a> to contribute to
the discussion, or give me a holler <a href="https://xoxo.zone/@theory" title="@theory@xoxo.zone">on Mastodon</a>.</p>
<p>Meanwhile, I&rsquo;ll be refining this typology and assigning all the metadata fields
to them in the coming weeks, with an eye to proposing a community-wide metadata
standard. I hope it will benefit us all; your input will ensure it does.</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/extensions/">Extensions</a></li>
                <li><a href="https://justatheory.com/tags/metadata/">Metadata</a></li>
                <li><a href="https://justatheory.com/tags/classification/">Classification</a></li>
                <li><a href="https://justatheory.com/tags/categories/">Categories</a></li>
                <li><a href="https://justatheory.com/tags/rfc/">RFC</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2024/02/extension-versioning/</id>
		<title type="html"><![CDATA[The History and Future of Extension Versioning]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2024/02/extension-versioning/"/>
		<updated>2024-02-22T19:33:12Z</updated>
		<published>2024-02-22T19:33:12Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="extensions" label="Extensions"/>
		<category scheme="https://justatheory.com/tags" term="pgxn" label="PGXN"/>
		<category scheme="https://justatheory.com/tags" term="versioning" label="Versioning"/>
		<category scheme="https://justatheory.com/tags" term="semver" label="SemVer"/>
		<category scheme="https://justatheory.com/tags" term="calver" label="CalVer"/>
		<summary type="html"><![CDATA[What versioning standard should be used for Postgres extension distribution?
Some context from PostgreSQL and PGXN, a survey of the version standard
landscape today, and a recommendation.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>Every software distribution system deals with versioning. Early in the design of
<a href="https://pgxn.org" title="The postgreSQL Extension Network">PGXN</a>, I decided to require <a href="https://semver.org" title="Semantic Versioning">semantic versions</a> (SemVer), a
clearly-defined and widely-adopted version standard, even in its <a href="https://semver.org/spec/v1.0.0-beta.html" title="Semantic Versioning 1.0.0-beta">pre-1.0
specification</a>. I implemented the <a href="https://pgxn.org/dist/semver" title="semver: A semantic version data type / PostgreSQL Extension Network">semver data type</a> that would properly sort
semantic versions, later ported to C by <a href="http://vilain.net" title="Sam Vilain: Free Software Programmer - Wood Craftsman - Open Water Swimmer - Science Enthusiast">Sam Vilain</a> and eventually updated to
<a href="https://semver.org/spec/v2.0.0.html" title="Semantic Versioning 2.0.0">semver 2.0.0</a>.</p>
<p>As I&rsquo;ve been thinking through the <a href="https://tembo.io/blog/pgxn-ecosystem-jobs" title="The Jobs to be Done by the Ideal Postgres Extension Ecosystem">jobs</a> and <a href="https://gist.github.com/theory/898c8802937ad8361ccbcc313054c29d#tools" title="Extension Ecosystem: Jobs and Tools">tools</a> for the Postgres extension
ecosystem, I wanted to revisit this decision, the context in which it was made,
and survey the field for other options. Maybe a &ldquo;PGXN v2&rdquo; should do something
different?</p>
<p>But first that context, starting with Postgres itself.</p>
<h2 id="postgresql-extension-version-standard">PostgreSQL Extension Version Standard</h2>
<p>From the introduction extensions in PostgreSQL 9.1, the project side-stepped the
need for version standardization and enforcement by requiring extension authors
to adopt a <a href="https://www.postgresql.org/docs/current/extend-extensions.html#EXTEND-EXTENSIONS-UPDATES" title="PostgreSQL Docs: “Packaging Related Objects into an Extension — Extension Updates”">file naming convention</a>, instead. For example, an extension named
&ldquo;pair&rdquo; must have a file with its name, two dashes, then the version as listed in
its control file, like so:</p>
<pre tabindex="0"><code>pair--1.1.sql
</code></pre><p>As long as the file name is correct and the version part byte-compatible with
the control file entry, <code>CREATE EXTENSION</code> will find it. To upgrade an extension
the author must provide a second file with the extension name, the old version,
and the new version, all delimited by double dashes. For example, to upgrade our
&ldquo;pair&rdquo; extension to version <code>1.2</code>, the author supply all the SQL commands
necessary to upgrade it in this file:</p>
<pre tabindex="0"><code>pair--1.1--1.2.sql
</code></pre><p>This pattern avoids the whole question of version standards, ordering for
upgrades or downgrades, and all the rest: extension authors have full
responsibility to name their files correctly.</p>
<h2 id="pgxn-versions">PGXN Versions</h2>
<p><a href="https://semver.org" title="Semantic Versioning">SemVer</a> simplified a number of issues for PGXN in ways that the PostgreSQL
extension versioning did not (without having to re-implement the core&rsquo;s file
naming code). PGXN wants all metadata for an extension in its <a href="https://pgxn.org/spec/" title="PGXN Meta Spec - The PGXN distribution metadata specification"><code>META.json</code></a>
file, and not to derive it from other sources that could change over time.</p>
<p>Following the <a href="https://github.com/andk/pause/blob/master/doc/operating-model.md#35-factors-considering-in-the-indexing-phase" title="The PAUSE Operating Model v2: Factors considering in the indexing phase">CPAN model</a>, PGXN also required that extension releases never
decrease the version.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" rel="footnote">1</a></sup> The well-defined sortability of semantic versions
made this validation trivial. PGXN <a href="https://github.com/pgxn/pgxn-manager/commit/d2bd3bf" title="pgxn/pgxn-manager@d2bd3bf: Allow updates to old versions">later relaxed</a> enforcement to allow updates
to previously-released versions. SemVer&rsquo;s <a href="https://semver.org/#spec-item-11" title="Semantic Versioning 2.0.0: Precedence refers to how versions are compared to each other when ordered.">clearly specified sorting</a> made this
change possible, as the <code>major.minor.patch</code> precedence intuitively compare from
left to right.</p>
<p>In other words, if one had previously released version 1.2.2, then released
1.3.0, a follow-up 1.2.3 is allowed, increasing the <code>1.2.x</code> branch version, but
not, say, 1.2.1, which decreases the <code>1.2.x</code> branch version.</p>
<p>Overall, semantic versions have been great for clarity of versioning of PGXN
extensions. The one bit of conflict comes from extensions that use some other
other version standard in the control file, usually a two-part <code>x.y</code> version not
allowed by SemVer, which requires <code>x.y.z</code> (or, more specifically,
<code>major.minor.patch</code>).</p>
<p>But such versions are <em>usually</em> compatible with SemVer, and because PGXN cares
only about the contents of the <code>META.json</code>, they&rsquo;re free to use their own
versions in the control file, just as long as the <code>META.json</code> file uses SemVers.</p>
<p>For example, the recent <a href="https://pgxn.org/dist/nominatim_fdw/1.0.0/" title="nominatim_fdw 1.0.0: Nominatim Foreign Data Wrapper for PostgreSQL / PostgreSQL Extension Network">nominatim_fdw v1.0.0</a> release, which of course lists
<code>&quot;version&quot;: &quot;1.0.0&quot;</code> in <a href="https://api.pgxn.org/src/nominatim_fdw/nominatim_fdw-1.0.0/META.json" title="nominatim_fdw 1.0.0 META.json">its <code>META.json</code> file</a>, sticks to its preferred
<code>default_version = '1.0'</code> in <a href="https://api.pgxn.org/src/nominatim_fdw/nominatim_fdw-1.0.0/nominatim_fdw.control" title="nominatim_fdw 1.0.0 nominatim_fdw.control">its control file</a>. The extension author simply
appends <code>.0</code> to create a valid SemVer from their preferred version, and as long
as they never use any other patch number, it remains compatible.</p>
<h2 id="versioning-alternatives">Versioning Alternatives</h2>
<p>Surveying the versioning landscape in 2024 yields a number of approaches. Might
we prefer an alternative for future extensions distribution? Let&rsquo;s look at the
possibilities.</p>
<h3 id="ad-hoc-versions">Ad Hoc Versions</h3>
<p>As described above, the Postgres <a href="https://www.postgresql.org/docs/current/extend-extensions.html#EXTEND-EXTENSIONS-UPDATES" title="PostgreSQL Docs: “Packaging Related Objects into an Extension — Extension Updates”">file naming convention</a> allows ad hoc
versions. As far as I can tell, so does the <a href="https://www.r-project.org" title="The R Project for Statistical Computing">R Project</a>&rsquo;s <a href="https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-DESCRIPTION-file" title="The Comprehensive R Archive Network: Writing R Extensions">CRAN</a>. This approach
seems fine for systems that don&rsquo;t need to follow version changes themselves, but
much trickier for systems that do. If I want to install the latest version of an
extension, how does the installer know what that latest version is?</p>
<p>The answer is that the extension author must always release them in the proper
order. But if someone releases 1.3.1 of an extension, and then 1.2.1, well then
1.2.1 is the latest, isn&rsquo;t it? It could get confusing pretty quickly.</p>
<p>Seems better to require <em>some system,</em> so that download and install clients can
get the latest version &mdash; or the latest maintenance version of an earlier
release if they need it.</p>
<h3 id="user-choice">User Choice</h3>
<p>Quite a few registries allow users to choose their own versioning standards, but
generally with some very specific recommendations to prevent confusion for
users.</p>
<ul>
<li><a href="https://packaging.python.org/en/latest/discussions/versioning/" title="Python Packaging User Guide: Versioning">Python Packaging</a> is fairly liberal in the versions it allows, but strongly
recommends <a href="https://semver.org" title="Semantic Versioning">semantic versioning</a> or <a href="https://calver.org" title="CalVer: Timely Project Versioning">calendar versioning</a>
(more on that below).</li>
<li><a href="https://metacpan.org/pod/CPAN::Meta::Spec#VERSION-NUMBERS" title="CPAN::Meta::Spec: Version Numbers">CPAN (Perl)</a> is also fairly liberal, due to its long history of module
distribution, but currently requires &ldquo;Decimal versions&rdquo;, which are evaluated
as floating-point numbers, or dotted integer versions, which require
three dot-separated positive integers and must begin with the letter <code>v</code>.</li>
<li><a href="https://guides.rubygems.org/patterns/#semantic-versioning" title="RubyGems Patterns: Semantic Versioning">RubyGems</a> does not enforce a versioning policy, but warns that &ldquo;using an
&lsquo;irrational&rsquo; policy will only be a disservice to those in the community who
use your gems.&rdquo; The project therefore urges developers to follow <a href="https://semver.org" title="Semantic Versioning">SemVer</a>.</li>
</ul>
<p>These three venerable projects date from an earlier period of registration and
distribution, and have made concessions to times when no policies existed. Their
solutions either try to cover as many legacy examples as possible while
recommending better patterns going forward (Python, Perl), or simply make
recommendations and punt responsibility to developers.</p>
<h3 id="semver">SemVer</h3>
<p>More recently-designed registries avoid this problem by requiring some level of
versioning standard from their inception. Nearly all use <a href="https://semver.org" title="Semantic Versioning">SemVer</a>, including:</p>
<ul>
<li><a href="https://go.dev/ref/mod#versions">Go Modules</a>, where &ldquo;Each version starts with the letter v, followed by a
semantic version.&rdquo;</li>
<li><a href="https://doc.rust-lang.org/cargo/reference/resolver.html#semver-compatibility">Cargo (Rust)</a>, which &ldquo;uses SemVer for specifying version numbers. This
establishes a common convention for what is compatible between different
versions of a package.&rdquo;</li>
<li><a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json#version">npm</a>, where the &ldquo;version must be parseable by <a href="https://github.com/isaacs/node-semver" title="semver(1) -- The semantic versioner for npm">node-semver</a>, which is
bundled with npm as a dependency.&rdquo;</li>
</ul>
<h3 id="calver">CalVer</h3>
<p><a href="https://calver.org" title="CalVer: Timely Project Versioning">CalVer</a> eschews context-free incrementing integers in favor of
semantically-meaningful versions, at least for some subset of a version string.
In other words: make the version date-based. CalVer-versioned projects usually
include the year and sometimes the month. Some examples:</p>
<ul>
<li><a href="https://ubuntu.com/about/release-cycle" title="The Ubuntu lifecycle and release cadence">Ubuntu</a> uses <code>YY.0M.MICRO</code>, e.g., <code>23.04</code>, released in April 2023, and
<code>23.10.1</code>, released in October 2023</li>
<li><a href="https://pypi.org/project/Twisted/#history" title="Twisted Release History">Twisted</a> uses <code>YY.MM.MICRO</code>, e.g., <code>22.4.0</code>, released in April 2022</li>
</ul>
<p>Ultimately, adoption of a CalVer format is a more choice about embedding
calendar-based meaning into a version more than standardizing a specific format.
One can of course use CalVer semantics in a semantic version, as in the Twisted
example, which is fully-SemVer compliant.</p>
<p>In other words, adoption of CalVer need not necessitate rejection of SemVer.</p>
<h3 id="package-managers">Package Managers</h3>
<p>What about package managers, like RPM and Apt? Some canonical examples:</p>
<ul>
<li>
<p><a href="https://en.wikipedia.org/wiki/RPM_Package_Manager#Package_filename_and_label" title="Wikipedia: “RPM Package Manager — Package filename and label">RPM</a> packages use the format:</p>
<pre tabindex="0"><code>&lt;name&gt;-&lt;version&gt;-&lt;release&gt;.&lt;architecture&gt;
</code></pre><p>Here <code>&lt;version&gt;</code> is the upstream version, but RPM practices a reasonable (if
baroque) <a href="https://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/" title="How Yum and RPM Compare Versions">version comparison</a> of all its parts. But it does not impose a
standard on upstream packages, since they of course vary tremendously
between communities and projects.</p>
</li>
<li>
<p><a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#standards-version">Apt</a> packages use a similar format:</p>
<pre tabindex="0"><code>[epoch:]upstream_version[-debian_revision]
</code></pre><p>Again, <code>upstream_version</code> is the version of the upstream package, and not
enforced by Apt.</p>
</li>
<li>
<p><a href="https://wiki.alpinelinux.org/wiki/APKBUILD_Reference#pkgver">APK (Alpine Linux)</a> packages use the format</p>
<pre tabindex="0"><code>{digit}{.digit}...{letter}{_suf{#}}...{-r#}
</code></pre><p>I believe that <code>{digit}{.digit}...{letter}</code> is the upstream package version.</p>
</li>
</ul>
<p>This pattern makes perfect sense for registries that repackage software from
dozens of upstream sources that may or may not have their own policies. But a
system that defines the standard for a specific ecosystem, like Rust or
PostgreSQL, need not maintain that flexibility.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Given this survey, I&rsquo;m inclined to recommend that the PostgreSQL community
follow the PGXN (and Go, and Rust, and npm) precedent and continue to rely on
and require <a href="https://semver.org" title="Semantic Versioning">semantic versions</a> for extension distribution. It&rsquo;s not
perfect, given the contrast with the core&rsquo;s lax version requirements. <a href="https://calver.org" title="CalVer: Timely Project Versioning">CalVer</a>
partisans can still use it, though with fewer formatting options (SemVer forbids
leading zeros, as in the Ubuntu <code>23.04</code> example).</p>
<p>But with its continuing adoption, and especially its requirement by more recent,
widely-used registries, and capacity to support date-based semantics for those
who desire it, I think it continues to make the most sense.</p>
<h3 id="wrong">Wrong!</h3>
<p>I&rsquo;m probably wrong. I&rsquo;m often mistaken in one way or another, on the details or
the conclusion. Please tell me how I&rsquo;ve messed up! Find me on the <a href="https://postgresteam.slack.com/archives/C056ZA93H1A" title="Postgres Slack/#extensions: Extensions and extension-related accessories">#extensions</a>
channel on the <a href="https://pgtreats.info/slack-invite" title="Join the Postgres Slack">Postgres Slack</a> or ping me <a href="https://xoxo.zone/@theory" title="@theory@xoxo.zone">on Mastodon</a>.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn:1">
<p>Why? Because every module on CPAN has one and only one entry in the
index file. <a href="https://social.semiotic.systems/@rjbs/111971794172471384" title="@rjbs@social.semiotic.systems thread reply to @theory@xoxo.zone">Ricardo Signes explains</a>.&#160;<a href="#fnref:1" class="footnote-backref">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/extensions/">Extensions</a></li>
                <li><a href="https://justatheory.com/tags/pgxn/">PGXN</a></li>
                <li><a href="https://justatheory.com/tags/versioning/">Versioning</a></li>
                <li><a href="https://justatheory.com/tags/semver/">SemVer</a></li>
                <li><a href="https://justatheory.com/tags/calver/">CalVer</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2024/02/decentralized-extension-publishing/</id>
		<title type="html"><![CDATA[Contemplating Decentralized Extension Publishing]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2024/02/decentralized-extension-publishing/"/>
		<updated>2024-02-01T15:50:00Z</updated>
		<published>2024-02-01T15:50:00Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="pgxn" label="PGXN"/>
		<category scheme="https://justatheory.com/tags" term="extensions" label="Extensions"/>
		<category scheme="https://justatheory.com/tags" term="go" label="Go"/>
		<category scheme="https://justatheory.com/tags" term="packaging" label="Packaging"/>
		<category scheme="https://justatheory.com/tags" term="distributed-publishing" label="Distributed Publishing"/>
		<summary type="html"><![CDATA[The Go package ecosystem uses distributed publishing to release modules
without authentication or uploads. Could we do something similar for
Postgres extensions?]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<h3 id="tl-dr">TL;DR</h3>
<p>As I think through the future of the Postgres extension ecosystem as a key part
of the <a href="https://justatheory.com/2024/01/tembonaut/" title="I'm a Postgres Extensions Tembonaut">new job</a>, I wanted to understand how <a href="https://go.dev/doc/modules/developing#decentralized" title="go.dev: Developing and publishing modules">Go decentralized publishing</a>
works. In this post I work it out, and think through how we might do something
similar for Postgres extension publishing. It covers the
<a href="#decentralized-publishing">Go architecture</a>, <a href="#namespacing">namespacing challenges</a>,
and <a href="#installer-abuse">PGXS abuse</a>; then experiments with
<a href="#namespacing-experiment">URL-based namespacing</a> and ponders
<a href="#proposal-update-postgres-extension-packaging">reorganizing installed extension files</a>;
and closes with a <a href="#back-to-decentralized-publishing">high-level design</a> for
making it work now and in the future.</p>
<p>It is, admittedly, <em>a lot,</em> mainly written for my own edification and for the
information of my fellow extension-releasing travelers.</p>
<p>I find it fascinating and learned a ton. Maybe you will too! But feel free to
skip this post if you&rsquo;re less interested in the details of the journey and want
to wait for more decisive posts once I&rsquo;ve reached the destination.</p>
<h2 id="introduction">Introduction</h2>
<p>Most language registries require developers to take some step to make releases.
Many automate the process in CI/CD pipelines, but it requires some amount of
effort on the developer&rsquo;s part:</p>
<ul>
<li>Register for an account</li>
<li>Learn how to format things to publish a release</li>
<li>Remember to publish again for every new version</li>
<li>Create a pipeline to automate publishing (e.g., a GitHub workflow)</li>
</ul>
<h2 id="decentralized-publishing">Decentralized Publishing</h2>
<p><a href="https://go.dev/doc/modules/developing#decentralized" title="go.dev: Developing and publishing modules">Go decentralized publishing</a> has revised this pattern: it does not require user
registration or authentication to to publish a module to <a href="https://pkg.go.dev">pkg.go.dev</a>. Rather,
Go developers simply tag the source repository, and the first time someone
<a href="https://pkg.go.dev/about#adding-a-package" title="pkg.go.dev: Adding a package">refers to the tag in Go tools</a>, the <a href="https://index.golang.org">Go module index</a> will include it.</p>
<p>For example, publishing <code>v1.2.1</code> of a module in the <code>github.com/golang/example</code>
repository takes just three commands:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git tag v1.2.1 -sm <span class="s1">&#39;Tag v1.2.1&#39;</span>
</span></span><span class="line"><span class="cl">git push --tags
</span></span><span class="line"><span class="cl">go list -m github.com/golang/example@v1.2.1
</span></span></code></pre></div><p>After a few minutes, the module will show up in <a href="https://index.golang.org/index" title="Go module index feed">the index</a> and then on
<a href="https://pkg.go.dev">pkg.go.dev</a>. Anyone can run <code>go get -u github.com/golang/example</code> to get the
latest version. Go developers rest easy in the knowledge that they&rsquo;re getting
the exact module they need thanks to the <a href="https://go.dev/ref/mod#checksum-database" title="Go Modules Reference: Checksum database">global checksum database</a>, which Go
uses &ldquo;in many situations to detect misbehavior by proxies or origin servers&rdquo;.</p>
<p>This design requires <code>go get</code> to understand multiple source code management
systems: it supports Git, Subversion, Mercurial, Bazaar, and Fossil.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" rel="footnote">1</a></sup>
It also needs the <code>go.mod</code> metadata file to live in the project defining the
package.</p>
<p>But that&rsquo;s really it. From the developer&rsquo;s perspective it could not be easier to
publish a module, because it&rsquo;s a natural extension of the module development
tooling and workflow of committing, tagging, and fetching code.</p>
<h2 id="decentralized-extension-publishing">Decentralized Extension Publishing</h2>
<p>Could we publish Postgres extensions in such a decentralized pattern? It might
look something like this:</p>
<ul>
<li>The developer places a metadata file in the proper location (<a href="https://www.postgresql.org/docs/current/extend-extensions.html#EXTEND-EXTENSIONS-FILES" title="PostgreSQL Docs: Extension Files">control file</a>,
<code>META.json</code>, <code>Cargo.toml</code>, whatever &mdash; standard TBD)</li>
<li>To publish a release, the developer tags the repository and calls some sort
of indexing service hook (perhaps from a tag-triggered release workflow)</li>
<li>The indexing service validates the extension and adds it to the index</li>
</ul>
<p>Note that there is no registration required. It simply trusts the source code
repository. It also avoids name collision: <code>github.com/bob/hash</code>
is distinct from <code>github.com/carol/hash</code>.</p>
<p>This design does raise challenges for clients, whether they&rsquo;re compiling
extensions on a production system or building binary packages for distribution:
they have to support various version control systems to pull the code (though
starting with Git is a decent 90% solution).</p>
<h2 id="namespacing">Namespacing</h2>
<p>Then there&rsquo;s name conflicts. Perhaps <code>github.com/bob/hash</code> and
<code>github.com/carol/hash</code> both create an extension named <code>hash</code>. By the current
<a href="https://www.postgresql.org/docs/current/extend-extensions.html#EXTEND-EXTENSIONS-FILES" title="PostgreSQL Docs: Extension Files">control file</a> format, the script directory and module path can use any name,
but in all likelihood the use these defaults:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">directory</span> <span class="o">=</span> <span class="s">&#39;extension&#39;</span>
</span></span><span class="line"><span class="cl"><span class="na">module_pathname</span> <span class="o">=</span> <span class="s">&#39;$libdir/hash&#39;</span>
</span></span></code></pre></div><p>Meaning <code>.sql</code> files will be installed in the Postgres <code>share/extension</code>
subdirectory &mdash; along with all the other installed extensions &mdash; and library
files will be installed in the library directory along with all other libraries.
Something like this:</p>
<pre tabindex="0"><code class="language-tree" data-lang="tree">pgsql
├── lib
│   └── hash.so
└── share
    └── extension
    │   └── hash.control
    │   ├── hash--1.0.0.sql
    └── doc
        └── hash.md
</code></pre><p>If both projects include, say, <code>hash.control</code>, <code>hash--1.0.0.sql</code>, and <code>hash.so</code>,
the files from one will stomp all over the files of the other.</p>
<h2 id="installer-abuse">Installer Abuse</h2>
<p>Go avoids this issue by using the domain and path from each package&rsquo;s repository
in its directory structure. For example, here&rsquo;s a list of modules from
<code>google.golang.org</code> repositories:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> ls -1 ~/go/pkg/mod/google.golang.org
</span></span><span class="line"><span class="cl"><span class="go">api@v0.134.0
</span></span></span><span class="line"><span class="cl"><span class="go">api@v0.152.0
</span></span></span><span class="line"><span class="cl"><span class="go">appengine@v1.6.7
</span></span></span><span class="line"><span class="cl"><span class="go">genproto
</span></span></span><span class="line"><span class="cl"><span class="go">genproto@v0.0.0-20230731193218-e0aa005b6bdf
</span></span></span><span class="line"><span class="cl"><span class="go">grpc@v1.57.0
</span></span></span><span class="line"><span class="cl"><span class="go">grpc@v1.59.0
</span></span></span><span class="line"><span class="cl"><span class="go">protobuf@v1.30.0
</span></span></span><span class="line"><span class="cl"><span class="go">protobuf@v1.31.0
</span></span></span><span class="line"><span class="cl"><span class="go">protobuf@v1.32.0
</span></span></span></code></pre></div><p>The <code>~/go/pkg/mod</code> directory has subdirectories for each VCS host name, and each
then subdirectories for package paths. For the <code>github.com/bob/hash</code> example,
the files would all live in <code>~/go/pkg/mod/github.com/bob/hash</code>.</p>
<p>Could a Postgres extension build tool follow a similar distributed pattern by
renaming the control file and installation files and directories to something
specific for each, say <code>github.com+bob+hash</code> and <code>github.com+carol+hash</code>? That
is, using the repository host name and path, but replacing the slashes in the
path with some other character that wouldn&rsquo;t create subdirectories &mdash; because
PostgreSQL won&rsquo;t find control files in subdirectories. The control file entries
for <code>github.com/carol/hash</code> would look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">directory</span> <span class="o">=</span> <span class="s">&#39;github.com+carol+hash&#39;</span>
</span></span><span class="line"><span class="cl"><span class="na">module_pathname</span> <span class="o">=</span> <span class="s">&#39;$libdir/github.com+carol+hash&#39;</span>
</span></span></code></pre></div><p>Since PostgreSQL expects the control file to have the same name as the
extension, and for SQL scripts to start with that name, the files would have to
be named like so:</p>
<pre tabindex="0"><code class="language-tree" data-lang="tree">hash
├── Makefile
├── github.com+carol+hash.control
└── sql
    └── github.com+carol+hash--1.0.0.sql
</code></pre><p>And the <code>Makefile</code> contents:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nv">EXTENSION</span>  <span class="o">=</span> github.com+carol+hash
</span></span><span class="line"><span class="cl"><span class="nv">MODULEDIR</span>  <span class="o">=</span> <span class="k">$(</span>EXTENSION<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">DATA</span>       <span class="o">=</span> sql/<span class="k">$(</span>EXTENSION<span class="k">)</span>--1.0.0.sql
</span></span><span class="line"><span class="cl"><span class="nv">PG_CONFIG</span> <span class="o">?=</span> pg_config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">PGXS</span> <span class="o">:=</span> <span class="k">$(</span>shell <span class="k">$(</span>PG_CONFIG<span class="k">)</span> --pgxs<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="err">include</span> <span class="k">$(</span><span class="nv">PGXS</span><span class="k">)</span>
</span></span></code></pre></div><p>In other words, the extension name is the full repository host name and path and
the Makefile <code>MODULEDIR</code> variable tells <code>pg_config</code> to put all the SQL and
documentation files into a directories named <code>github.com+carol+hash</code> &mdash;
preventing them from conflicting with any other extension.</p>
<p>Finally, the <code>github.com+carol+hash.control</code> file &mdash; so named becaus it must
have the same name as the extension &mdash; contains:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">default_version</span> <span class="o">=</span> <span class="s">&#39;1.0.0&#39;</span>
</span></span><span class="line"><span class="cl"><span class="na">relocatable</span> <span class="o">=</span> <span class="s">true</span>
</span></span><span class="line"><span class="cl"><span class="na">directory</span> <span class="o">=</span> <span class="s">&#39;github.com+carol+hash&#39;</span>
</span></span><span class="line"><span class="cl"><span class="na">module_pathname</span> <span class="o">=</span> <span class="s">&#39;$libdir/github.com+carol+hash&#39;</span>
</span></span></code></pre></div><p>Note the <code>directory</code> parameter, which must match <code>MODULEDIR</code> from the
<code>Makefile</code>, so that <code>CREATE EXTENSION</code> can find the SQL files. Meanwhile,
<code>module_pathname</code> ensures that the library file has a unique name &mdash; the same
as the long extension name &mdash; again to avoid conflicts with other projects.</p>
<p>That unsightly naming extends to SQL: using the URL format could get to be a
mouthful:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">EXTENSION</span><span class="w"> </span><span class="s2">&#34;github.com+carol+hash&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Which is do-able, but some new SQL syntax might be useful, perhaps something
like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">EXTENSION</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;github.com+carol+hash&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Or, if we&rsquo;re gonna really go for it, use slashes after all!</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">EXTENSION</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;github.com/carol/hash&#34;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Want to use both extensions but they have conflicting objects (e.g., both create
a &ldquo;hash&rdquo; data type)? Put them into separatre schemas (assuming
<code>relocatable = true</code> in the control file):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">EXTENSION</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;github.com/carol/hash&#34;</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="k">SCHEMA</span><span class="w"> </span><span class="n">carol</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EXTENSION</span><span class="w"> </span><span class="n">hash</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="s2">&#34;github.com/bob/hash&#34;</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="k">SCHEMA</span><span class="w"> </span><span class="n">bob</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">try</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">h1</span><span class="w"> </span><span class="n">carol</span><span class="p">.</span><span class="n">hash</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">h2</span><span class="w"> </span><span class="n">bob</span><span class="p">.</span><span class="n">hash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><p>Of course it would be nice if PostgreSQL added support for something like
<a href="https://docs.oracle.com/database/121/LNPLS/packages.htm" title="Oracle Docs: PL/SQL Packages">Oracle packages</a>, but using schemas in the meantime may be sufficient.</p>
<p>Clearly we&rsquo;re getting into changes to the PostgreSQL core, so put that aside and
we can just use long names for creating, modifying, and dropping extensions, but
not necessarily otherwise:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="n">EXTENSION</span><span class="w"> </span><span class="s2">&#34;github.com+carol+hash&#34;</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="k">SCHEMA</span><span class="w"> </span><span class="n">carol</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EXTENSION</span><span class="w"> </span><span class="s2">&#34;github.com+bob+hash&#34;</span><span class="w"> </span><span class="k">WITH</span><span class="w"> </span><span class="k">SCHEMA</span><span class="w"> </span><span class="n">bob</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="n">EXTENSION</span><span class="w"> </span><span class="s2">&#34;gitlab.com+barack+kicker_type&#34;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">try</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">h1</span><span class="w"> </span><span class="n">carol</span><span class="p">.</span><span class="n">hash</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">h2</span><span class="w"> </span><span class="n">bob</span><span class="p">.</span><span class="n">hash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">kt</span><span class="w"> </span><span class="n">kicker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></div><h2 id="namespacing-experiment">Namespacing Experiment</h2>
<p>To confirm that this approach might work, I committed <a href="https://github.com/theory/pg-semver/commit/24134fd" title="pg-semver@24134fd: Use domain-qualified name for extension">24134fd</a> and pushed it in
the <a href="https://github.com/theory/pg-semver/tree/namespace-experiment" title="pg_semver@namespace-experiment: Experimental branch to try naming an extension with a source code repository URL similar to Go packages">namespace-experiment</a> branch of <a href="https://github.com/theory/pg-semver">the semver extension</a>. This commit changes
the extension name from <code>semver</code> to <code>github.com+theory+pg-semver</code>, and follows
the above steps to ensure that its files are installed with that name.</p>
<p>Abusing the Postgres extension installation infrastructure like this <em>does</em>
work, but suffers from a number of drawbacks, including:</p>
<ul>
<li>The extension name is super long, as before, but now so too are the files in
the repository (as opposed to the installer renaming them on install). The
shared library file has to have the long name, so therefore does the <code>.c</code>
source file. The SQL files must all start with
<code>github.com+theory+pg-semver</code>, although I skipped that bit in this commit;
instead the <code>Makefile</code> generates just one from <code>sql/semver.sql</code>.</li>
<li>Any previous installation of the <code>semver</code> type would remain unchanged, with
no upgrade path. Changing an extension&rsquo;s name isn&rsquo;t a great idea.</li>
</ul>
<p>I could probably script renaming and modifying file contents like this and make
it part of the build process, but it starts to get complicated. We could also
modify installers to make the changes, but there are a bunch of moving parts
they would have to compensate for, and given how dynamic this can be (e.g., the
semver <code>Makefile</code> reads the extension name from <code>META.json</code>), we would rapidly
enter the territory of edge case <a href="https://en.wikipedia.org/wiki/Whac-A-Mole" title="Wikipedia: “Whac-A-Mole”">whac-a-mole</a>. I suspect it&rsquo;s simply too
error-prone.</p>
<h2 id="proposal-update-postgres-extension-packaging">Proposal: Update Postgres Extension Packaging</h2>
<p>Perhaps the Go directory pattern could inspire a similar model in Postgres,
eliminating the namespace issue by teaching the Postgres extension
infrastructure to include <em>all but one</em> of the files for an extension in a
single directory. In other words, rather than files distributed like so for
semver:</p>
<pre tabindex="0"><code class="language-tree" data-lang="tree">pgsql
├── lib
│   └── semver.so
└── share
    └── extension
    │   └── semver.control
    │   ├── semver--0.32.1.sql
    │   ├── semver--0.32.0--0.32.1.sql
    └── doc
        └── semver.md
</code></pre><p>Make it more like this:</p>
<pre tabindex="0"><code class="language-tree" data-lang="tree">pgsql
└── share
    └── extension
        └── github.com
            └── theory
                └── pg-semver
                    └── extension.control
                    └── lib
                    │   └── semver.so
                    └── sql
                    │   └── semver--0.32.1.sql
                    │   └── semver--0.32.0--0.32.1.sql
                    └── doc
                        └── semver.md
</code></pre><p>Or perhaps:</p>
<pre tabindex="0"><code class="language-tree" data-lang="tree">pgsql
└── share
    └── extension
        └── github.com
            └── theory
                └── pg-semver
                    └── extension.control
                    └── semver.so
                    └── semver--0.32.1.sql
                    └── semver--0.32.0--0.32.1.sql
                    └── semver.md
</code></pre><p>The idea is to copy the files exactly as they&rsquo;re stored in or compiled in the
repository. Meanwhile, the new <code>semver.name</code> file &mdash; the only relevant file
stored outside the extension module directory &mdash; simply points to that path:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">github.com/theory/pg-semver
</span></span></code></pre></div><p>Then for <code>CREATE EXTENSION semver</code>, Postgres reads <code>semver.name</code> and knows where
to find all the files to load the extension.</p>
<p>This configuration would require updates to the control file, now named
<code>extension.control</code>, to record the full package name and appropriate locations.
Add:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">name</span> <span class="o">=</span> <span class="s">&#39;semver&#39;</span>
</span></span><span class="line"><span class="cl"><span class="na">package</span> <span class="o">=</span> <span class="s">&#39;github.com/theory/pg-semver&#39;</span>
</span></span></code></pre></div><p>This pattern could also allow aliasing. Say we try to install a different
<code>semver</code> extension from <code>github.com/example/semver</code>. This is in its
<code>extension.control</code> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="na">name</span> <span class="o">=</span> <span class="s">&#39;semver&#39;</span>
</span></span><span class="line"><span class="cl"><span class="na">package</span> <span class="o">=</span> <span class="s">&#39;github.com/example/pg-semver&#39;</span>
</span></span></code></pre></div><p>The installer detects that <code>semver.name</code> already exists for a different package
and raises an error. The user could then give it a different name by running
something like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">make install <span class="nv">ALIAS_EXTENSION_NAME</span><span class="o">=</span>semver2
</span></span></code></pre></div><p>This would add <code>semver2.name</code> right next to <code>semver.name</code>, and its contents
would contain <code>github.com/example/semver</code>, where all of its files are installed.
This would allow <code>CREATE EXTENSION semver2</code> to load the it without issue
(assuming no object conflicts, hopefully resolved by relocate-ability).</p>
<p>I realize a lot of extensions with libraries could wreak some havoc on the
library resolver having to search so many library directories, but perhaps
there&rsquo;s some way around that as well? Curious what techniques experienced C
developers might have adopted.</p>
<h2 id="back-to-decentralized-publishing">Back to Decentralized Publishing</h2>
<p>An updated installed extension file structure would be nice, and is surely worth
a discussion, but even if it shipped in Postgres 20, we need an updated
extension ecosystem today, to work well with all supported versions of Postgres.
So let&rsquo;s return to the idea of decentralized publishing without such changes.</p>
<p>I can think of two pieces that&rsquo;d be required to get Go-style decentralized
extension publishing to work with the current infrastructure.</p>
<h3 id="module-uniqueness">Module Uniqueness</h3>
<p>The first is to specify a new metadata field to be unique for the entire index,
and which would contain the repository path. Call it <code>module</code>, after Go (a
single Git repository can have multiple modules). In <a href="https://pgxn.org/spec/" title="PGXN Meta Spec - The PGXN distribution metadata specification">PGXN Meta Spec</a>-style JSON
it&rsquo;d look something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;module&#34;</span><span class="p">:</span> <span class="s2">&#34;github.com/theory/pg-semver&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;0.32.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;provides&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;semver&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&#34;abstract&#34;</span><span class="p">:</span> <span class="s2">&#34;A semantic version data type&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Switch from the PGXN-style uniqueness on the distribution name (usually the name
of the extension) and let the module be globally unique. This would allow
another party to release an extension with the same name. Even a fork where only
the <code>module</code> is changed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;module&#34;</span><span class="p">:</span> <span class="s2">&#34;github.com/example/pg-semver&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;0.32.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;provides&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;semver&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nt">&#34;abstract&#34;</span><span class="p">:</span> <span class="s2">&#34;A semantic version data type&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>Both would be indexed and appear under the module name, and both would be
find-able by the provided extension name, <code>semver</code>.</p>
<p>Where that name must still be unique is in a given install. In other words,
while <code>github.com/theory/pg-semver</code> and <code>github.com/example/pg-semver</code> both
exist in the index, the <code>semver</code> extension can be installed from only one of
them in a given Postgres system, where the extension name <code>semver</code> defines its
uniqueness.</p>
<p>This pattern would allow for much more duplication of ideas while preserving the
existing per-cluster namespacing. It also allows for a future Postgres release
that supports something like the flexible per-cluster packaging as described
above.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" rel="footnote">2</a></sup></p>
<h3 id="extension-toolchain-app">Extension Toolchain App</h3>
<p>The second piece is an extension management application that understands all
this stuff and makes it possible. It would empower both extension development
workflows &mdash; including testing, metadata management, and releasing &mdash; and
extension user workflows &mdash; finding, downloading, building, and installing.</p>
<p>Stealing from Go, imagine a developer making a release with something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">git tag v1.2.1 -sm <span class="s1">&#39;Tag v1.2.1&#39;</span>
</span></span><span class="line"><span class="cl">git push --tags
</span></span><span class="line"><span class="cl">pgmod list -m github.com/theory/pg-semver@v1.2.1
</span></span></code></pre></div><p>The creatively named <code>pgmod</code> tells the registry to index the new version
directly from its Git repository. Thereafter anyone can find it and install it
with:</p>
<ul>
<li><code>pgmod get github.com/theory/pg-semver@v1.2.1</code> &mdash; installs the specified version</li>
<li><code>pgmod get github.com/theory/pg-semver</code> &mdash; installs the latest version</li>
<li><code>pgmod get semver</code> &mdash; installs the latest version or shows a list of
matching modules to select from</li>
</ul>
<p>Any of these would fail if the cluster already has an extension named <code>semver</code>
with a different module name. But with something like the updated extension
installation locations in a future version of Postgres, that limitation could be
loosened.</p>
<h3 id="challenges">Challenges</h3>
<p>Every new idea comes with challenges, and this little thought experiment is no
exception. Some that immediately occur to me:</p>
<ul>
<li>Not every extension can be installed directly from its repository. Perhaps
the metadata could include a download link for a tarball with the results of
any pre-release execution?</li>
<li>Adoption of a new CLI could be tricky. It would be useful to include the
functionality in existing tools people already use, like <a href="https://github.com/pgcentralfoundation/pgrx" title="pgrx is a framework for developing PostgreSQL extensions in Rust and strives to be as idiomatic and safe as possible">pgrx</a>.</li>
<li>Updating the uniqueness constraint in existing systems like <a href="https://pgxn.org" title="PGXN — PostgreSQL Extension Network">PGXN</a> might be
a challenge. Most record the repository info in the <a href="https://pgxn.org/spec/#resources">resources META.json
object</a>, so it would be do-able to adapt into a new META format, either
on <a href="https://pgxn.org" title="PGXN — PostgreSQL Extension Network">PGXN</a> itself or in a new registry, should we choose to build one.</li>
<li>Getting everyone to standardize on standardized versioning tags might take
some effort. Go had the benefit of controlling its entire toolchain, while
Postgres extension versioning and release management has been all over the
place. However <a href="https://pgxn.org" title="PGXN — PostgreSQL Extension Network">PGXN</a> long ago standardized on <a href="https://semver.org" title="Semantic Versioning 2.0.0">semantic versioning</a> and
those who have released extensions on PGXN have had few issues (one can
still use other version formats in the control file, for better or worse).</li>
<li>Some PGXN distributions have shipped different versions of extensions in a
single release, or the same version as in other releases. The release
version of the overall package (repository, really) would have to become
canonical.</li>
</ul>
<p>I&rsquo;m sure there are more, I just thought of these offhand. What have you thought
of? Post &rsquo;em if you got &rsquo;em   in the <a href="https://postgresteam.slack.com/archives/C056ZA93H1A" title="Postgres Slack/#extensions: Extensions and extension-related accessories">#extensions</a> channel on the <a href="https://pgtreats.info/slack-invite" title="Join the Postgres Slack">Postgres
Slack</a>, or give me a holler <a href="https://xoxo.zone/@theory" title="@theory@xoxo.zone">on Mastodon</a> or via email.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn:1">
<p>Or does it? Yes, it does. Although the Go CLI downloads most
public modules from a <a href="https://go.dev/ref/mod#goproxy-protocol" title="Go Modules Reference: GOPROXY protocol">module proxy server</a> like <code>proxy.golang.org</code>, it
still must know how to <a href="https://go.dev/ref/mod#vcs" title="Go Modules Reference: Version control systems">download modules from a version control system</a> when
a proxy is not available.&#160;<a href="#fnref:1" class="footnote-backref">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Assuming, of course, that if and when the Postgres core
adopts more bundled packaging that they&rsquo;d use the same naming convention as
we have in the broader ecosystem. Not a perfectly safe assumption, but given
the Go precedent and wide adoption of host/path-based projects, it seems
sound.&#160;<a href="#fnref:2" class="footnote-backref">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/pgxn/">PGXN</a></li>
                <li><a href="https://justatheory.com/tags/extensions/">Extensions</a></li>
                <li><a href="https://justatheory.com/tags/go/">Go</a></li>
                <li><a href="https://justatheory.com/tags/packaging/">Packaging</a></li>
                <li><a href="https://justatheory.com/tags/distributed-publishing/">Distributed Publishing</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2024/01/pgxn-tools-v1.4/</id>
		<title type="html"><![CDATA[PGXN Tools v1.4]]></title>
		<link rel="alternate" type="text/html" href="https://blog.pgxn.org/post/741049567045468160/pgxn-tools-v4"/>
		<link rel="related" type="text/html" href="https://justatheory.com/2024/01/pgxn-tools-v1.4/"/>
		<updated>2024-01-31T17:13:40Z</updated>
		<published>2024-01-31T17:13:40Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="pgxn" label="PGXN"/>
		<category scheme="https://justatheory.com/tags" term="docker" label="Docker"/>
		<category scheme="https://justatheory.com/tags" term="github-workflow" label="GitHub Workflow"/>
		<summary type="html"><![CDATA[The pgxn-tools Docker image has seen some recent bug fixes and improvements.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>Over on the <a href="https://blog.pgxn.org/">PGXN Blog</a> I&rsquo;ve <a href="https://blog.pgxn.org/post/741049567045468160/pgxn-tools-v4" title="PGXN Blog: “PGXN Tools Docker Image Updated”">posted a brief update</a> on recent bug fixes and
improvements to the <a href="https://hub.docker.com/r/pgxn/pgxn-tools">pgxn-tools Docker image</a>, which is used fairly widely these
days to test, bundle, and release Postgres extensions to <a href="https://pgxn.org" title="PostgreSQL Extension Network">PGXN</a>. This fix is
especially important for Git repositories:</p>
<blockquote>
<p>v1.4.1 fixes an issue where <code>git archive</code> was never actually used to build a
release zip archive. This changed at some point without noticing due to the
introduction of the <code>safe.directory</code> configuration in recent versions of Git.
Inside the container the directory was never trusted, and the <code>pgxn-bundle</code>
command caught the error, decided it wasn&rsquo;t working with a Git repository, and
used the <code>zip</code> command, instead.</p>
</blockquote>
<p>I also posted a <a href="https://gist.github.com/theory/93c93571200aad02e93170c6d2c93cbe" title="PGXN distributions that contain a .git directory">gist listing PGXN distributions with a <code>.git</code> directory</a>.</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/pgxn/">PGXN</a></li>
                <li><a href="https://justatheory.com/tags/docker/">Docker</a></li>
                <li><a href="https://justatheory.com/tags/github-workflow/">GitHub Workflow</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2024/01/pgxn-challenges/</id>
		<title type="html"><![CDATA[PGXN Challenges]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2024/01/pgxn-challenges/"/>
		<updated>2024-01-30T00:11:11Z</updated>
		<published>2024-01-30T00:11:11Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="pgxn" label="PGXN"/>
		<category scheme="https://justatheory.com/tags" term="extensions" label="Extensions"/>
		<summary type="html"><![CDATA[Some thoughts on the challenges for PGXN&rsquo;s role in the ideal PostgreSQL
extension ecosystem of the future.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">


	<figure class="left frame" title="PGXN Gear">
			<img src="https://justatheory.com/2024/01/pgxn-challenges/pgxn-gear.png" alt="PGXN Gear" width="256" height="256" />
	</figure>

        <div class="text">
<p>Last week, I informally shared <a href="https://gist.github.com/theory/898c8802937ad8361ccbcc313054c29d">Extension Ecosystem: Jobs and Tools</a> with
colleagues in the <a href="https://postgresteam.slack.com/archives/C056ZA93H1A" title="Postgres Slack/#extensions: Extensions and extension-related accessories">#extensions</a> channel on the <a href="https://pgtreats.info/slack-invite" title="Join the Postgres Slack">Postgres Slack</a>. The document
surveys the <a href="https://strategyn.com/jobs-to-be-done/jobs-to-be-done-theory/">jobs to be done</a> by the ideal Postgres extension ecosystem and the
suggests the tools and services required to do those jobs &mdash; without reference
to existing extension registries and packaging systems.</p>
<p>The last section enumerates some questions we need to ponder and answer. The
first one on the list is:</p>
<blockquote>
<p>What will <a href="https://pgxn.org" title="The postgreSQL Extension Network">PGXN</a>&rsquo;s role be in this ideal extension ecosystem?</p>
</blockquote>
<p>The PostgreSQL Extension Network, or <a href="https://pgxn.org" title="The postgreSQL Extension Network">PGXN</a>, is the original extension
distribution system, created 2010&ndash;11. It has been a moderate success, but as we
in the Postgres community imagine the ideal extension distribution future, it&rsquo;s
worthwhile to also critically examine existing tools like PGXN, both to inform
the project and to realistically determine their roles in that future.</p>
<p>With that in mind, I here jot down some thoughts on the challenges with PGXN.</p>
<h2 id="pgxn-challenges">PGXN Challenges</h2>
<p>PGXN sets a lot of precedents, particularly in its decoupling of the registry
from the APIs and services that depend on it. It&rsquo;s not an all-in-one thing, and
designed for maximum distributed dissemination via rsync and static JSON files.</p>
<p>But there are a number of challenges with PGXN as it currently stands; a
sampling:</p>
<ul>
<li>
<p>PGXN has not comprehensively indexed all public PostgreSQL extensions. While
it indexes more extensions than any other registry, it falls far short of
all <a href="https://gist.github.com/joelonsql/e5aa27f8cc9bd22b8999b7de8aee9d47" title="GitHub Gist: 🗺🐘 1000+ PostgreSQL EXTENSIONs">known extensions</a>. To be a truly canonical registry, we need to make it
as simple as possible for developers to register their extensions. (More
thoughts on that topic in a forthcoming post.)</p>
</li>
<li>
<p>In that vein, releasing extensions is largely a manual process. The
<a href="https://github.com/pgxn/docker-pgxn-tools" title="pgxn/docker-pgxn-tools: Test image for PostgreSQL &amp; PGXN extensions">pgxn-tools</a> Docker image has improved the situation, allowing developers to
create relatively simple GitHub workflows to automatically <a href="https://github.com/theory/kv-pair/blob/main/.github/workflows/ci.yml" title="kv-pair extension CI workflow">test</a> and
<a href="https://github.com/theory/kv-pair/blob/main/.github/workflows/release.yml" title="kv-pair extension release workflow">release</a> extensions. Still, it requires intention and work by extension
developers. The more seamless we can make publishing extensions the better.
(More thoughts on that topic in a forthcoming post.)</p>
</li>
<li>
<p>It&rsquo;s written in <a href="https://www.perl.org" title="Perl is a highly capable, feature-rich programming language with over 36 years of development.">Perl</a>, and therefore doesn&rsquo;t feel modern or easily
accessible to other developers. It&rsquo;s also a challenge to build and
distribute the Perl services, though Docker images could mitigate this
issue. Adopting a modern compiled language like <a href="https://go.dev" title="Build simple, secure, scalable systems with Go">Go</a> or <a href="https://www.rust-lang.org" title="A language empowering everyone to build reliable and efficient software">Rust</a> might
increase community credibility and attract more contributions.</p>
</li>
<li>
<p>Similarly, <a href="https://pgxn.github.io/pgxnclient/" title="PGXN Client’s documentation">pgxnclient</a> is written in <a href="https://www.python.org" title="Python is a programming language that lets you work quickly and integrate systems more effectively">Python</a> and the <a href="https://github.com/guedes/pgxn-utils" title="PGXN extension development and release utilities">pgxn-utils</a>
developer tools in <a href="https://www.ruby-lang.org/" title="A dynamic, open source programming language with a focus on simplicity and productivity.">Ruby</a>, increasing the universe of knowledge and skill
required for developers to maintain all the tools. They&rsquo;re also more
difficult to distribute than compiled tools would be. Modern
cross-compilable languages like <a href="https://go.dev" title="Build simple, secure, scalable systems with Go">Go</a> and <a href="https://www.rust-lang.org" title="A language empowering everyone to build reliable and efficient software">Rust</a> once again simplify
distribution and are well-suited to building both web services and CLIs (but
not, perhaps native UX applications &mdash;  but then neither are dynamic
languages like Ruby and Python).</p>
</li>
<li>
<p>The <a href="https://github.com/pgxn/pgxn-api/wiki/search-api">PGXN Search API</a> uses the <a href="https://lucy.apache.org" title="A “loose C” port of the Apache Lucene™ search engine library for Java.">Apache Lucy</a> search engine library, a
project that <a href="https://attic.apache.org/projects/lucy.html" title="Apache Lucy moved into the Attic in June 2018">retired</a> in 2018. Moreover, the feature never worked very
well, thanks to the decision to expose separate search indexes for different
objects &mdash; and requiring the user to select which to search. People often
can&rsquo;t find what they need because the selected index doesn&rsquo;t contain it.
Worse, the default index on <a href="https://pgxn.org" title="The postgreSQL Extension Network">the site</a> is &ldquo;Documentation&rdquo;, on the
surface a good choice. But most extensions include no documentation other
than the README, which appears in the &ldquo;Distribution&rdquo; index, not
&ldquo;Documentation&rdquo;. Fundamentally the search API and UX needs to be completely
re-architected and -implemented.</p>
</li>
<li>
<p>PGXN uses its own very simple identity management and <a href="https://en.wikipedia.org/wiki/Basic_access_authentication" title="Wikipedia: “Basic access authentication”">basic
authentication</a>. It would be better to have tighter community identity,
perhaps through the <a href="https://www.postgresql.org/account/" title="Your PostgreSQL community account">PostgreSQL community account</a>.</p>
</li>
</ul>
<p>Given these issues, should we continue building on PGXN, rewrite some or all of
its components, or abandon it for new services. The answer may come as a natural
result of designing the overall extension ecosystem architecture or from the
motivations of community consensus. But perhaps not. In the end, we&rsquo;ll need a
clear answer to the question.</p>
<p>What are your thoughts? Hit us up in the <a href="https://postgresteam.slack.com/archives/C056ZA93H1A" title="Postgres Slack/#extensions: Extensions and extension-related accessories">#extensions</a> channel on the <a href="https://pgtreats.info/slack-invite" title="Join the Postgres Slack">Postgres
Slack</a>, or give me a holler <a href="https://xoxo.zone/@theory" title="@theory@xoxo.zone">on Mastodon</a> or via email. We expect to start
building in earnest in February, so now&rsquo;s the time!</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/pgxn/">PGXN</a></li>
                <li><a href="https://justatheory.com/tags/extensions/">Extensions</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2024/01/tembonaut/</id>
		<title type="html"><![CDATA[I&rsquo;m a Postgres Extensions Tembonaut]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2024/01/tembonaut/"/>
		<updated>2024-01-22T17:00:26Z</updated>
		<published>2024-01-22T17:00:26Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="personal" label="Personal"/>
		<category scheme="https://justatheory.com/tags" term="work" label="Work"/>
		<category scheme="https://justatheory.com/tags" term="tembo" label="Tembo"/>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="extensions" label="Extensions"/>
		<summary type="html"><![CDATA[Near year, new job. I accepted a new position at Tembo to work on improving
the PostgreSQL extension ecosystem full time.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">


	<figure class="right clear" title="Tembo Logo">
			<img src="https://justatheory.com/2024/01/tembonaut/tembo.svg" alt="Tembo Logo" width="304" height="285" />
	</figure>

        <div class="text">
<p>New year, new job.</p>
<p>I&rsquo;m pleased to announce that I started a new job on January 2 at <a href="https://tembo.io/" title="Tembo: Goodbye Database Sprawl, Hello Postgres">Tembo</a>, a
fully-managed <a href="https://www.postgresql.org" title="PostgreSQL: The world's most advanced open source database">PostgreSQL</a> developer platform. Tembo <a href="https://tembo.io/blog/welcoming-david-wheeler" title="PGXN Creator David Wheeler Joins Tembo to Strengthen the Postgres Extension Ecosystem">blogged the news</a>, too.</p>
<p>I first heard from Tembo CTO <a href="https://www.linkedin.com/in/samay-sharma-b6465122" title="Samay Sharma - Chief Technology Officer - Tembo | LinkedIn">Samay Sharma</a> last summer, when he inquired about
the status of <a href="https://pgxn.org/" title="The PostgreSQL Extension Network">PGXN</a>, the PostgreSQL Extension Network, which I built in
2010&ndash;11. Tembo bundles extensions into Postgres <a href="https://tembo.io/docs/category/tembo-stacks/" title="Tembo Docs: Tembo Stacks">stacks</a>, which let developers
quickly spin up Postgres clusters with tools and features optimized for specific
use cases and workloads. The company therefore needs to provide a wide variety
of easy-to-install and well-documented extensions to power those use cases.
Could PGXN play a role?</p>
<p>I&rsquo;ve tended to PGXN&rsquo;s maintenance for the last fourteen years, and thanks in no
small part to hosting provided by <a href="https://www.depesz.com" title="select * from depesz;">depesz</a>. As of today&rsquo;s <a href="https://pgxn.org/about/" title="About PGXN">stats</a> it distributes
376 extensions on behalf of 419 developers. PGXN has been a moderate success,
but Samay asked how we could collaborate to build on its precedent to improve
the extensions ecosystem overall.</p>
<p>It quickly became apparent that we share a vision for what that ecosystem could
become, including:</p>
<ul>
<li>Establishing the canonical Postgres community index of extensions, something
PGXN has yet to achieve</li>
<li>Improving metadata standards to enable new patterns, such as automated binary
packaging</li>
<li>Working with the Postgres community to establish documentation standards
that encourage developers to provide comprehensive extension docs</li>
<li>Designing and building developer tools that empower more developers to
build, test, distribute, and maintain extensions</li>
</ul>
<p>Over the the past decade I&rsquo;ve have many ideas and discussion on these topics,
but seldom had the bandwidth to work on them. In the last couple years I&rsquo;ve
<a href="https://blog.pgxn.org/post/651216661677064192/a-few-belated-pgxn-updates" title="PGXN Blog: “A Few Belated PGXN Updates”">enabled TLS and improved the site display</a>, <a href="https://blog.pgxn.org/post/655912318549606400/password-storage-update" title="PGXN Blog: “Password Storage Update”">increased password security</a>, and
<a href="https://blog.pgxn.org/post/709635160523620352/hello-mastodon" title="PGXN Blog: “Hello Mastodon 🐘”">added a notification queue</a> with hooks that post to both Twitter (RIP <a href="https://twitter.com/pgxn/" title="PGXN on Twitter">@pgxn</a>)
and Mastodon (<a href="https://botsin.space/@pgxn" title="PGXN on Mastodon">@pgxn@botsin.space</a>). Otherwise, aside from keeping the site
going, periodically improving new accounts, and eyeing the latest releases, I&rsquo;ve
had little bandwidth for PGXN or the broader extension ecosystem.</p>
<p>Now, thanks to the vision and strategy of Samay and Tembo CEO <a href="https://www.linkedin.com/in/rywalker" title="Ry Walker - Tembo, Inc. |
    LinkedIn">Ry Walker</a>, I
will focus on these projects full time. The Tembo team have already helped me
enumerate the extension ecosystem <a href="https://strategyn.com/jobs-to-be-done/jobs-to-be-done-theory/" title="Fundamentals of Jobs-to-be-Done Theory">jobs to be done</a> and the tools required to do
them. This week I&rsquo;ll submit it to collaborators from across the Postgres
community<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" rel="footnote">1</a></sup> to fill in the missing parts, make adjustments and
improvements, and work up a project plan.</p>
<p>The work also entails determining the degree to which PGXN and other extension
registries (e.g., <a href="https://database.dev" title="The Database Package Manager">dbdev</a>, <a href="https://pgt.dev" title="Trunk — A Postgres Extension Registry">trunk</a>, <a href="https://pgxman.com/" title="npm for PostgreSQL">pgxman</a>, <a href="http://www.postgres.pm">pgpm</a> (WIP), etc.) will play a
role or provide inspiration, what bits should be adopted, rewritten, or
discarded.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" rel="footnote">2</a></sup> Our goal is to build the foundations for a community-owned
extensions ecosystem that people care about and will happily adopt and
contribute to.</p>
<p>I&rsquo;m thrilled to return to this problem space, re-up my participation in the
PostgreSQL community, and work with great people to build out the extensions
ecosystem for future.</p>
<p>Want to help out or just follow along? Join the <a href="https://postgresteam.slack.com/archives/C056ZA93H1A" title="Postgres Slack/#extensions: Extensions and extension-related accessories">#extensions</a> channel on the
<a href="https://pgtreats.info/slack-invite" title="Join the Postgres Slack">Postgres Slack</a>. See you there.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn:1">
<p>Tembo was not the only company whose representatives have reached
out in the past year to talk about PGXN and improving extensions. I&rsquo;ve also
had conversations with <a href="https://supabase.com" title="Supabase | The Open Source Firebase Alternative">Supabase</a>, <a href="https://omnigres.com" title="Omnigres: Postgres as a Platform">Omnigres</a>, <a href="https://www.hydra.so" title="Hydra - Fast Postgres Analytics ++">Hydra</a>, and others.&#160;<a href="#fnref:1" class="footnote-backref">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Never be afraid to <a href="https://www.masterclass.com/articles/what-does-it-mean-to-kill-your-darlings" title="MasterClass: “What Does It Mean to Kill Your Darlings?”">kill your darlings</a>.&#160;<a href="#fnref:2" class="footnote-backref">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/personal/">Personal</a></li>
                <li><a href="https://justatheory.com/tags/work/">Work</a></li>
                <li><a href="https://justatheory.com/tags/tembo/">Tembo</a></li>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/extensions/">Extensions</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2023/10/sql-jsonpath-operators/</id>
		<title type="html"><![CDATA[JSON Path Operator Confusion]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2023/10/sql-jsonpath-operators/"/>
		<updated>2023-10-14T22:39:55Z</updated>
		<published>2023-10-14T22:39:55Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="json-path" label="JSON Path"/>
		<category scheme="https://justatheory.com/tags" term="sql/json-path" label="SQL/JSON Path"/>
		<category scheme="https://justatheory.com/tags" term="operators" label="Operators"/>
		<category scheme="https://justatheory.com/tags" term="json" label="JSON"/>
		<category scheme="https://justatheory.com/tags" term="jsonb" label="JSONB"/>
		<summary type="html"><![CDATA[The relationship between the Postgres SQL/JSON Path operators <code>@@</code> and <code>@?</code>
confused me. Here&rsquo;s how I figured out the difference.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>The <a href="https://justatheory.com/2023/10/cipherdoc/" title="CipherDoc: A Searchable, Encrypted JSON Document Service on Postgres">CipherDoc</a> service offers a robust <a href="https://justatheory.com/2022/08/rfc-restful-secondary-key-api/">secondary key lookup API</a> and search
interface powered by <a href="https://www.postgresql.org/docs/12/datatype-json.html#DATATYPE-JSONPATH" title="PostgreSQL Docs: jsonpath Type">JSON/SQL Path</a> queries run against a <a href="https://www.postgresql.org/docs/current/gin.html" title="PostgreSQL Docs: GIN Indexes">GIN-indexed</a> <a href="https://www.postgresql.org/docs/current/datatype-json.html" title="PostgresSQL Docs: JSON Types">JSONB</a>
column. SQL/JSON Path, introduced in <a href="https://en.wikipedia.org/wiki/SQL:2016" title="Wikipedia: “SQL:2016”">SQL:2016</a> and added to <a href="https://www.postgresql.org/" title="PostgreSQL: The World's Most Advanced Open Source Relational Database">Postgres</a> in
<a href="https://www.postgresql.org/docs/12/release-12.html" title="PostgreSQL Docs: Release 12 Release Notes">version 12</a> in 2019, nicely enables an end-to-end <a href="https://json.org" title="ECMA-404 The JSON Data Interchange Standard">JSON</a> workflow and entity
lifecycle. It&rsquo;s a powerful enabler and fundamental technology underpinning
CipherDoc. I&rsquo;m so happy to have found it.</p>
<h2 id="confusion">Confusion</h2>
<p>However, the distinction between the SQL/JSON Path operators <code>@@</code> and <code>@?</code>
confused me. Even as I found that the <code>@?</code> operator worked for my needs and <code>@@</code>
did not, I tucked the problem into my mental backlog for later study.</p>
<p>The question arose again on a recent work project, and I can take a hint. It&rsquo;s
time to figure this thing out. Let&rsquo;s see where it goes.</p>
<p><a href="https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE" title="PostgresSQL Docs: JSON Functions and Operators">The docs</a> say:</p>
<blockquote>
<dl>
<dt><code>jsonb @? jsonpath → boolean</code></dt>
<dd>Does JSON path return any item for the specified JSON value?</dd>
</dl>
<p><code>'{&quot;a&quot;:[1,2,3,4,5]}'::jsonb @? '$.a[*] ? (@ &gt; 2)' → t</code></p>
<hr>
<dl>
<dt><code>jsonb @@ jsonpath → boolean</code></dt>
<dd>Returns the result of a JSON path predicate check for the specified JSON
value. Only the first item of the result is taken into account. If the
result is not Boolean, then <code>NULL</code> is returned.</dd>
</dl>
<p><code>'{&quot;a&quot;:[1,2,3,4,5]}'::jsonb @@ '$.a[*] &gt; 2' → t</code></p>
</blockquote>
<p>These read quite similarly to me: Both return true if the path query returns an
item. So what&rsquo;s the difference? When should I use <code>@@</code> and when <code>@?</code>? I went so
far as to <a href="https://stackoverflow.com/q/77046554/79202" title="Stack Overflow: What's the difference between the PostgreSQL @? and @@ JSONB Operators?">ask Stack Overflow</a> about it. The <a href="https://stackoverflow.com/a/77046858/79202">one answer</a> directed my attention
back to the <code>jsonb_path_query()</code> function, which returns the <em>results</em> from a
path query.</p>
<p>So let&rsquo;s explore how various SQL/JSON Path queries work, what values various
expressions return.</p>
<h2 id="queries">Queries</h2>
<p><a href="https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE" title="PostgresSQL Docs: JSON Functions and Operators">The docs</a> for <code>jsonb_path_query</code> say:<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" rel="footnote">1</a></sup></p>
<blockquote>
<dl>
<dt><code>jsonb_path_query ( target jsonb, path jsonpath [, vars jsonb [, silent boolean ]] ) → setof jsonb</code></dt>
<dd>Returns all JSON items returned by the JSON path for the specified JSON
value. If the <code>vars</code> argument is specified, it must be a JSON object, and
its fields provide named values to be substituted into the jsonpath
expression. If the <code>silent</code> argument is specified and is true, the
function suppresses the same errors as the <code>@?</code> and <code>@@</code> operators do.</dd>
<dd>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">jsonb_path_query</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;$.a[*] ? (@ &gt;= $min &amp;&amp; @ &lt;= $max)&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;{&#34;min&#34;:2, &#34;max&#34;:4}&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="err">→</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span>
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="mf">2</span>
</span></span><span class="line"><span class="cl"> <span class="mf">3</span>
</span></span><span class="line"><span class="cl"> <span class="mf">4</span>
</span></span></code></pre></div></dd>
</dl>
</blockquote>
<p>The first thing to note is that a SQL/JSON Path query may return more than one
value. This feature matters for the <code>@@</code> and <code>@?</code> operators, which return a
single boolean value based on the values returned by a path query. And path queries
can return a huge variety of values. Let&rsquo;s explore some examples, derived from
the sample JSON value and path query from the docs.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" rel="footnote">2</a></sup></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span> <span class="s1">&#39;$ ?(@.a[*] &gt; 2)&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">jsonb_path_query</span>    
</span></span><span class="line"><span class="cl"><span class="c1">------------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="p">{</span><span class="s">&#34;a&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mf">1</span><span class="p">,</span> <span class="mf">2</span><span class="p">,</span> <span class="mf">3</span><span class="p">,</span> <span class="mf">4</span><span class="p">,</span> <span class="mf">5</span><span class="p">]}</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>This query returns the entire JSON value, because that&rsquo;s what <code>$</code> selects at the
start of the path expression. The <code>?()</code> filter returns true because its
predicate expression finds at least one value in the <code>$.a</code> array greater than
<code>2</code>. Here&rsquo;s what happens when the filter returns false:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span> <span class="s1">&#39;$ ?(@.a[*] &gt; 5)&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">(</span><span class="mf">0</span> <span class="k">rows</span><span class="p">)</span>
</span></span></code></pre></div><p>None of the values in the <code>$.a</code> array are greater than five, so the query
returns no value.</p>
<p>To select just the array, append it to the path expression <em>after</em> the <code>?()</code>
filter:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span> <span class="s1">&#39;$ ?(@.a[*] &gt; 2).a&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="p">[</span><span class="mf">1</span><span class="p">,</span> <span class="mf">2</span><span class="p">,</span> <span class="mf">3</span><span class="p">,</span> <span class="mf">4</span><span class="p">,</span> <span class="mf">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="path-modes">Path Modes</h3>
<p>One might think you could select <code>$.a</code> at the start of the path query to get the
full array if the filter returns true, but look what happens:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span> <span class="s1">&#39;$.a ?(@[*] &gt; 2)&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="mf">3</span>
</span></span><span class="line"><span class="cl"> <span class="mf">4</span>
</span></span><span class="line"><span class="cl"> <span class="mf">5</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">3</span> <span class="k">rows</span><span class="p">)</span>
</span></span></code></pre></div><p>That&rsquo;s not the array, but the <em>individual array values that each match the
predicate.</em> Turns out this is a quirk of the Postgres implementation of <a href="https://www.postgresql.org/docs/current/functions-json.html#STRICT-AND-LAX-MODES" title="PostgresSQL Docs: Strict and Lax modes">path
modes</a>. From what I can glean, the <a href="https://en.wikipedia.org/wiki/SQL:2016" title="Wikipedia: “SQL:2016”">SQL:2016</a> standard dictates something like
these <a href="https://learn.microsoft.com/en-us/sql/relational-databases/json/json-path-expressions-sql-server?view=sql-server-ver16#PATHMODE" title="JSON Path Expressions (SQL Server): Path mode">SQL Server descriptions</a>:</p>
<blockquote>
<ul>
<li>In <strong>lax</strong> mode, the function returns empty values if the path expression
contains an error. For example, if you request the value <strong>$.name</strong>, and the
JSON text doesn&rsquo;t contain a <strong>name</strong> key, the function returns null, but
does not raise an error.</li>
<li>In <strong>strict</strong> mode, the function raises an error if the path expression
contains an error.</li>
</ul>
</blockquote>
<p>But the Postgres lax mode does more than suppress errors. From <a href="https://www.postgresql.org/docs/current/functions-json.html#STRICT-AND-LAX-MODES" title="PostgresSQL Docs: Strict and Lax modes">the docs</a> (emphasis added):</p>
<blockquote>
<p>The lax mode facilitates matching of a JSON document structure and path
expression if the JSON data does not conform to the expected schema. If an
operand does not match the requirements of a particular operation, it can be
automatically wrapped as an SQL/JSON array or unwrapped by converting its
elements into an SQL/JSON sequence before performing this operation.
<strong>Besides, comparison operators automatically unwrap their operands in the lax
mode, so you can compare SQL/JSON arrays out-of-the-box.</strong></p>
</blockquote>
<p>There are a few more details, but this is the crux of it: In lax mode, which is
the default, Postgres <em>always</em> unwraps an array. Hence the unexpected list of
results.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" rel="footnote">3</a></sup> This could be particularly confusing when querying multiple
rows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="s1">&#39;$.a ?(@[*] &gt; 2)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">from</span> <span class="p">(</span><span class="k">values</span> <span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[3,5,8]}&#39;</span><span class="p">))</span> <span class="n">x</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="mf">3</span>
</span></span><span class="line"><span class="cl"> <span class="mf">4</span>
</span></span><span class="line"><span class="cl"> <span class="mf">5</span>
</span></span><span class="line"><span class="cl"> <span class="mf">3</span>
</span></span><span class="line"><span class="cl"> <span class="mf">5</span>
</span></span><span class="line"><span class="cl"> <span class="mf">8</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">6</span> <span class="k">rows</span><span class="p">)</span>
</span></span></code></pre></div><p>Switching to strict mode by preprending <code>strict</code> to the JSON Path query restores
the expected behavior:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="s1">&#39;strict $.a ?(@[*] &gt; 2)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">from</span> <span class="p">(</span><span class="k">values</span> <span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[3,5,8]}&#39;</span><span class="p">))</span> <span class="n">x</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="p">[</span><span class="mf">1</span><span class="p">,</span> <span class="mf">2</span><span class="p">,</span> <span class="mf">3</span><span class="p">,</span> <span class="mf">4</span><span class="p">,</span> <span class="mf">5</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"> <span class="p">[</span><span class="mf">3</span><span class="p">,</span> <span class="mf">5</span><span class="p">,</span> <span class="mf">8</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">2</span> <span class="k">rows</span><span class="p">)</span>
</span></span></code></pre></div><p>Important gotcha to watch for, and a good reason to test path queries thoroughly
to ensure you get the results you expect. Lax mode nicely prevents errors when a
query references a path that doesn&rsquo;t exist, as this simple example demonstrates:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span> <span class="s1">&#39;strict $.b&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ERROR</span><span class="p">:</span>  <span class="nb">JSON</span> <span class="k">object</span> <span class="n">does</span> <span class="k">not</span> <span class="n">contain</span> <span class="k">key</span> <span class="s">&#34;b&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span> <span class="s1">&#39;lax $.b&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">(</span><span class="mf">0</span> <span class="k">rows</span><span class="p">)</span>
</span></span></code></pre></div><p>In general, I suggest always using strict mode when executing queries. Better
still, perhaps always prefer strict mode with our friends the <code>@@</code> and <code>@?</code>
operators, which <a href="https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-JSONB-OP-TABLE" title="PostgreSQL Docs: Additional jsonb Operators">suppress some errors even in strict mode</a>:</p>
<blockquote>
<p>The jsonpath operators <code>@?</code> and <code>@@</code> suppress the following errors: missing
object field or array element, unexpected JSON item type, datetime and numeric
errors. The <code>jsonpath</code>-related functions described below can also be told to
suppress these types of errors. This behavior might be helpful when searching
JSON document collections of varying structure.</p>
</blockquote>
<p>Have a look:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span> <span class="o">@?</span> <span class="s1">&#39;strict $.a&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="o">?</span><span class="k">column</span><span class="o">?</span> 
</span></span><span class="line"><span class="cl"><span class="c1">----------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">select</span> <span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span> <span class="o">@?</span> <span class="s1">&#39;strict $.b&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="o">?</span><span class="k">column</span><span class="o">?</span> 
</span></span><span class="line"><span class="cl"><span class="c1">----------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="o">&lt;</span><span class="k">null</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>No error for the unknown JSON key <code>b</code> in that second query! As for the error
suppression in the <code>jsonpath</code>-related functions, that&rsquo;s what the <code>silent</code>
argument does. Compare:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span> <span class="s1">&#39;strict $.b&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ERROR</span><span class="p">:</span>  <span class="nb">JSON</span> <span class="k">object</span> <span class="n">does</span> <span class="k">not</span> <span class="n">contain</span> <span class="k">key</span> <span class="s">&#34;b&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span> <span class="s1">&#39;strict $.b&#39;</span><span class="p">,</span> <span class="s1">&#39;{}&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">(</span><span class="mf">0</span> <span class="k">rows</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="boolean-predicates">Boolean Predicates</h3>
<p>The Postgres <a href="https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-SQLJSON-PATH">SQL/JSON Path Language docs</a> briefly mention a pretty significant
deviation from the SQL standard:</p>
<blockquote>
<p>A path expression can be a Boolean predicate, although the SQL/JSON standard
allows predicates only in filters. This is necessary for implementation of the
<code>@@</code> operator. For example, the following <code>jsonpath</code> expression is valid in
PostgreSQL:</p>
<p><code>$.track.segments[*].HR &lt; 70</code></p>
</blockquote>
<p>This pithy statement has pretty significant implications for the return value
of a path query. The SQL standard allows predicate expressions, which are akin
to an SQL <code>WHERE</code> expression, only in <code>?()</code> filters, as seen previously:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span> <span class="s1">&#39;$ ?(@.a[*] &gt; 2)&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">jsonb_path_query</span>    
</span></span><span class="line"><span class="cl"><span class="c1">------------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="p">{</span><span class="s">&#34;a&#34;</span><span class="p">:</span> <span class="p">[</span><span class="mf">1</span><span class="p">,</span> <span class="mf">2</span><span class="p">,</span> <span class="mf">3</span><span class="p">,</span> <span class="mf">4</span><span class="p">,</span> <span class="mf">5</span><span class="p">]}</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>This can be read as &ldquo;return the path <code>$</code> if <code>@.a[*] &gt; 2</code> is true. But have a
look at a predicate-only path query:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="p">,</span> <span class="s1">&#39;$.a[*] &gt; 2&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="k">true</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>This path query can be read as &ldquo;Return the result of the predicate <code>$.a[*] &gt; 2</code>,
which in this case is <code>true</code>. This is quite the divergence from the standard,
which returns <em>contents</em> from the JSON queried, while a predicate query returns
the result of the predicate expression itself. It&rsquo;s almost like they&rsquo;re two
different things!</p>
<p>Don&rsquo;t confuse the predicate path query return value with selecting a boolean
value from the JSON. Consider this example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[true,false]}&#39;</span><span class="p">,</span> <span class="s1">&#39;$.a ?(@[*] == true)&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="k">true</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>Looks the same as the predicate-only query, right? But it&rsquo;s not, as shown by
adding another <code>true</code> value to the <code>$.a</code> array:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[true,false,true]}&#39;</span><span class="p">,</span> <span class="s1">&#39;$.a ?(@[*] == true)&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="k">true</span>
</span></span><span class="line"><span class="cl"> <span class="k">true</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">2</span> <span class="k">rows</span><span class="p">)</span>
</span></span></code></pre></div><p>This path query returns the <code>true</code>s it finds in the <code>$.a</code> array. The fact that
it returns values from the JSON rather than the filter predicate becomes more
apparent in strict mode, which returns all of <code>$a</code> if one or more elements of
the array has the value <code>true</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[true,false,true]}&#39;</span><span class="p">,</span> <span class="s1">&#39;strict $.a ?(@[*] == true)&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">jsonb_path_query</span>   
</span></span><span class="line"><span class="cl"><span class="c1">---------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="p">[</span><span class="k">true</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">true</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>This brief aside, and its mention of the <code>@@</code> operator, turns out to be key to
understanding the difference between <code>@?</code> and <code>@@</code>. Because it&rsquo;s not just that
this feature is &ldquo;necessary for implementation of the <code>@@</code> operator&rdquo;. No, I would
argue that it&rsquo;s <strong>the only kind of expression usable with the <code>@@</code> operator</strong></p>
<h2 id="match-vs-exists">Match vs. Exists</h2>
<p>Let&rsquo;s get back to the <code>@@</code> operator. We can use a boolean predicate JSON Path
like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span> <span class="o">@@</span> <span class="s1">&#39;$.a[*] &gt; 2&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="o">?</span><span class="k">column</span><span class="o">?</span> 
</span></span><span class="line"><span class="cl"><span class="c1">----------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>It returns true because the predicate JSON path query <code>$.a[*] &gt; 2</code> returns true.
And when it returns false?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span> <span class="o">@@</span> <span class="s1">&#39;$.a[*] &gt; 6&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="o">?</span><span class="k">column</span><span class="o">?</span> 
</span></span><span class="line"><span class="cl"><span class="c1">----------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="n">f</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>So far so good. What happens when we try to use a filter expression that returns
a <code>true</code> value selected from the JSONB?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="s1">&#39;{&#34;a&#34;:[true,false]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span> <span class="o">@@</span> <span class="s1">&#39;$.a ?(@[*] == true)&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="o">?</span><span class="k">column</span><span class="o">?</span> 
</span></span><span class="line"><span class="cl"><span class="c1">----------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>Looks right, doesn&rsquo;t it? But recall that this query returns all of the
<code>true</code> values from <code>$.@</code>, but <code>@@</code> wants only a single boolean. What happens
when we add another?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="s1">&#39;{&#34;a&#34;:[true,false,true]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span> <span class="o">@@</span> <span class="s1">&#39;strict $.a ?(@[*] == true)&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="o">?</span><span class="k">column</span><span class="o">?</span> 
</span></span><span class="line"><span class="cl"><span class="c1">----------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="o">&lt;</span><span class="k">null</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>Now it returns <code>NULL</code>, even though it&rsquo;s clearly true that <code>@[*] == true</code>
matches. This is because it returns <em>all</em> of the values it matches, as
<code>jsonb_path_query()</code> demonstrates:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[true,false,true]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span><span class="p">,</span> <span class="s1">&#39;$.a ?(@[*] == true)&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="k">true</span>
</span></span><span class="line"><span class="cl"> <span class="k">true</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">2</span> <span class="k">rows</span><span class="p">)</span>
</span></span></code></pre></div><p>This clearly violates the <code>@@</code> documentation claim that &ldquo;Only the first item of
the result is taken into account&rdquo;. If that were true, it would see the first
value is <code>true</code> and return true. But it doesn&rsquo;t. Turns out, the corresponding
<code>jsonb_path_match()</code> function shows why:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_match</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[true,false,true]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span><span class="p">,</span> <span class="s1">&#39;$.a ?(@[*] == true)&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ERROR</span><span class="p">:</span>  <span class="n">single</span> <span class="nb">boolean</span> <span class="n">result</span> <span class="k">is</span> <span class="n">expected</span>
</span></span></code></pre></div><p>Conclusion: The documentation is inaccurate. Only a single boolean is expected
by <code>@@</code>. Anything else is an error.</p>
<p>Futhermore, it&rsquo;s dangerous, at best, to use an SQL standard JSON Path expression
with <code>@@</code>. If you need to use it with a filter expression, you can turn it into
a boolean predicate by wrapping it in <code>exists()</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_match</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[true,false,true]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span><span class="p">,</span> <span class="s1">&#39;exists($.a ?(@[*] == true))&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_match</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>But there&rsquo;s no reason to do so, because that&rsquo;s effectively what the <code>@?</code>
operator (and the corresponding, cleverly-named <code>jsonb_path_exists()</code> function
does): it returns true if the SQL standard JSON Path expression contains any
results:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="s1">&#39;{&#34;a&#34;:[true,false,true]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span> <span class="o">@?</span> <span class="s1">&#39;$.a ?(@[*] == true)&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="o">?</span><span class="k">column</span><span class="o">?</span> 
</span></span><span class="line"><span class="cl"><span class="c1">----------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>Here&rsquo;s the key thing about <code>@?</code>: you don&rsquo;t want to use a boolean predicate path
query with it, either. Consider this predicate-only query:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span><span class="p">,</span> <span class="s1">&#39;$.a[*] &gt; 6&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="k">false</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>But see what happens when we use it with <code>@?</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span> <span class="o">@?</span> <span class="s1">&#39;$.a[*] &gt; 6&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="o">?</span><span class="k">column</span><span class="o">?</span> 
</span></span><span class="line"><span class="cl"><span class="c1">----------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>It returns true even though the query itself returns false! Why? Because <code>false</code>
is a value that exists and is returned by the query. Even a query that returns
<code>null</code> is considered to exist, as it will when a strict query encounters an
error:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">select</span> <span class="n">jsonb_path_query</span><span class="p">(</span><span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span><span class="p">,</span> <span class="s1">&#39;strict $[*] &gt; 6&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">jsonb_path_query</span> 
</span></span><span class="line"><span class="cl"><span class="c1">------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="k">null</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">select</span> <span class="s1">&#39;{&#34;a&#34;:[1,2,3,4,5]}&#39;</span><span class="o">::</span><span class="nb">jsonb</span> <span class="o">@?</span> <span class="s1">&#39;strict $[*] &gt; 6&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="o">?</span><span class="k">column</span><span class="o">?</span> 
</span></span><span class="line"><span class="cl"><span class="c1">----------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">1</span> <span class="k">row</span><span class="p">)</span>
</span></span></code></pre></div><p>The key thing to know about the <code>@?</code> operator is that it returns true if
<em>anything</em> is returned by the path query, and returns false only if nothing is
selected at all.</p>
<h2 id="the-difference">The Difference</h2>
<p>In summary, the difference between the <code>@?</code> and <code>@@</code> JSONB operators is this:</p>
<ul>
<li><code>@?</code> (and <code>jsonb_path_exists()</code>) returns true if the path query returns any
values &mdash; even <code>false</code> or <code>null</code> &mdash; and false if it returns no values.
This operator should be used <em>only</em> with SQL-standard JSON path queries that
select data from the JSONB. Do not use predicate-only JSON path expressions
with <code>@?</code>.</li>
<li><code>@@</code> (and <code>jsonb_path_match()</code>) returns true if the path query returns the
single boolean value <code>true</code> and false otherwise. This operator should be
used <em>only</em> with Postgres-specific boolean predicate JSON path queries,
that return data from the predicate expression. Do not use SQL-standard JSON
path expressions with <code>@@</code>.</li>
</ul>
<p>This difference of course assumes awareness of this distinction between
predicate path queries and SQL standard path queries. To that end, I <a href="https://www.postgresql.org/message-id/7262A188-59CA-4A8A-AAD7-83D4FF0B9758%40justatheory.com" title="pgsql-hackers — Patch: Improve Boolean Predicate JSON Path Docs">submitted
a patch</a> that expounds the difference between these types of JSON Path
queries, and plan to submit another linking these differences in the docs for
<code>@@</code> and <code>@?</code>.</p>
<p>Oh, and probably another to explain the difference in return values between
strict and lax queries due to array unwrapping.</p>
<h2 id="thanks">Thanks</h2>
<p>Many thanks to <a href="https://github.com/ewie" title="GitHub: Erik Wienhold">Erik Wienhold</a> for patiently answering my <a href="https://www.postgresql.org/message-id/flat/15DD78A5-B5C4-4332-ACFE-55723259C07F%40justatheory.com" title="pgsql-hackers — JSON Path and GIN Questions">pgsql-hackers
questions</a> and linking me to a detailed <a href="https://www.postgresql.org/message-id/flat/CACJufxE01sxgvtG4QEvRZPzs_roggsZeVvBSGpjM5tzE5hMCLA%40mail.gmail.com" title="pgsql-general — ​jsonb @@ jsonpath operator doc: ​Only the first item of the result is taken into account">pgsql-general thread</a> in which the
oddities of <code>@@</code> were previously discussed in detail.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn:1">
<p>Well almost. The docs for <code>jsonb_path_query</code> actually say, about the
last two arguments, &ldquo;The optional <code>vars</code> and <code>silent</code> arguments act the same
as for <code>jsonb_path_exists</code>.&rdquo; I replaced that sentence with the relevant
sentences from the <code>jsonb_path_exists</code> docs, about which more later.&#160;<a href="#fnref:1" class="footnote-backref">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Though omitting the <code>vars</code> argument, as variable interpolation just
gets in the way of understanding basic query result behavior.&#160;<a href="#fnref:2" class="footnote-backref">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>In fairness, the <a href="https://docs.oracle.com/en/database/oracle/oracle-database/21/adjsn/json-path-expressions.html#GUID-8656CAB9-C293-4A99-BB62-F38F3CFC4C13" title="Oracle Database JSON Developer’s Guide: SQL/JSON Path Expression Syntax Relaxation">Oracle docs</a> also discuss &ldquo;implicit array
wrapping and unwrapping&rdquo;, but I don&rsquo;t have a recent Oracle server to
experiment with at the moment.&#160;<a href="#fnref:3" class="footnote-backref">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/json-path/">JSON Path</a></li>
                <li><a href="https://justatheory.com/tags/sql/json-path/">SQL/JSON Path</a></li>
                <li><a href="https://justatheory.com/tags/operators/">Operators</a></li>
                <li><a href="https://justatheory.com/tags/json/">JSON</a></li>
                <li><a href="https://justatheory.com/tags/jsonb/">JSONB</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2023/10/cipherdoc/</id>
		<title type="html"><![CDATA[CipherDoc: A Searchable, Encrypted JSON Document Service on Postgres]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2023/10/cipherdoc/"/>
		<updated>2023-10-03T23:02:21Z</updated>
		<published>2023-10-01T21:36:13Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="pgcon" label="PGCon"/>
		<category scheme="https://justatheory.com/tags" term="cipherdoc" label="CipherDoc"/>
		<category scheme="https://justatheory.com/tags" term="privacy" label="Privacy"/>
		<category scheme="https://justatheory.com/tags" term="encryption" label="Encryption"/>
		<summary type="html"><![CDATA[I gave a talk at PGCon this year on a privacy-first data storage service I designed and implemented. Perhaps the encryption and searching patterns will inspire others.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>Over the last year, I designed and implemented a simple web service, code-named
&ldquo;CipherDoc&rdquo;, that provides a <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" title="Wikipedia: “Create, read, update, and delete”">CRUD</a> API for creating, updating, searching, and
deleting <a href="https://json.org" title="ECMA-404 The JSON Data Interchange Standard">JSON</a> documents. The app enforces document structure via <a href="https://json-schema.org" title="JSON Schema is a declarative language that allows you to annotate and validate JSON documents">JSON
schema</a>, while <a href="https://www.postgresql.org/docs/12/datatype-json.html#DATATYPE-JSONPATH" title="PostgreSQL Docs: jsonpath Type">JSON/SQL Path</a> powers the search API by querying a hashed subset
of the schema stored in a <a href="https://www.postgresql.org/docs/current/gin.html" title="PostgreSQL Docs: GIN Indexes">GIN-indexed</a> <a href="https://www.postgresql.org/docs/current/datatype-json.html" title="PostgresSQL Docs: JSON Types">JSONB</a> column in <a href="https://www.postgresql.org/" title="PostgreSQL: The World's Most Advanced Open Source Relational Database">Postgres</a>.</p>
<p>In may I gave a public presentation on the design and implementation of the
service at <a href="https://www.pgcon.org/" title="PGCon - PostgreSQL Conference for Users and Developers">PGCon</a>: <em>CipherDoc: A Searchable, Encrypted JSON Document Service on
Postgres</em>. Links:</p>
<ul>
<li><a href="https://www.pgcon.org/events/pgcon_2023/schedule/session/360-a-pattern-for-a-searchable-encrypted-json-document-service/" title="PGCon 2023 — CipherDoc: A Searchable, Encrypted JSON Document Service on Postgres">Description</a></li>
<li><a href="https://www.pgcon.org/events/pgcon_2023/sessions/session/360/slides/73/cipher-doc.pdf">Slides</a></li>
<li><a href="https://www.youtube.com/watch?v=SUyHnjpr-0Q" title="CipherDoc: A Pattern for a Searchable, Encrypted JSON Document Service: David E Wheeler - PGCon 2023">Video</a></li>
</ul>
<p>I enjoyed designing this service. The ability to dynamically change the JSON
schema at runtime without database changes enables more agile development cycles
for busy teams. Its data privacy features required a level of intellectual
challenge and raw problem-solving (a.k.a., <em>engineering</em>) that challenge and
invigorate me.</p>
<p>Two minor updates since May:</p>
<ol>
<li>I re-implemented the <a href="https://www.postgresql.org/docs/12/datatype-json.html#DATATYPE-JSONPATH" title="PostgreSQL Docs: jsonpath Type">JSON/SQL Path</a> parser using the original Postgres
<a href="https://github.com/postgres/postgres/blob/REL_15_4/src/backend/utils/adt/jsonpath_gram.y" title="jsonpath_gram.y: Grammar definitions for jsonpath datatype">path grammar</a> and <a href="https://pkg.go.dev/golang.org/x/tools/cmd/goyacc" title="Goyacc is a version of yacc for Go. It is written in Go and generates parsers written in Go">goyacc</a>, replacing the hand-written parser roundly
castigated in the presentation.</li>
<li>The service has yet to be open-sourced, but I remain optimistic, and
continue to work with leadership at <em>The Times</em> towards an open-source
policy to enable its release.</li>
</ol>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/pgcon/">PGCon</a></li>
                <li><a href="https://justatheory.com/tags/cipherdoc/">CipherDoc</a></li>
                <li><a href="https://justatheory.com/tags/privacy/">Privacy</a></li>
                <li><a href="https://justatheory.com/tags/encryption/">Encryption</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2020/10/release-postgres-extensions-with-github-actions/</id>
		<title type="html"><![CDATA[Automate Postgres Extension Releases on GitHub and PGXN]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2020/10/release-postgres-extensions-with-github-actions/"/>
		<updated>2023-02-20T23:55:17Z</updated>
		<published>2020-10-25T23:48:36Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="pgxn" label="PGXN"/>
		<category scheme="https://justatheory.com/tags" term="github" label="GitHub"/>
		<category scheme="https://justatheory.com/tags" term="github-actions" label="GitHub Actions"/>
		<category scheme="https://justatheory.com/tags" term="automation" label="Automation"/>
		<category scheme="https://justatheory.com/tags" term="ci/cd" label="CI/CD"/>
		<summary type="html"><![CDATA[Go beyond testing and fully automate the release of Postgres extensions on both GitHub and PGXN using GitHub actions.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>Back in June, I wrote about <a href="https://justatheory.com/2020/06/test-extensions-with-github-actions/" title="Test Postgres Extensions With GitHub Actions">testing Postgres extensions</a> on
multiple versions of Postgres using <a href="https://github.com/features/actions">GitHub Actions</a>. The pattern relies on
Docker image, <a href="https://hub.docker.com/repository/docker/pgxn/pgxn-tools">pgxn/pgxn-tools</a>, which contains scripts to build and run any
version of PostgreSQL, install additional dependencies, build, test, bundle, and
release an extension. I&rsquo;ve since updated it to support testing on the the latest
development release of Postgres, meaning one can test on any major version from
8.4 to (currently) 14. I&rsquo;ve also created GitHub workflows for all of my PGXN
extensions (except for <a href="https://pgtap.org">pgTAP</a>, which is complicated). I&rsquo;m quite happy with it.</p>
<p>But I was never quite satisfied with the release process. Quite a number of
Postgres extensions also release on GitHub; indeed, <a href="http://blog.cleverelephant.ca">Paul Ramsey</a> told me
straight up that he did not want to manually upload extensions like <a href="https://github.com/pramsey/pgsql-http">pgsql-http</a>
and <a href="http://postgis.net">PostGIS</a> to PGXN, but for PGXN to automatically pull them in when they were
published on GitHub. It&rsquo;s pretty cool that newer packaging systems like
<a href="https://pkg.go.dev">pkg.go.dev</a> auto-index any packages on GibHub. Adding such a feature to PGXN
would be an interesting exercise.</p>
<p>But since I&rsquo;m low on TUITs for such a significant undertaking, I decided instead
to work out how to automatically publish a release on GitHub <em>and</em> PGXN via
<a href="https://github.com/features/actions">GitHub Actions</a>. After experimenting for a few months, I&rsquo;ve worked out a
straightforward method that should meet the needs of most projects. I&rsquo;ve proven
the pattern via the <a href="https://github.com/theory/kv-pair/">pair extension</a>&rsquo;s <a href="https://github.com/theory/kv-pair/blob/main/.github/workflows/release.yml"><code>release.yml</code></a>, which successfully
published the v0.1.7 release today on both <a href="https://github.com/theory/kv-pair/releases/tag/v0.1.7">GitHub</a> and
<a href="https://pgxn.org/dist/pair/0.1.7/">PGXN</a>. With that success, I updated the <a href="https://hub.docker.com/repository/docker/pgxn/pgxn-tools">pgxn/pgxn-tools</a>
documentation with a starter example. It looks like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tags</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;v*&#39;</span><span class="w"> </span><span class="c"># Push events matching v1.0, v20.15.10, etc.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">release</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Release on GitHub and PGXN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container</span><span class="p">:</span><span class="w"> </span><span class="l">pgxn/pgxn-tools</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># Required to create GitHub release and upload the bundle.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">GITHUB_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.GITHUB_TOKEN }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Check out the repo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Bundle the Release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">bundle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">pgxn-bundle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Release on PGXN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Required to release on PGXN.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">PGXN_USERNAME</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.PGXN_USERNAME }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">PGXN_USERNAME</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.PGXN_PASSWORD }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">pgxn-release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Create GitHub Release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/create-release@v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">tag_name</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.ref }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">release_name</span><span class="p">:</span><span class="w"> </span><span class="l">Release ${{ github.ref }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">body</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          Changes in this Release
</span></span></span><span class="line"><span class="cl"><span class="sd">          - First Change
</span></span></span><span class="line"><span class="cl"><span class="sd">          - Second Change</span><span class="w">          
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload Release Asset</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-release-asset@v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Reference the upload URL and bundle name from previous steps.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">upload_url</span><span class="p">:</span><span class="w"> </span><span class="l">${{ steps.release.outputs.upload_url }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">asset_path</span><span class="p">:</span><span class="w"> </span><span class="l">./${{ steps.bundle.outputs.bundle }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">asset_name</span><span class="p">:</span><span class="w"> </span><span class="l">${{ steps.bundle.outputs.bundle }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">asset_content_type</span><span class="p">:</span><span class="w"> </span><span class="l">application/zip</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Here&rsquo;s how it works:</p>
<ul>
<li>
<p>Lines 4-5 trigger the workflow only when a tag starting with the letter v is
pushed to the repository. This follows the common convention of tagging
releases with version numbers, such as <code>v0.1.7</code> or <code>v4.6.0-dev</code>. This
assumes that the tag represents the commit for the release.</p>
</li>
<li>
<p>Line 10 specifies that the job run in the <a href="https://hub.docker.com/repository/docker/pgxn/pgxn-tools">pgxn/pgxn-tools</a> container, where
we have our tools for building and releasing extensions.</p>
</li>
<li>
<p>Line 13 passes the <code>GITHUB_TOKEN</code> variable into the container. This is the
GitHub <a href="https://github.com/settings/tokens/new">personal access token</a> that&rsquo;s automatically set for every build. It
lets us call the <a href="https://docs.github.com/">GitHub API</a> via actions later in the workflow.</p>
</li>
<li>
<p>Step &ldquo;Bundle the Release&rdquo;, on Lines 17-19, validates the extension
<code>META.json</code> file and creates the release zip file. It does so by simply
reading the distribution name and version from the <code>META.json</code> file and
archiving the Git repo into a zip file. If your process for creating a
release file is more complicated, you can do it yourself here; just be sure
to include an <code>id</code> for the step, and emit a line of text so that later
actions know what file to release. The output should be appended to the
<code>$GITHUB_OUTPUT</code> file like this, with <code>$filename</code> representing the name of
the release file, usually <code>$extension-$version.zip</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">bundle</span><span class="o">=</span><span class="nv">$filename</span> &gt;&gt; <span class="nv">$GITHUB_OUTPUT</span>
</span></span></code></pre></div></li>
<li>
<p>Step &ldquo;Release on PGXN&rdquo;, on lines 20-25, releases the extension on PGXN. We
take this step first because it&rsquo;s the strictest, and therefore the most
likely to fail. If it fails, we don&rsquo;t end up with an orphan GitHub release
to clean up once we&rsquo;ve fixed things for PGXN.</p>
</li>
<li>
<p>With the success of a PGXN release, step &ldquo;Create GitHub Release&rdquo;, on lines
26-35, uses the GitHub <a href="https://github.com/actions/create-release">create-release</a> action to create a release
corresponding to the tag. Note the inclusion of <code>id: release</code>, which will be
referenced below. You&rsquo;ll want to customize the body of the release; for the <a href="https://github.com/theory/kv-pair/">pair extension</a>, I added a simple <a href="https://github.com/theory/kv-pair/blob/798cd00e76b5b029967262101b9bb2c4add0e9d2/Makefile#L28-L29">make target</a> to generate a file, then pass it
via the <code>body_path</code> config:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Generate Release Changes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">make latest-changes.md</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Create GitHub Release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id</span><span class="p">:</span><span class="w"> </span><span class="l">release</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/create-release@v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tag_name</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.ref }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">release_name</span><span class="p">:</span><span class="w"> </span><span class="l">Release ${{ github.ref }}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">body_path</span><span class="p">:</span><span class="w"> </span><span class="l">latest-changes.md</span><span class="w">
</span></span></span></code></pre></div></li>
<li>
<p>Step &ldquo;Upload Release Asset&rdquo;, on lines 36-43, adds the release file to the
GitHub release, using output of the <code>release</code> step to specify the URL to
upload to, and the output of the <code>bundle</code> step to know what file to upload.</p>
</li>
</ul>
<p>Lotta steps, but works nicely. I only wish I could require that the testing
workflow finish before doing a release, but I generally tag a release once it
has been thoroughly tested in previous commits, so I think it&rsquo;s acceptable.</p>
<p>Now if you&rsquo;ll excuse me, I&rsquo;m off to add this workflow to my other PGXN
extensions.</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/pgxn/">PGXN</a></li>
                <li><a href="https://justatheory.com/tags/github/">GitHub</a></li>
                <li><a href="https://justatheory.com/tags/github-actions/">GitHub Actions</a></li>
                <li><a href="https://justatheory.com/tags/automation/">Automation</a></li>
                <li><a href="https://justatheory.com/tags/ci/cd/">CI/CD</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2018/08/pgenv/</id>
		<title type="html"><![CDATA[pgenv]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2018/08/pgenv/"/>
		<updated>2018-08-02T04:31:03Z</updated>
		<published>2018-08-02T04:31:03Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="pgenv" label="pgenv"/>
		<summary type="html"><![CDATA[I wrote a simple PostgreSQL binary manager. You should try it.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>For years, I&rsquo;ve managed multiple versions of PostgreSQL by regularly editing and
running a <a href="https://github.com/theory/my-cap/blob/master/bin/perl-regress.sh">simple script</a> that builds each major version from source and
installs it in <code>/usr/local</code>. I would shut down the current version, remove the
symlink to <code>/usr/local/pgsql</code>, symlink the one I wanted, and start it up again.</p>
<p>This is a pain in the ass.</p>
<p>Recently I wiped my work computer (because reasons) and started reinstalling all
my usual tools. PostgreSQL, I decided, no longer needs to run as the <code>postgres</code>
user from <code>/usr/local</code>. What would be much nicer, when it came time to test
<a href="https://pgtap.org/" title="pgTAP: Unit testing for PostgreSQL">pgTAP</a> against all supported versions of Postgres, would be to use a tool like
<a href="https://github.com/tokuhirom/plenv" title="plenv - Perl binary manager">plenv</a> or <a href="https://github.com/rbenv/rbenv" title="rbenv - Groom your app's Ruby environment">rbenv</a> to do all the work for me.</p>
<p>So I wrote <a href="https://github.com/theory/pgenv" title="pgenv - PostgreSQL binary manager">pgenv</a>. To use it, clone it into <code>~/.pgenv</code> (or wherever you want)
and add its <code>bin</code> directories to your <code>$PATH</code> environment variable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> git clone https://github.com/theory/pgenv.git
</span></span><span class="line"><span class="cl"><span class="go">echo &#39;export PATH=&#34;$HOME/.pgenv/bin:$HOME/.pgenv/pgsql/bin:$PATH&#34;&#39; &gt;&gt; ~/.bash_profile
</span></span></span></code></pre></div><p>Then you&rsquo;re ready to go:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pgenv build 10.4
</span></span></code></pre></div><p>A few minutes later, it&rsquo;s there:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pgenv versions
</span></span><span class="line"><span class="cl"><span class="go">pgsql-10.4
</span></span></span></code></pre></div><p>Let&rsquo;s use it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pgenv use 10.4
</span></span><span class="line"><span class="cl"><span class="go">The files belonging to this database system will be owned by user &#34;david&#34;.
</span></span></span><span class="line"><span class="cl"><span class="go">This user must also own the server process.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">#</span>    <span class="o">(</span>initdb output elided<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="go">waiting for server to start.... done
</span></span></span><span class="line"><span class="cl"><span class="go">server started
</span></span></span><span class="line"><span class="cl"><span class="go">PostgreSQL 10.4 started
</span></span></span></code></pre></div><p>Now connect:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> psql -U postgres
</span></span><span class="line"><span class="cl"><span class="go">psql (10.4)
</span></span></span><span class="line"><span class="cl"><span class="go">Type &#34;help&#34; for help.
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="go">postgres=# 
</span></span></span></code></pre></div><p>Easy. Each version you install &ndash; as far back as 8.0 &ndash; has the default super
user <code>postgres</code> for compatibility with the usual system-installed version. It
also builds all contrib modules, including PL/Perl using <code>/usr/bin/perl</code>.</p>
<p>With this little app in place, I quickly built all the versions I need. Check it
out:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">$</span> pgenv versions
</span></span><span class="line"><span class="cl"><span class="go">     pgsql-10.3
</span></span></span><span class="line"><span class="cl"><span class="go">  *  pgsql-10.4
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-11beta2
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-8.0.26
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-8.1.23
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-8.2.23
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-8.3.23
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-8.4.22
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-9.0.19
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-9.1.24
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-9.2.24
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-9.3.23
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-9.4.18
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-9.5.13
</span></span></span><span class="line"><span class="cl"><span class="go">     pgsql-9.6.9
</span></span></span></code></pre></div><p>Other commands include <code>start</code>, <code>stop</code>, and <code>restart</code>, which act on the
currently active version; <code>version</code>, which shows the currently-active version
(also indicated by the asterisk in the output of the <code>versions</code> command);
<code>clear</code>, to clear the currently-active version (in case you&rsquo;d rather fall back
on a system-installed version, for example); and <code>remove</code>, which will remove a
version. See <a href="https://github.com/theory/pgenv#readme" title="pgenv README">the docs</a> for details on all the commands.</p>
<h2 id="how-it-works">How it Works</h2>
<p>All this was written in an uncomplicated Bash script. I&rsquo;ve ony tested it on a
couple of Macs, so YMMV, but as long as you have Bash, Curl, and <code>/usr/bin/perl</code>
on a system, it ought to just work.</p>
<p><em>How</em> it works is by building each version in its own directory:
<code>~/.pgenv/pgsql-10.4</code>, <code>~/.pgenv/pgsql-11beta2</code>, and so on. The currently-active
version is nothing more than symlink, <code>~/.pgenv/pgsql</code>, to the proper version
directory. There is no other configuration. pgenv downloads and builds versions
in the <code>~/.pgenv/src</code> directory, and the tarballs and compiled source left in
place, in case they&rsquo;re needed for development or testing. pgenv never uses them
again unless you delete a version and <code>pgenv build</code> it again, in which case
pgenv deletes the old build directory and unpacks from the tarball again.</p>
<h2 id="works-for-me">Works for Me!</h2>
<p>Over the last week, I hacked on pgenv to get all of these commands working. It
works very well for my needs. Still, I think it might be useful to add support
for a configuration file. It might allow one to change the name of the default
superuser, the location Perl, and perhaps a method to change <code>postgresql.conf</code>
settings following an <code>initdb</code>. I don&rsquo;t know when (or if) I&rsquo;ll need that stuff,
though. Maybe you do, though? <a href="https://github.com/theory/pgenv/pulls" title="pgenv Pull Requests">Pull requests</a> welcome!</p>
<p>But even if you don&rsquo;t, give it a whirl and <a href="https://github.com/theory/pgenv/issues" title="pgenv Issues">let me know</a> if you find any
issues.</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/pgenv/">pgenv</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2013/10/indexing-nested-hstore/</id>
		<title type="html"><![CDATA[Indexing Nested hstore]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2013/10/indexing-nested-hstore/"/>
		<updated>2013-10-25T14:36:00Z</updated>
		<published>2013-10-25T14:36:00Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="hstore" label="hstore"/>
		<summary type="html"><![CDATA[In my first Nested hstore post yesterday, I ran a query against unindexed hstore data, which required a table scan. But hstore is able to take advantage of GIN indexes. So let’s see what that looks like. Connecting to the same database, I indexed the review column:
reviews=# CREATE INDEX idx_reviews_gin ON reviews USING GIN(review); CREATE INDEX Time: 360448.426 ms reviews=# SELECT pg_size_pretty(pg_database_size(current_database())); pg_size_pretty &mdash;&mdash;&mdash;&mdash;&mdash;- 421 MB Well, that takes a while, and makes the database a lot bigger (it was 277 MB unindexed).]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>In my first <a href="https://justatheory.com/2013/10/testing-nested-hstore/">Nested hstore</a> post yesterday, I ran a query against unindexed
hstore data, which required a table scan. But hstore is able to take advantage
of <a href="https://www.postgresql.org/docs/current/gin.html">GIN indexes</a>. So let&rsquo;s see what that looks like. Connecting to the same
database, I indexed the <code>review</code> column:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="n">reviews</span><span class="o">=#</span> <span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">idx_reviews_gin</span> <span class="k">ON</span> <span class="n">reviews</span> <span class="k">USING</span> <span class="n">GIN</span><span class="p">(</span><span class="n">review</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">INDEX</span>
</span></span><span class="line"><span class="cl"><span class="nb">Time</span><span class="p">:</span> <span class="mf">360448.426</span> <span class="n">ms</span>
</span></span><span class="line"><span class="cl"><span class="n">reviews</span><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">pg_size_pretty</span><span class="p">(</span><span class="n">pg_database_size</span><span class="p">(</span><span class="n">current_database</span><span class="p">()));</span>
</span></span><span class="line"><span class="cl"> <span class="n">pg_size_pretty</span> 
</span></span><span class="line"><span class="cl"><span class="c1">----------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="mf">421</span> <span class="n">MB</span>
</span></span></code></pre></div><p>Well, that takes a while, and makes the database a lot bigger (it was 277 MB
unindexed). But is it worth it? Let&rsquo;s find out. Oleg and Teodor&rsquo;s patch adds
support for a nested hstore value on the right-hand-side of the <code>@&gt;</code> operator.
In practice, that means we can specify the full path to a nested value as an
hstore expression. In our case, to query only for Books, instead of using this
expression:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">WHERE</span> <span class="n">review</span> <span class="o">#&gt;</span> <span class="s1">&#39;{product,group}&#39;</span> <span class="o">=</span> <span class="s1">&#39;Book&#39;</span>
</span></span></code></pre></div><p>We can use an hstore value with the entire path, including the value:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">WHERE</span> <span class="n">review</span> <span class="o">@&gt;</span> <span class="s1">&#39;{product =&gt; {group =&gt; Book}}&#39;</span>
</span></span></code></pre></div><p>Awesome, right? Let&rsquo;s give it a try:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="n">reviews</span><span class="o">=#</span> <span class="k">SELECT</span>
</span></span><span class="line"><span class="cl">    <span class="n">width_bucket</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">review</span> <span class="o">#&gt;</span> <span class="s1">&#39;{product,title}&#39;</span><span class="p">),</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">50</span><span class="p">,</span> <span class="mf">5</span><span class="p">)</span> <span class="n">title_length_bucket</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">round</span><span class="p">(</span><span class="n">avg</span><span class="p">(</span><span class="n">review</span> <span class="o">#^&gt;</span> <span class="s1">&#39;{review,rating}&#39;</span><span class="p">),</span> <span class="mf">2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">review_average</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">FROM</span>
</span></span><span class="line"><span class="cl">    <span class="n">reviews</span>
</span></span><span class="line"><span class="cl"><span class="k">WHERE</span>
</span></span><span class="line"><span class="cl">    <span class="n">review</span> <span class="o">@&gt;</span> <span class="s1">&#39;{product =&gt; {group =&gt; Book}}&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">GROUP</span> <span class="k">BY</span>
</span></span><span class="line"><span class="cl">    <span class="n">title_length_bucket</span>
</span></span><span class="line"><span class="cl"><span class="k">ORDER</span> <span class="k">BY</span>
</span></span><span class="line"><span class="cl">    <span class="n">title_length_bucket</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="n">title_length_bucket</span> <span class="o">|</span> <span class="n">review_average</span> <span class="o">|</span> <span class="n">count</span>  
</span></span><span class="line"><span class="cl"><span class="c1">---------------------+----------------+--------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                   <span class="mf">1</span> <span class="o">|</span>           <span class="mf">4.42</span> <span class="o">|</span>  <span class="mf">56299</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">2</span> <span class="o">|</span>           <span class="mf">4.33</span> <span class="o">|</span> <span class="mf">170774</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">3</span> <span class="o">|</span>           <span class="mf">4.45</span> <span class="o">|</span> <span class="mf">104778</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">4</span> <span class="o">|</span>           <span class="mf">4.41</span> <span class="o">|</span>  <span class="mf">69719</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">5</span> <span class="o">|</span>           <span class="mf">4.36</span> <span class="o">|</span>  <span class="mf">47110</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">6</span> <span class="o">|</span>           <span class="mf">4.43</span> <span class="o">|</span>  <span class="mf">43070</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">6</span> <span class="k">rows</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Time</span><span class="p">:</span> <span class="mf">849.681</span> <span class="n">ms</span>
</span></span></code></pre></div><p>That time looks better than yesterday&rsquo;s, but in truth I first ran this query
just before building the GIN index and got about the same result. Must be that
Mavericks is finished indexing my disk or something. At any rate, the index is
not buying us much here.</p>
<p>But hey, we&rsquo;re dealing with 1998 Amazon reviews, so querying against books
probably isn&rsquo;t very selective. I don&rsquo;t blame the planner for deciding that a
table scan is cheaper than an index scan. But what if we try a more selective
value, say &ldquo;DVD&rdquo;?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="n">reviews</span><span class="o">=#</span> <span class="k">SELECT</span>
</span></span><span class="line"><span class="cl">    <span class="n">width_bucket</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">review</span> <span class="o">#&gt;</span> <span class="s1">&#39;{product,title}&#39;</span><span class="p">),</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">50</span><span class="p">,</span> <span class="mf">5</span><span class="p">)</span> <span class="n">title_length_bucket</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">round</span><span class="p">(</span><span class="n">avg</span><span class="p">(</span><span class="n">review</span> <span class="o">#^&gt;</span> <span class="s1">&#39;{review,rating}&#39;</span><span class="p">),</span> <span class="mf">2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">review_average</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">FROM</span>
</span></span><span class="line"><span class="cl">    <span class="n">reviews</span>
</span></span><span class="line"><span class="cl"><span class="k">WHERE</span>
</span></span><span class="line"><span class="cl">    <span class="n">review</span> <span class="o">@&gt;</span> <span class="s1">&#39;{product =&gt; {group =&gt; DVD}}&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">GROUP</span> <span class="k">BY</span>
</span></span><span class="line"><span class="cl">    <span class="n">title_length_bucket</span>
</span></span><span class="line"><span class="cl"><span class="k">ORDER</span> <span class="k">BY</span>
</span></span><span class="line"><span class="cl">    <span class="n">title_length_bucket</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="n">title_length_bucket</span> <span class="o">|</span> <span class="n">review_average</span> <span class="o">|</span> <span class="n">count</span> 
</span></span><span class="line"><span class="cl"><span class="c1">---------------------+----------------+-------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                   <span class="mf">1</span> <span class="o">|</span>           <span class="mf">4.27</span> <span class="o">|</span>  <span class="mf">2646</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">2</span> <span class="o">|</span>           <span class="mf">4.44</span> <span class="o">|</span>  <span class="mf">4180</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">3</span> <span class="o">|</span>           <span class="mf">4.53</span> <span class="o">|</span>  <span class="mf">1996</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">4</span> <span class="o">|</span>           <span class="mf">4.38</span> <span class="o">|</span>  <span class="mf">2294</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">5</span> <span class="o">|</span>           <span class="mf">4.48</span> <span class="o">|</span>   <span class="mf">943</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">6</span> <span class="o">|</span>           <span class="mf">4.42</span> <span class="o">|</span>   <span class="mf">738</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">6</span> <span class="k">rows</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Time</span><span class="p">:</span> <span class="mf">73.913</span> <span class="n">ms</span>
</span></span></code></pre></div><p>Wow! Under 100ms. That&rsquo;s more like it! <a href="http://en.wikipedia.org/wiki/Inverted_index">Inverted indexing</a> FTW!</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/hstore/">hstore</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2013/10/testing-nested-hstore/</id>
		<title type="html"><![CDATA[Testing Nested hstore]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2013/10/testing-nested-hstore/"/>
		<updated>2013-10-23T10:26:00Z</updated>
		<published>2013-10-23T10:26:00Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="hstore" label="hstore"/>
		<summary type="html"><![CDATA[I’ve been helping Oleg Bartunov and Teodor Sigaev with documentation for the forthcoming nested hstore patch for PostgreSQL. It adds support for arrays, numeric and boolean types, and of course arbitrarily nested data structures. This gives it feature parity with JSON, but unlike the JSON type, its values are stored in a binary representation, which makes it much more efficient to query. The support for GiST and GIN indexes to speed up path searches doesn’t hurt, either.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>I&rsquo;ve been helping Oleg Bartunov and Teodor Sigaev with documentation for the
forthcoming <a href="http://www.sai.msu.su/~megera/postgres/talks/hstore-pgcon-2013.pdf">nested hstore</a> patch for <a href="https://www.postgresql.org/">PostgreSQL</a>. It adds support for
arrays, numeric and boolean types, and of course arbitrarily nested data
structures. This gives it feature parity with <a href="http://json.org/">JSON</a>, but unlike the
<a href="https://www.postgresql.org/docs/current/datatype-json.html">JSON type</a>, its values are stored in a binary representation, which makes it
much more efficient to query. The support for <a href="https://www.postgresql.org/docs/current/gist.html">GiST</a> and <a href="https://www.postgresql.org/docs/current/gin.html">GIN</a> indexes to
speed up path searches doesn&rsquo;t hurt, either.</p>
<p>As part of the documentation, we wanted to include a short tutorial, something
to show off the schemaless flexibility of the new hstore. The <a href="http://citusdata.com/">CitusDB</a> guys
were kind enough to show off their <a href="https://github.com/citusdata/json_fdw">json_fdw</a> with some Amazon review data in
a <a href="https://www.citusdata.com/blog/2013/05/30/run-sql-on-json-files-without-any-data-loads/">blog post</a> a few months back; it even includes an interesting query against
the data. Let&rsquo;s see what we can do with it. First, load it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">&gt;</span> createdb reviews
</span></span><span class="line"><span class="cl"><span class="gp">&gt;</span> psql -d reviews -c <span class="err">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">    CREATE EXTENSION HSTORE;
</span></span></span><span class="line"><span class="cl"><span class="go">    CREATE TABLE reviews(review hstore);
</span></span></span><span class="line"><span class="cl"><span class="go">&#39;
</span></span></span><span class="line"><span class="cl"><span class="go">CREATE TABLE
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">&gt;</span> gzcat customer_reviews_nested_1998.json.gz <span class="p">|</span> sed -e <span class="s1">&#39;s/\\/\\\\/g&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="go"> | sed -e &#34;s/&#39;/&#39;&#39;/g&#34; | sed -e &#39;s/&#34;:/&#34; =&gt;/g&#39; &gt; /tmp/hstore.copy
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">&gt;</span> <span class="nb">time</span> psql -d reviews -c <span class="s2">&#34;COPY reviews FROM &#39;/tmp/hstore.copy&#39;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="go">COPY 589859
</span></span></span><span class="line"><span class="cl"><span class="go">       0.00s user 0.00s system 0% cpu 13.059 total
</span></span></span></code></pre></div><p>13 seconds to load 589,859 records from a file &ndash; a little over 45k records
per second. Not bad. Let&rsquo;s see what the storage looks like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">&gt;</span> psql -d reviews -c <span class="s1">&#39;SELECT pg_size_pretty(pg_database_size(current_database()));&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go"> pg_size_pretty 
</span></span></span><span class="line"><span class="cl"><span class="go">----------------
</span></span></span><span class="line"><span class="cl"><span class="go"> 277 MB
</span></span></span></code></pre></div><p>The original, uncompressed data is 208 MB on disk, so roughly a third bigger
given the overhead of the database. Just for fun, let&rsquo;s compare it to JSON:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-console" data-lang="console"><span class="line"><span class="cl"><span class="gp">&gt;</span> createdb reviews_js
</span></span><span class="line"><span class="cl"><span class="gp">&gt;</span> psql -d reviews_js -c <span class="s1">&#39;CREATE TABLE reviews(review json);&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go">CREATE TABLE
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">&gt;</span> gzcat customer_reviews_nested_1998.json.gz <span class="p">|</span> sed -e <span class="s1">&#39;s/\\/\\\\/g&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="go"> | sed -e &#34;s/&#39;/&#39;&#39;/g&#34; | &gt; /tmp/json.copy
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">&gt;</span> <span class="nb">time</span> psql -d reviews_js -c <span class="s2">&#34;COPY reviews FROM &#39;/tmp/json.copy&#39;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="go">COPY 589859
</span></span></span><span class="line"><span class="cl"><span class="go">       0.00s user 0.00s system 0% cpu 7.434 total
</span></span></span><span class="line"><span class="cl"><span class="go"></span><span class="gp">&gt;</span> psql -d reviews_js -c <span class="s1">&#39;SELECT pg_size_pretty(pg_database_size(current_database()));&#39;</span>
</span></span><span class="line"><span class="cl"><span class="go"> pg_size_pretty 
</span></span></span><span class="line"><span class="cl"><span class="go">----------------
</span></span></span><span class="line"><span class="cl"><span class="go"> 239 MB
</span></span></span></code></pre></div><p>Almost 80K records per second, faster, I&rsquo;m guessing, because the JSON type
doesn&rsquo;t convert the data to binary representation its way in. JSON currently
uses less overhead for storage, aw well; I wonder if that&rsquo;s the benefit of
<a href="https://www.postgresql.org/docs/current/storage-toast.html">TOAST storage</a>?</p>
<p>Let&rsquo;s try querying these guys. I adapted the query from the CitusDB <a href="https://www.citusdata.com/blog/2013/05/30/run-sql-on-json-files-without-any-data-loads/">blog
post</a> and ran it on my 2013 MacBook Air (1.7 GHz Intel Core i7) with iTunes
and a bunch of other apps running in the background [yeah, I&rsquo;m lazy]). Check
out those operators, by the way! Given a path, <code>#^&gt;</code> returns a numeric value:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="n">reviews</span><span class="o">=#</span> <span class="k">SELECT</span>
</span></span><span class="line"><span class="cl">    <span class="n">width_bucket</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">review</span> <span class="o">#&gt;</span> <span class="s1">&#39;{product,title}&#39;</span><span class="p">),</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">50</span><span class="p">,</span> <span class="mf">5</span><span class="p">)</span> <span class="n">title_length_bucket</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">round</span><span class="p">(</span><span class="n">avg</span><span class="p">(</span><span class="n">review</span> <span class="o">#^&gt;</span> <span class="s1">&#39;{review,rating}&#39;</span><span class="p">),</span> <span class="mf">2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">review_average</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">FROM</span>
</span></span><span class="line"><span class="cl">    <span class="n">reviews</span>
</span></span><span class="line"><span class="cl"><span class="k">WHERE</span>
</span></span><span class="line"><span class="cl">    <span class="n">review</span> <span class="o">#&gt;</span> <span class="s1">&#39;{product,group}&#39;</span> <span class="o">=</span> <span class="s1">&#39;Book&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">GROUP</span> <span class="k">BY</span>
</span></span><span class="line"><span class="cl">    <span class="n">title_length_bucket</span>
</span></span><span class="line"><span class="cl"><span class="k">ORDER</span> <span class="k">BY</span>
</span></span><span class="line"><span class="cl">    <span class="n">title_length_bucket</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="n">title_length_bucket</span> <span class="o">|</span> <span class="n">review_average</span> <span class="o">|</span> <span class="n">count</span>  
</span></span><span class="line"><span class="cl"><span class="c1">---------------------+----------------+--------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                   <span class="mf">1</span> <span class="o">|</span>           <span class="mf">4.42</span> <span class="o">|</span>  <span class="mf">56299</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">2</span> <span class="o">|</span>           <span class="mf">4.33</span> <span class="o">|</span> <span class="mf">170774</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">3</span> <span class="o">|</span>           <span class="mf">4.45</span> <span class="o">|</span> <span class="mf">104778</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">4</span> <span class="o">|</span>           <span class="mf">4.41</span> <span class="o">|</span>  <span class="mf">69719</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">5</span> <span class="o">|</span>           <span class="mf">4.36</span> <span class="o">|</span>  <span class="mf">47110</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">6</span> <span class="o">|</span>           <span class="mf">4.43</span> <span class="o">|</span>  <span class="mf">43070</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">6</span> <span class="k">rows</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Time</span><span class="p">:</span> <span class="mf">2301.620</span> <span class="n">ms</span>
</span></span></code></pre></div><p>The benefit of the native type is pretty apparent here. I ran this query
several times, and the time was always between 2.3 and 2.4 seconds. The Citus
<a href="https://github.com/citusdata/json_fdw">json_fdw</a> query took &ldquo;about 6 seconds on a 3.1 GHz CPU core.&rdquo; Let&rsquo;s see how
well the JSON type does (pity there is no operator to fetch a value as
numeric; we have to cast from text):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="n">reviews_js</span><span class="o">=#</span> <span class="k">SELECT</span>
</span></span><span class="line"><span class="cl">    <span class="n">width_bucket</span><span class="p">(</span><span class="n">length</span><span class="p">(</span><span class="n">review</span> <span class="o">#&gt;&gt;</span> <span class="s1">&#39;{product,title}&#39;</span><span class="p">),</span> <span class="mf">1</span><span class="p">,</span> <span class="mf">50</span><span class="p">,</span> <span class="mf">5</span><span class="p">)</span> <span class="n">title_length_bucket</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">round</span><span class="p">(</span><span class="n">avg</span><span class="p">((</span><span class="n">review</span> <span class="o">#&gt;&gt;</span> <span class="s1">&#39;{review,rating}&#39;</span><span class="p">)</span><span class="o">::</span><span class="nb">numeric</span><span class="p">),</span> <span class="mf">2</span><span class="p">)</span> <span class="k">AS</span> <span class="n">review_average</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">FROM</span>
</span></span><span class="line"><span class="cl">    <span class="n">reviews</span>
</span></span><span class="line"><span class="cl"><span class="k">WHERE</span>
</span></span><span class="line"><span class="cl">    <span class="n">review</span> <span class="o">#&gt;&gt;</span> <span class="s1">&#39;{product,group}&#39;</span> <span class="o">=</span> <span class="s1">&#39;Book&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">GROUP</span> <span class="k">BY</span>
</span></span><span class="line"><span class="cl">    <span class="n">title_length_bucket</span>
</span></span><span class="line"><span class="cl"><span class="k">ORDER</span> <span class="k">BY</span>
</span></span><span class="line"><span class="cl">    <span class="n">title_length_bucket</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> <span class="n">title_length_bucket</span> <span class="o">|</span> <span class="n">review_average</span> <span class="o">|</span> <span class="n">count</span>  
</span></span><span class="line"><span class="cl"><span class="c1">---------------------+----------------+--------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                   <span class="mf">1</span> <span class="o">|</span>           <span class="mf">4.42</span> <span class="o">|</span>  <span class="mf">56299</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">2</span> <span class="o">|</span>           <span class="mf">4.33</span> <span class="o">|</span> <span class="mf">170774</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">3</span> <span class="o">|</span>           <span class="mf">4.45</span> <span class="o">|</span> <span class="mf">104778</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">4</span> <span class="o">|</span>           <span class="mf">4.41</span> <span class="o">|</span>  <span class="mf">69719</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">5</span> <span class="o">|</span>           <span class="mf">4.36</span> <span class="o">|</span>  <span class="mf">47110</span>
</span></span><span class="line"><span class="cl">                   <span class="mf">6</span> <span class="o">|</span>           <span class="mf">4.43</span> <span class="o">|</span>  <span class="mf">43070</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mf">6</span> <span class="k">rows</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Time</span><span class="p">:</span> <span class="mf">5530.120</span> <span class="n">ms</span>
</span></span></code></pre></div><p>A little faster than the <a href="https://github.com/citusdata/json_fdw">json_fdw</a> version, but comparable. But takes well
over twice as long as the hstore version, though. For queries, hstore is the
clear winner. Yes, you pay up-front for loading and storage, but the payoff at
query time is substantial. Ideally, of course, we would have the insert and
storage benefits of JSON <em>and</em> the query performance of hstore. There was talk
last spring at PGCon of using the same representation for JSON and hstore;
perhaps that can still come about.</p>
<p>Meanwhile, I expect to play with some other data sets over the next week;
watch this spot for more!</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/hstore/">hstore</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2013/09/the-power-of-enums/</id>
		<title type="html"><![CDATA[The Power of Enums]]></title>
		<link rel="alternate" type="text/html" href="https://web.archive.org/web/20131006041029/http://www.openscg.com/2013/09/the-power-of-enums/"/>
		<link rel="related" type="text/html" href="https://justatheory.com/2013/09/the-power-of-enums/"/>
		<updated>2022-05-22T21:37:05Z</updated>
		<published>2013-09-29T14:50:00Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="jim-mlodgenski" label="Jim Mlodgenski"/>
		<category scheme="https://justatheory.com/tags" term="enums" label="Enums"/>
		<summary type="html"><![CDATA[Jim Mlodgenski on using Enums in place of references to small lookup tables:
I saw something else I didn’t expect: […] There was a 8% increase in performance. I was expecting the test with the enums to be close to the baseline, but I wasn’t expecting it to be faster. Thinking about it, it makes sense. Enums values are just numbers so we’re effectively using surrogate keys under the covers, but the users would still the the enum labels when they are looking at the data.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>Jim Mlodgenski on using <a href="https://www.postgresql.org/docs/9.3/static/datatype-enum.html">Enums</a> in place of references to small lookup tables:</p>
<blockquote>
<p>I saw something else I didn’t expect: […] There was a 8% increase
in performance. I was expecting the test with the enums to be close
to the baseline, but I wasn’t expecting it to be faster. Thinking
about it, it makes sense. Enums values are just numbers so we’re
effectively using surrogate keys under the covers, but the users would
still the the enum labels when they are looking at the data. It ended
up being a no brainer to use enums for these static tables. There was
a increase in performance while still maintaining the integrity of the
data.</p>
</blockquote>
<p>I&rsquo;ve been a big fan of Enums since Andrew and Tom Dunstan released a patch for
them during the PostgreSQL 8.2 era. Today they&rsquo;re a core feature, and as of
9.1, you can even modify their values! You&rsquo;re missing out if you&rsquo;re not using
them yet.</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/jim-mlodgenski/">Jim Mlodgenski</a></li>
                <li><a href="https://justatheory.com/tags/enums/">Enums</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2013/08/understanding-window-functions/</id>
		<title type="html"><![CDATA[Understanding Window Functions]]></title>
		<link rel="alternate" type="text/html" href="http://tapoueh.org/blog/2013/08/20-Window-Functions"/>
		<link rel="related" type="text/html" href="https://justatheory.com/2013/08/understanding-window-functions/"/>
		<updated>2013-08-28T17:25:00Z</updated>
		<published>2013-08-28T17:25:00Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="sql" label="SQL"/>
		<category scheme="https://justatheory.com/tags" term="dimitri-fontaine" label="Dimitri Fontaine"/>
		<summary type="html"><![CDATA[Dimitri Fontaine:
There was SQL before window functions and SQL after window functions: that’s how powerful this tool is. Being that of a deal breaker unfortunately means that it can be quite hard to grasp the feature. This article aims at making it crystal clear so that you can begin using it today and are able to reason about it and recognize cases where you want to be using window functions.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>Dimitri Fontaine:</p>
<blockquote>
<p>There was SQL before <a href="https://www.postgresql.org/docs/current/tutorial-window.html" title="PostgreSQL Documentation: “Window Functions”">window functions</a> and SQL after <em>window functions:</em>
that&rsquo;s how powerful this tool is. Being that of a deal breaker unfortunately
means that it can be quite hard to grasp the feature. This article aims at
making it crystal clear so that you can begin using it today and are able to
reason about it and recognize cases where you want to be using <em>window
functions.</em></p>
</blockquote>
<p>Great intro to a powerful feature.</p>

        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/sql/">SQL</a></li>
                <li><a href="https://justatheory.com/tags/dimitri-fontaine/">Dimitri Fontaine</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2013/06/agile-db-dev/</id>
		<title type="html"><![CDATA[Agile Database Development Tutorial]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2013/06/agile-db-dev/"/>
		<updated>2022-01-02T17:18:32Z</updated>
		<published>2013-06-06T19:02:55Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="git" label="Git"/>
		<category scheme="https://justatheory.com/tags" term="sqitch" label="Sqitch"/>
		<category scheme="https://justatheory.com/tags" term="pgtap" label="pgTAP"/>
		<category scheme="https://justatheory.com/tags" term="pgcon" label="PgCON"/>
		<summary type="html"><![CDATA[I gave a tutorial at PGCon a couple weeks back, entitled “Agile Database Development with Git, Sqitch, and pgTAP.” It went well, I think. The Keynote document and an exported PDF have been posted on PGCon.org, and also uploaded here and to Speaker Deck. And embedded below, too. Want to follow along? Clone the tutorial Git repository and follow along. Here’s the teaser:
Hi, I’m David. I like to write database apps.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>I gave a tutorial at <a href="https://www.pgcon.org/2013/">PGCon</a> a couple weeks back, entitled “<a href="https://www.pgcon.org/2013/schedule/events/615.en.html">Agile Database
Development</a> with Git, Sqitch, and pgTAP.” It went well, I think. The Keynote
document and an exported PDF have been <a href="https://www.pgcon.org/2013/schedule/events/615.en.html">posted on PGCon.org</a>, and also uploaded <a href="https://justatheory.com/2013/06/agile-db-dev/agile_database_development.pdf" title="Download “Agile Database Development”">here</a> and to <a href="https://speakerdeck.com/theory/agile-database-development" title="Speaker Deck: “Agile Database Development”">Speaker Deck</a>. And embedded
below, too. Want to follow along? Clone the <a href="https://github.com/sqitchers/agile-flipr">tutorial Git repository</a> and follow
along. Here’s the teaser:</p>
<blockquote>
<p>Hi, I’m David. I like to write database apps. Just as much as I like to write
web apps. (Maybe more!) How? Not by relying on bolted-on, half-baked database
integration tools like migrations, I’ll tell you that!. Instead, I make
extensive use of best-of-breed tools for source control (<a href="https://git-scm.com">Git</a>), database unit
testing (<a href="https://pgtap.org/">pgTAP</a>), and database change management and deployment (<a href="https://sqitch.org/">Sqitch</a>).
If you’d like to get as much pleasure out of database development as you do
application development, join me for this tutorial. We’ll develop a sample
application using the processes and tools I’ve come to depend on, and you’ll
find out whether they might work for you. Either way, I promise it will at
least be an amusing use of your time.</p>
</blockquote>
<p><object
data="https://justatheory.com/2013/06/agile-db-dev/agile_database_development.pdf"
class="slides"
type="application/pdf"
title="Agile Database Development">
</object></p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/agile-db-dev.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/git/">Git</a></li>
                <li><a href="https://justatheory.com/tags/sqitch/">Sqitch</a></li>
                <li><a href="https://justatheory.com/tags/pgtap/">pgTAP</a></li>
                <li><a href="https://justatheory.com/tags/pgcon/">PgCON</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2013/02/bootstrap-bucardo-mulitmaster/</id>
		<title type="html"><![CDATA[Bootstrapping Bucardo Master/Master Replication]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2013/02/bootstrap-bucardo-mulitmaster/"/>
		<updated>2013-02-12T22:11:19Z</updated>
		<published>2013-02-12T22:11:19Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="bucardo" label="Bucardo"/>
		<category scheme="https://justatheory.com/tags" term="database-replication" label="Database Replication"/>
		<summary type="html"><![CDATA[Let’s say you have a production database up and running and you want to set up a second database with Bucardo-powered replication between them. Getting a new master up and running without downtime for an existing master, and without losing any data, is a bit fiddly and under-documented. Having just figured out one way to do it with the forthcoming Bucardo 5 code base, I wanted to blog it as much for my own reference as for yours.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>Let’s say you have a production database up and running and you want to set up a
second database with <a href="http://bucardo.org/">Bucardo</a>-powered replication between them. Getting a new
master up and running without downtime for an existing master, and without
losing any data, is a bit fiddly and under-documented. Having just figured out
one way to do it with the forthcoming Bucardo 5 code base, I wanted to blog it
as much for my own reference as for yours.</p>
<p>First, let’s set up some environment variables to simplify things a bit. I’m
assuming that the database names and usernames are the same, and only the host
names are different:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PGDATABASE</span><span class="o">=</span>widgets
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PGHOST</span><span class="o">=</span>here.example.com
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PGHOST2</span><span class="o">=</span>there.example.com
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PGSUPERUSER</span><span class="o">=</span>postgres
</span></span></code></pre></div><p>And here are some environment variables we’ll use for Bucardo configuration
stuff:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">BUCARDOUSER</span><span class="o">=</span>bucardo
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">BUCARDOPASS</span><span class="o">=</span>*****
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HERE</span><span class="o">=</span>here
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">THERE</span><span class="o">=</span>there
</span></span></code></pre></div><p>First, let’s create the new database as a schema-only copy of the existing
database:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">createdb -U <span class="nv">$PGSUPERUSER</span> -h <span class="nv">$PGHOST2</span> <span class="nv">$PGDATABASE</span>
</span></span><span class="line"><span class="cl">pg_dump -U <span class="nv">$PGSUPERUSER</span> -h <span class="nv">$PGHOST</span> --schema-only <span class="nv">$PGDATABASE</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> <span class="p">|</span> psql -U <span class="nv">$PGSUPERUSER</span> -h <span class="nv">$PGHOST2</span> -d <span class="nv">$PGDATABASE</span>
</span></span></code></pre></div><p>You might also have to copy over roles; use <code>pg_dumpall --globals-only</code> to do
that.</p>
<p>Next, we configure Bucardo. Start by telling it about the databases:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bucardo add db <span class="nv">$HERE$PGDATABASE</span> <span class="nv">dbname</span><span class="o">=</span><span class="nv">$PGDATABASE</span> <span class="nv">host</span><span class="o">=</span><span class="nv">$PGHOST</span> <span class="nv">user</span><span class="o">=</span><span class="nv">$BUCARDOUSER</span> <span class="nv">pass</span><span class="o">=</span><span class="nv">$BUCARDOPASS</span>
</span></span><span class="line"><span class="cl">bucardo add db <span class="nv">$THERE$PGDATABASE</span> <span class="nv">dbname</span><span class="o">=</span><span class="nv">$PGDATABASE</span> <span class="nv">host</span><span class="o">=</span><span class="nv">$PGHOST2</span> <span class="nv">user</span><span class="o">=</span><span class="nv">$BUCARDOUSER</span> <span class="nv">pass</span><span class="o">=</span><span class="nv">$BUCARDOPASS</span>
</span></span></code></pre></div><p>Tell it about all the tables we want to replicate:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bucardo add table public.foo public.bar <span class="nv">relgroup</span><span class="o">=</span>myrels <span class="nv">db</span><span class="o">=</span><span class="nv">$HERE$PGDATABASE</span> 
</span></span></code></pre></div><p>Create a multi-master database group for the two databases:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bucardo add dbgroup mydbs <span class="nv">$HERE$PGDATABASE</span>:source <span class="nv">$THERE$PGDATABASE</span>:source
</span></span></code></pre></div><p>And create the sync:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bucardo add sync mysync <span class="nv">relgroup</span><span class="o">=</span>myrels <span class="nv">dbs</span><span class="o">=</span>mydbs <span class="nv">autokick</span><span class="o">=</span><span class="m">0</span>
</span></span></code></pre></div><p>Note <code>autokick=0</code>. This ensures that, while deltas are logged, they will not be
copied anywhere until we tell Bucardo to do so.</p>
<p>And now that we know that any changes from here on in will be queued for
replication, we can go ahead and copy over the data. The only caveat is that we
need to disable the Bucardo triggers on the target system, so that our copying
does not try to queue up. We do that by setting the <a href="https://www.postgresql.org/docs/9.2/static/runtime-config-client.html#GUC-SESSION-REPLICATION-ROLE"><code>session_replication_role</code>
GUC</a> to “replica” while doing the copy:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pg_dump -U <span class="nv">$PGSUPERUSER</span> -h <span class="nv">$PGHOST</span> --data-only -N bucardo <span class="nv">$PGDATABASE</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> <span class="nv">PGOPTIONS</span><span class="o">=</span><span class="s1">&#39;-c session_replication_role=replica&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> psql -U <span class="nv">$PGSUPERUSER</span> -h <span class="nv">$PGHOST2</span> -d <span class="nv">$PGDATABASE</span>
</span></span></code></pre></div><p>Great, now all the data is copied over, we can have Bucardo copy any changes
that have been made in the interim, as well as any going forward:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bucardo update sync mysync <span class="nv">autokick</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">bucardo reload config
</span></span></code></pre></div><p>Bucardo will fire up the necessary syncs and copy over any interim deltas. And
any changes you make to either system in the future will be copied to the other.</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/bootstrap-bucardo-mulitmaster.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/bucardo/">Bucardo</a></li>
                <li><a href="https://justatheory.com/tags/database-replication/">Database Replication</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2012/11/postgres-format-function/</id>
		<title type="html"><![CDATA[New in PostgreSQL 9.2: format()]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2012/11/postgres-format-function/"/>
		<updated>2012-11-16T01:31:00Z</updated>
		<published>2012-11-16T01:31:00Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="sql" label="SQL"/>
		<summary type="html"><![CDATA[There’s a new feature in PostgreSQL 9.2 that I don’t recall seeing blogged about elsewhere: the format() function. From the docs:
Format a string. This function is similar to the C function sprintf; but only the following conversion specifications are recognized: %s interpolates the corresponding argument as a string; %I escapes its argument as an SQL identifier; %L escapes its argument as an SQL literal; %% outputs a literal %. A conversion can reference an explicit parameter position by preceding the conversion specifier with n$, where n is the argument position.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>There’s a new feature in PostgreSQL 9.2 that I don’t recall seeing blogged about
elsewhere: the <code>format()</code> function. From <a href="https://www.postgresql.org/docs/current/functions-string.html">the docs</a>:</p>
<blockquote>
<p>Format a string. This function is similar to the C function sprintf; but only
the following conversion specifications are recognized: %s interpolates the
corresponding argument as a string; %I escapes its argument as an SQL
identifier; %L escapes its argument as an SQL literal; %% outputs a literal %.
A conversion can reference an explicit parameter position by preceding the
conversion specifier with n$, where n is the argument position.</p>
</blockquote>
<p>If you do a lot of dynamic query building in PL/pgSQL functions, you’ll
immediately see the value in <code>format()</code>. Consider this function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plpgsql" data-lang="plpgsql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="k">REPLACE</span><span class="w"> </span><span class="k">FUNCTION</span><span class="w"> </span><span class="n">make_month_partition</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">base_table</span><span class="w">   </span><span class="nb">TEXT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">schema_name</span><span class="w">  </span><span class="nb">TEXT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">month</span><span class="w">        </span><span class="nb">TIMESTAMP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">RETURNS</span><span class="w"> </span><span class="nb">VOID</span><span class="w"> </span><span class="k">LANGUAGE</span><span class="w"> </span><span class="n">plpgsql</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">$</span><span class="n">_</span><span class="err">$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DECLARE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">partition</span><span class="w"> </span><span class="nb">TEXT</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">quote_ident</span><span class="p">(</span><span class="n">base_table</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;_&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="k">month</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;&#34;y&#34;YYYY&#34;m&#34;MM&#39;</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">month_start</span><span class="w"> </span><span class="nb">TIMESTAMP</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;month&#39;</span><span class="p">,</span><span class="w"> </span><span class="k">month</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">BEGIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">EXECUTE</span><span class="w"> </span><span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">        CREATE TABLE &#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">quote_ident</span><span class="p">(</span><span class="n">schema_name</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;.&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">partition</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39; (CHECK (
</span></span></span><span class="line"><span class="cl"><span class="s1">                created_at &gt;= &#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">quote_literal</span><span class="p">(</span><span class="n">month_start</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">            AND created_at &lt; &#39;</span><span class="w">  </span><span class="o">||</span><span class="w"> </span><span class="n">quote_literal</span><span class="p">(</span><span class="n">month_start</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">&#39;1 month&#39;</span><span class="o">::</span><span class="nb">interval</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">        )) INHERITS (&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">quote_ident</span><span class="p">(</span><span class="n">schema_name</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;.&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">base_table</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;)
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">EXECUTE</span><span class="w"> </span><span class="s1">&#39;GRANT SELECT ON &#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">quote_ident</span><span class="p">(</span><span class="n">schema_name</span><span class="p">)</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;.&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">partition</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;  TO dude;&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">END</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$</span><span class="n">_</span><span class="err">$</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Lots of concatenation and use of <code>quote_ident()</code> to get things just right. I
don’t know about you, but I always found this sort of thing quite difficult to
read. But <code>format()</code> allows use to eliminate most of the operators and function
calls. Check it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plpgsql" data-lang="plpgsql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="k">REPLACE</span><span class="w"> </span><span class="k">FUNCTION</span><span class="w"> </span><span class="n">make_month_partition</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">base_table</span><span class="w">   </span><span class="nb">TEXT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">schema_name</span><span class="w">  </span><span class="nb">TEXT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">month</span><span class="w">        </span><span class="nb">TIMESTAMP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">RETURNS</span><span class="w"> </span><span class="nb">VOID</span><span class="w"> </span><span class="k">LANGUAGE</span><span class="w"> </span><span class="n">plpgsql</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">$</span><span class="n">_</span><span class="err">$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DECLARE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">partition</span><span class="w"> </span><span class="nb">TEXT</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">base_table</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="s1">&#39;_&#39;</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">to_char</span><span class="p">(</span><span class="k">month</span><span class="p">,</span><span class="w"> </span><span class="s1">&#39;&#34;y&#34;YYYY&#34;m&#34;MM&#39;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">month_start</span><span class="w"> </span><span class="nb">TIMESTAMP</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="n">date_trunc</span><span class="p">(</span><span class="s1">&#39;month&#39;</span><span class="p">,</span><span class="w"> </span><span class="k">month</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">BEGIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">EXECUTE</span><span class="w"> </span><span class="n">format</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="s1">&#39;CREATE TABLE %I.%I (
</span></span></span><span class="line"><span class="cl"><span class="s1">            CHECK (created_at &gt;= %L AND created_at &lt; %L)
</span></span></span><span class="line"><span class="cl"><span class="s1">        ) INHERITS (%I.%I)&#39;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">schema_name</span><span class="p">,</span><span class="w"> </span><span class="k">partition</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">month_start</span><span class="p">,</span><span class="w"> </span><span class="n">month_start</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">&#39;1 month&#39;</span><span class="o">::</span><span class="nb">interval</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">schema_name</span><span class="p">,</span><span class="w"> </span><span class="n">base_table</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">EXECUTE</span><span class="w"> </span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;GRANT SELECT ON %I.%I TO dude&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">schema_name</span><span class="p">,</span><span class="w"> </span><span class="k">partition</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">END</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$</span><span class="n">_</span><span class="err">$</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>I don’t know about you, but I find that a <em>lot</em> easier to read. which means
it’ll be easier to maintain. So if you do much dynamic query generation inside
the database, give <code>format()</code> a try, I think you’ll find it a winner.</p>
<p><em><strong>Update 2012-11-16:</strong> Okay, so I somehow failed to notice that <code>format()</code> was
actually introduced in 9.1 and <a href="http://www.depesz.com/2010/11/21/waiting-for-9-1-format/">covered by depesz</a>. D’oh! Well, hopefully my
little post will help to get the word out more, at least. Thanks to my
commenters.</em></p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/format.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/sql/">SQL</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2012/11/mock-postgres-serialization-failures/</id>
		<title type="html"><![CDATA[Mocking Serialization Failures]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2012/11/mock-postgres-serialization-failures/"/>
		<updated>2012-11-02T22:16:28Z</updated>
		<published>2012-11-02T22:16:28Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="sql" label="SQL"/>
		<summary type="html"><![CDATA[I’ve been hacking on the forthcoming Bucardo 5 code base the last couple weeks, as we’re going to start using it pretty extensively at work, and it needed a little love to get it closer to release. The biggest issue I fixed was the handling of serialization failures.
When copying deltas from one database to another, Bucardo sets the transaction isolation to “Serializable”. As of PostgreSQL 9.1, this is true serializable isolation.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>I’ve been hacking on the forthcoming <a href="http://bucardo.org/wiki/Bucardo">Bucardo</a> 5 code base the last couple
weeks, as we’re going to start using it pretty extensively at <a href="https://iovation.com/">work</a>, and it
needed a little love to get it closer to release. The biggest issue I fixed was
the handling of serialization failures.</p>
<p>When copying deltas from one database to another, Bucardo sets the <a href="https://www.postgresql.org/docs/current/transaction-iso.html">transaction
isolation</a> to “Serializable”. As of PostgreSQL 9.1, this is true serializable
isolation. However, there were no tests for it in Bucardo. And since pervious
versions of PostgreSQL had poorer isolation (retained in 9.1 as “Repeatable
Read”), I don’t think anyone really noticed it much. As I’m doing all my testing
against 9.2, I was getting the serialization failures about half the time I ran
the test suite. It took me a good week to chase down the issue. Once I did, I
posted to the Bucardo mail list pointing out that Bucardo was <em>not</em> attempting
to run a transaction again after failure, and at any rate, the model for how it
thought to do so was a little wonky: it let the replicating process die, on the
assumption that a new process would pick up where it left off. It did not.</p>
<p>Bucardo maintainer Greg Sabino Mullane <a href="https://bucardo.org/pipermail/bucardo-general/2012-October/001616.html">proposed</a> that we let the replicating
process try again on its own. So I went and made it do that. And then the tests
started passing every time. Yay!</p>
<p>Returning to the point of this post, I felt that there ought to be tests for
serialization failures in the Bucardo test suite, so that we can ensure that
this continues to work. My first thought was to use PL/pgSQL in 8.4 and higher
to mock a serialization failure. Observe:</p>
<pre><code>david=# \set VERBOSITY verbose
david=# DO $$BEGIN RAISE EXCEPTION 'Serialization error'
       USING ERRCODE = 'serialization_failure'; END $$;
ERROR:  40001: Serialization error
LOCATION:  exec_stmt_raise, pl_exec.c:2840
</code></pre>
<p>Cool, right? Well, the trick is to get this to run on the replication target,
but only once. When Bucardo retries, we want it to succeed, thus properly
demonstrating the COPY/SERIALIZATION FAIL/ROLLBACK/COPY/SUCCESS pattern.
Furthermore, when it copies deltas to a target, Bucardo disables all triggers
and rules. So how to get something trigger-like to run on a target table and
throw the serialization error?</p>
<p>Studying the Bucardo source code, I discovered that Bucardo itself does not
disable triggers and rules. Rather, it sets the <code>session_replica_role</code> GUC to
“replica”. This causes PostgreSQL to disable the triggers and rules — except for
those that have been set to <code>ENABLE REPLICA</code>. The PostgreSQL <a href="https://www.postgresql.org/docs/9.2/static/sql-altertable.html"><code>ALTER TABLE</code>
docs</a>:</p>
<blockquote>
<p>The trigger firing mechanism is also affected by the configuration variable
session_replication_role. Simply enabled triggers will fire when the
replication role is “origin” (the default) or “local”. Triggers configured as
ENABLE REPLICA will only fire if the session is in “replica” mode, and
triggers configured as ENABLE ALWAYS will fire regardless of the current
replication mode.</p>
</blockquote>
<p>Well how cool is that? So all I needed to do was plug in a replica trigger and
have it throw an exception once but not twice. Via email, Kevin Grittner pointed
out that a sequence might work, and indeed it does. Because sequence values are
non-transactional, sequences return different values every time they’re access.</p>
<p>Here’s what I came up with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plpgsql" data-lang="plpgsql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">SEQUENCE</span><span class="w"> </span><span class="n">serial_seq</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="k">REPLACE</span><span class="w"> </span><span class="k">FUNCTION</span><span class="w"> </span><span class="n">mock_serial_fail</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">RETURNS</span><span class="w"> </span><span class="k">trigger</span><span class="w"> </span><span class="k">LANGUAGE</span><span class="w"> </span><span class="n">plpgsql</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">$</span><span class="n">_</span><span class="err">$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">BEGIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">IF</span><span class="w"> </span><span class="n">nextval</span><span class="p">(</span><span class="s1">&#39;serial_seq&#39;</span><span class="p">)</span><span class="w"> </span><span class="o">%</span><span class="w"> </span><span class="mf">2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">0</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="k">RETURN</span><span class="w"> </span><span class="n">NEW</span><span class="p">;</span><span class="w"> </span><span class="k">END</span><span class="w"> </span><span class="k">IF</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">RAISE</span><span class="w"> </span><span class="k">EXCEPTION</span><span class="w"> </span><span class="s1">&#39;Serialization error&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">USING</span><span class="w"> </span><span class="n">ERRCODE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;serialization_failure&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">END</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$</span><span class="n">_</span><span class="err">$</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TRIGGER</span><span class="w"> </span><span class="n">mock_serial_fail</span><span class="w"> </span><span class="k">AFTER</span><span class="w"> </span><span class="k">INSERT</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">bucardo_test2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FOR</span><span class="w"> </span><span class="k">EACH</span><span class="w"> </span><span class="k">ROW</span><span class="w"> </span><span class="k">EXECUTE</span><span class="w"> </span><span class="k">PROCEDURE</span><span class="w"> </span><span class="n">mock_serial_fail</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">bucardo_test2</span><span class="w"> </span><span class="k">ENABLE</span><span class="w"> </span><span class="k">REPLICA</span><span class="w"> </span><span class="k">TRIGGER</span><span class="w"> </span><span class="n">mock_serial_fail</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>The first <code>INSERT</code> (or, in Bucardo’s case, <code>COPY</code>) to <code>bucardo_test2</code> will die
with the serialization error. The second <code>INSERT</code> (or <code>COPY</code>) succeeds. This
worked great, and I was able to write test in a few hours and <a href="https://github.com/bucardo/bucardo/commit/3931056f15f3f6df9b089fd439c14ec38b66d841">get them
committed</a>. And now we can be reasonably sure that Bucardo will always properly
handle serialization failures.</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/mock-serialization-failures.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/sql/">SQL</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2012/04/postgres-use-timestamptz/</id>
		<title type="html"><![CDATA[Always Use TIMESTAMP WITH TIME ZONE]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2012/04/postgres-use-timestamptz/"/>
		<updated>2022-05-22T21:36:58Z</updated>
		<published>2012-04-16T22:08:26Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="time-zones" label="Time Zones"/>
		<category scheme="https://justatheory.com/tags" term="databases" label="Databases"/>
		<category scheme="https://justatheory.com/tags" term="best-practices" label="Best Practices"/>
		<category scheme="https://justatheory.com/tags" term="recommendations" label="Recommendations"/>
		<summary type="html"><![CDATA[My recommendations for sane time zone management in PostgreSQL:
Set timezone = &lsquo;UTC&rsquo; in postgresq.conf. This makes UTC the default time zone for all connections. Use timestamp with time zone (aka timestamptz) and time with time zone (aka timetz). They store values as UTC, but convert them on selection to whatever your time zone setting is. Avoid timestamp without time zone (aka timestamp) and time without time zone (aka time). These columns do not know the time zone of a value, so different apps can insert values in different zones no one would ever know.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>My recommendations for sane time zone management in PostgreSQL:</p>
<ul>
<li>Set <code>timezone = 'UTC'</code> in <code>postgresq.conf</code>. This makes UTC the default time
zone for all connections.</li>
<li>Use <a href="https://www.postgresql.org/docs/current/datatype-datetime.html"><code>timestamp with time zone</code> (aka <code>timestamptz</code>) and
<code>time with time zone</code> (aka <code>timetz</code>)</a>. They store values as UTC, but convert
them on selection to whatever your time zone setting is.</li>
<li>Avoid <code>timestamp without time zone</code> (aka <code>timestamp</code>) and
<code>time without time zone</code> (aka <code>time</code>). These columns do not know the time
zone of a value, so different apps can insert values in different zones no
one would ever know.</li>
<li>Always specify a time zone when inserting into a <code>timestamptz</code> or <code>timetz</code>
column. Unless the zone is UTC. But even then, append a &ldquo;Z&rdquo; to your value:
it&rsquo;s more explicit, and will keep you sane.</li>
<li>If you need to get <code>timestamptz</code> or <code>timetz</code> values in a zone other than
UTC, use the <a href="https://www.postgresql.org/docs/current/functions-datetime.html#FUNCTIONS-DATETIME-ZONECONVERT"><code>AT TIME ZONE</code> expression in your query</a>. But be aware that
the returned value will be a <code>timestamp</code> or <code>time</code> value, with no more time
zone. Good for reporting and queries, bad for storage.</li>
<li>If your app <em>always</em> needs data in some other time zone, have it
<a href="https://www.postgresql.org/docs/9.1/static/runtime-config-client.html#GUC-TIMEZONE"><code>SET timezone = 'UTC'</code></a> on connection. All values then retrieved from the
database will be in the configured time zone. The app should still include
the time zone in values sent to the database.</li>
</ul>
<p>The one exception to the rule preferring <code>timestamptz</code> and <code>timetz</code> is a special
case: partitioning. When partitioning data on timestamps, you <em>must not</em> use
<code>timestamptz</code>. Why? Because almost no expression involving <code>timestamptz</code>
comparison is immutable. Use one in a <code>WHERE</code> clause, and <a href="https://www.postgresql.org/docs/9.1/static/ddl-partitioning.html#DDL-PARTITIONING-CONSTRAINT-EXCLUSION">constraint exclusion</a>
may well <a href="https://web.archive.org/web/20160321063108/http://comments.gmane.org/gmane.comp.db.postgresql.performance/29681">be ignored</a> and all partitions scanned. This is usually something you
want to avoid.</p>
<p>So in <strong>this one case</strong> and <strong>only in this one case</strong>, use a
<code>timestamp without time zone</code> column, but <em>always insert data in UTC</em>. This will
keep things consistent with the <code>timestamptz</code> columns you have everywhere else
in your database. Unless your app changes the value of the <a href="https://www.postgresql.org/docs/9.1/static/runtime-config-client.html#GUC-TIMEZONE"><code>timestamp</code>
GUC</a> when it connects, it can just assume that
everything is always UTC, and should always send updates as UTC.</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/use-timestamptz.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/time-zones/">Time Zones</a></li>
                <li><a href="https://justatheory.com/tags/databases/">Databases</a></li>
                <li><a href="https://justatheory.com/tags/best-practices/">Best Practices</a></li>
                <li><a href="https://justatheory.com/tags/recommendations/">Recommendations</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2011/11/iovationeering/</id>
		<title type="html"><![CDATA[iovationeering]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2011/11/iovationeering/"/>
		<updated>2022-06-12T03:26:54Z</updated>
		<published>2011-11-30T05:34:11Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="personal" label="Personal"/>
		<category scheme="https://justatheory.com/tags" term="work" label="Work"/>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="data-architecture" label="Data Architecture"/>
		<category scheme="https://justatheory.com/tags" term="bricolage" label="Bricolage"/>
		<category scheme="https://justatheory.com/tags" term="pgxn" label="PGXN"/>
		<category scheme="https://justatheory.com/tags" term="kineticode" label="Kineticode"/>
		<category scheme="https://justatheory.com/tags" term="postgresql-experts" label="PostgreSQL Experts"/>
		<summary type="html"><![CDATA[Since June, as part of my work for PGX, I’ve been doing on-site full-time consulting for iovation here in Portland. iovation is in the business of deterring online fraud via device identification and reputation. Given the nature of that business, a whole lot of data arrives every day, and I’ve been developing PostgreSQL-based solutions to help get a handle on it. The work has been truly engaging, and a whole hell of a lot of fun.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>Since June, as part of my work for <a href="https://pgexperts.com/">PGX</a>, I’ve been doing on-site full-time
consulting for <a href="https://iovation.com/">iovation</a> here in Portland. iovation is in the business of
deterring online fraud via device identification and reputation. Given the
nature of that business, a whole lot of data arrives every day, and I’ve been
developing PostgreSQL-based solutions to help get a handle on it. The work has
been truly engaging, and a whole hell of a lot of fun. And there are some really
great, very smart people at iovation, whom I very much like and respect.</p>


	<figure class="right" title="iovation"><a href="https://iovation.com/">
			<img src="https://justatheory.com/2011/11/iovationeering/iovation.jpg" alt="iovation" />
		</a>
	</figure>

<p>So much so, in fact, that I decided to accept their offer of a full time
position as “Senior Data Architect.” I started on Monday.</p>
<p>I know, crazy, right? They’ve actually been talking me up about it for a long
time. In our initial contact close to two years ago, as I sought to land them as
a PGX client, they told me they wanted to hire someone, and was I interested. I
said “no.” I said “no” through four months of contracting this summer and fall,
until one day last month I said to myself, “wait, <em>why</em> don’t I want this job?”
I had been on automatic, habitually insisting I wasn’t interested in a W2
position. And with good reason. Aside from 15 months as <a href="https://justatheory.com/2008/01/im-back/">CTO at values of n</a>
(during which time I worked relatively independently anyway), I’ve been an
independent consultant since I founded Kineticode in November of 2001. Yeah.
<em>Ten Years.</em></p>
<p>Don’t get me wrong, those ten years have been <em>great!</em> Not only have I been able
to support myself doing the things I love—and learned a <em>ton</em> in the process—but
I’ve managed to write a <a href="https://github.com/theory?tab=repositories">lot</a> <a href="https://github.com/bricoleurs?tab=repositories">of</a> <a href="https://github.com/pgxn?tab=repositories">great</a> <a href="https://github.com/pgexperts?tab=repositories">code</a>. Hell, I will be
continuing as an associate with <a href="https://pgexperts.com/">PGX</a>, though with greatly reduced
responsibilities. And someday I may go indy again. But in the meantime, the
challenges, opportunities, and culture at iovation are just too good to pass up.
I’m loving the work I’m doing there, and expect to learn a lot over the next few
years.</p>


	<figure class="left" title="Kineticode"><a href="https://kineticode.com/">
			<img src="https://justatheory.com/2011/11/iovationeering/kineticode.gif" alt="Kineticode" />
		</a>
	</figure>

<p>So what, you might ask, does this mean for Kineticode, the company I founded to
offer support, consulting, and training services for <a href="http://bricolagecms.org/">Bricolage CMS</a>? The truth
is that Kineticode has only a few technical support customers left; virtually
all of my work for the last two years has been through PGX. So I’ve decided to
shut Kineticode down. I’m shifting the Bricolage tech support offerings <a href="https://web.archive.org/web/20120113014335/http://www.pgexperts.com/bricolage.html" title="Bricolage Technical Support from PGX">over to
PGX</a> and having Kineticode’s customers move there as their contacts come up for
renewal. They can expect the same great service as always. Better even, as there
are 10 associates in PGX, and, lately, only me at Kineticode. Since Kineticode
itself is losing its Raison d’être, it’s going away.</p>


	<figure class="right" title="PGX"><a href="https://pgexperts.com/">
			<img src="https://justatheory.com/2011/11/iovationeering/pgx.png" alt="PGX" />
		</a>
	</figure>

<p>I intend to remain involved in the various open-source projects I work on. I
still function as the benevolent dictator of <a href="http://bricolagecms.org/">Bricolage CMS</a>, though other folks
have stepped up their involvement quite a lot in the last few years. And I
expect to keep improving [PGXN] and <a href="http://www.designsceneapp.com/">DesignScene</a> as time allows (I’ve actually
been putting some effort into both in the last few weeks; watch for <a href="https://blog.pgxn.org/" title="PGXN Blog">PGXN</a>
and <a href="https://blog.lunar-theory.com/" title="Lunar/Theory Blog">Lunar/Theory</a> announcements in the coming weeks and months!). And, in fact,
I expect that a fair amount of the work I do at iovation will lead to blog
posts, conference presentations, and more open-source code.</p>
<p>This is going to be a blast. Interested in a front-row seat? <a href="https://twitter.com/theory/">Follow me on
Twitter</a>.</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/autobiographical/iovationeering.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/personal/">Personal</a></li>
                <li><a href="https://justatheory.com/tags/work/">Work</a></li>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/data-architecture/">Data Architecture</a></li>
                <li><a href="https://justatheory.com/tags/bricolage/">Bricolage</a></li>
                <li><a href="https://justatheory.com/tags/pgxn/">PGXN</a></li>
                <li><a href="https://justatheory.com/tags/kineticode/">Kineticode</a></li>
                <li><a href="https://justatheory.com/tags/postgresql-experts/">PostgreSQL Experts</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2011/09/dbix-connector-and-ssi/</id>
		<title type="html"><![CDATA[DBIx::Connector and Serializable Snapshot Isolation]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2011/09/dbix-connector-and-ssi/"/>
		<updated>2011-09-26T19:09:48Z</updated>
		<published>2011-09-26T19:09:48Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="databases" label="Databases"/>
		<category scheme="https://justatheory.com/tags" term="ssi" label="SSI"/>
		<category scheme="https://justatheory.com/tags" term="serializable-isolation-level" label="Serializable Isolation Level"/>
		<category scheme="https://justatheory.com/tags" term="dbi" label="DBI"/>
		<category scheme="https://justatheory.com/tags" term="dbixconnector" label="DBIx::Connector"/>
		<category scheme="https://justatheory.com/tags" term="perl" label="Perl"/>
		<summary type="html"><![CDATA[I was at Postgres Open week before last. This was a great conference, very welcoming atmosphere and lots of great talks. One of the more significant, for me, was the session on serializable transactions by Kevin Grittner, who developed SSI for PostgreSQL 9.1. I hadn’t paid much attention to this feature before now, but it became clear to me, during the talk, that it’s time.
So what is SSI? Well, serializable transactions are almost certainly how you think of transactions already.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>I was at <a href="http://postgresopen.org/">Postgres Open</a> week before last. This was a great conference, very
welcoming atmosphere and lots of great talks. One of the more significant, for
me, was the <a href="http://postgresopen.org/2011/schedule/presentations/61/">session on serializable transactions</a> by Kevin Grittner, who
developed <a href="http://wiki.postgresql.org/wiki/SSI">SSI</a> for PostgreSQL 9.1. I hadn’t paid much attention to this feature
before now, but it became clear to me, during the talk, that it’s time.</p>
<p>So what is SSI? Well, serializable transactions are almost certainly how you
think of transactions already. Here’s how Kevin describes them:</p>
<blockquote>
<p>True serializable transactions can simplify software development. Because any
transaction which will do the right thing if it is the only transaction
running will also do the right thing in any mix of serializable transactions,
the programmer need not understand and guard against all possible conflicts.
If this feature is used consistently, there is no need to ever take an
explicit lock or SELECT FOR UPDATE/SHARE.</p>
</blockquote>
<p>This is, in fact, generally how I’ve thought about transactions. But I’ve
certainly run into cases where it wasn’t true. Back in 2006, I wrote an article
on <a href="http://onlamp.com/pub/a/onlamp/2006/06/29/many-to-many-with-plpgsql.html">managing many-to-many relationships with PL/pgSQL</a> which demonstrated a race
condition one might commonly find when using an ORM. The solution I offered was
to <a href="http://oreilly.com/pub/a/databases/2006/09/07/plpgsql-batch-updates.html?page=5" title="Batch Updates with PL/pgSQL (p.5)">always use</a> a PL/pgSQL function that does the work, and that function
executes a <code>SELECT...FOR UPDATE</code> statement to overcome the race condition. This
creates a lock that forces conflicting transactions to be performed serially.</p>
<p>Naturally, this is something one would rather not have to think about. Hence
<a href="http://wiki.postgresql.org/wiki/SSI">SSI</a>. When you identify a transaction as serializable, it will be executed in a
truly serializable fashion. So I could actually do away with the
<code>SELECT...FOR UPDATE</code> workaround — not to mention any other race conditions I
might have missed — simply by telling PostgreSQL to enforce transaction
isolation. This essentially eliminates the possibility of unexpected
side-effects.</p>
<p>This comes at a cost, however. Not in terms of performance so much, since the
<a href="http://wiki.postgresql.org/wiki/Serializable">SSI implementation</a> uses some fancy, recently-developed algorithms to keep
things efficient. (Kevin tells me via IRC: “Usually the rollback and retry work
is the bulk of the additional cost in an SSI load, in my testing so far. A
synthetic load to really stress the LW locking, with a fully-cached database
doing short read-only transactions will have no serialization failures, but can
run up some CPU time in LW lock contention.”) No, the cost is actually in
increased chance of transaction rollback. Because SSI will catch more
transaction conflicts than the traditional “read committed” isolation level,
frameworks that expect to work with SSI need to be prepared to handle more
transaction failures. From <a href="https://www.postgresql.org/docs/current/transaction-iso.html#XACT-SERIALIZABLE">the fine manual</a>:</p>
<blockquote>
<p>The Serializable isolation level provides the strictest transaction isolation.
This level emulates serial transaction execution, as if transactions had been
executed one after another, serially, rather than concurrently. However, like
the Repeatable Read level, applications using this level must be prepared to
retry transactions due to serialization failures.</p>
</blockquote>
<p>And that brings me to <a href="https://metacpan.org/module/DBIx::Connector">DBIx::Connector</a>, my Perl module for safe connection and
transaction management. It currently has no such retry smarts built into it. The
feature closest to that is the “fixup” <a href="https://metacpan.org/module/DBIx::Connector#Connection-Modes">connection mode</a>, wherein if a execution
of a code block fails due to a connection failure, DBIx::Connector will
re-connect to the database and execute the code reference again.</p>
<p>I think I should extend DBIx::Connector to take isolation failures and deadlocks
into account. That is, <code>fixup</code> mode would retry a code block not only on
connection failure but also on serialization failure (SQLSTATE 40001) and
deadlocks (SQLSTATE 40P01). I would also add a new attribute, <code>retries</code>, to
specify the number of times to retry such execution, with a default of three
(which likely will cover the vast majority of cases). This has actually been an
oft-requested feature, and I’m glad to have a new reason to add it.</p>
<p>There are a few design issues to overcome, however:</p>
<ul>
<li>Fixup mode is supported not just by <code>txn()</code>, which scopes the execution of a
code reference to a single transaction, but also <code>run()</code>, which does no
transaction handling. Should the new retry support be added there, too? I
could see it either way (a single SQL statement executed in <code>run()</code> is
implicitly transaction-scoped).</li>
<li>Fixup mode is also supported by <code>svp()</code>, which scopes the execution of a
code reference to a savepoint (a.k.a. a subtransaction). Should the rollback
and retry be supported there, too, or would the whole transaction have to be
retried? I’m thinking the latter, since that’s currently the behavior for
connection failures.</li>
<li>Given these issues, will it make more sense to perhaps create a new mode?
Maybe it would be supported only by <code>txn()</code>.</li>
</ul>
<p>This is do-able, will likely just take some experimentation to figure it out and
settle on the appropriate API. I’ll need to find the tuits for that soon.</p>
<p>In the meantime, given currently <a href="https://justatheory.com/2011/05/dbix-connector-catch/">in-progress changes</a>, I’ve just released a new
version of DBIx::Connector with a single change: All uses of the deprecated
<code>catch</code> syntax now throw warnings. The previous version threw warnings only the
first time the syntax was used in a particular context, to keep error logs from
getting clogged up. Hopefully most folks have changed their code in the two
months since the previous release and switched to <a href="https://metacpan.org/module/Try::Tiny">Try::Tiny</a> or some other
model for exception handling. The <code>catch</code> syntax will be completely removed in
the next release of DBIx::Connector, likely around the end of the year.
Hopefully the new SSI-aware retry functionality will have been integrated by
then, too.</p>
<p>In a future post I’ll likely chew over whether or not to add an API to set the
transaction isolation level within a call to <code>txn()</code> and friends.</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/dbix-connector-and-ssi.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/databases/">Databases</a></li>
                <li><a href="https://justatheory.com/tags/ssi/">SSI</a></li>
                <li><a href="https://justatheory.com/tags/serializable-isolation-level/">Serializable Isolation Level</a></li>
                <li><a href="https://justatheory.com/tags/dbi/">DBI</a></li>
                <li><a href="https://justatheory.com/tags/dbixconnector/">DBIx::Connector</a></li>
                <li><a href="https://justatheory.com/tags/perl/">Perl</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2010/11/postgres-fk-locks-project/</id>
		<title type="html"><![CDATA[Fixing Foreign Key Deadlocks in PostgreSQL]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2010/11/postgres-fk-locks-project/"/>
		<updated>2010-11-24T22:30:53Z</updated>
		<published>2010-11-24T22:30:53Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="sql" label="SQL"/>
		<category scheme="https://justatheory.com/tags" term="deadlocks" label="Deadlocks"/>
		<category scheme="https://justatheory.com/tags" term="fossexperts" label="FOSSExperts"/>
		<category scheme="https://justatheory.com/tags" term="postgresql-experts" label="PostgreSQL Experts"/>
		<category scheme="https://justatheory.com/tags" term="command-prompt" label="Command Prompt"/>
		<category scheme="https://justatheory.com/tags" term="glue-finance" label="Glue Finance"/>
		<category scheme="https://justatheory.com/tags" term="activerecord" label="ActiveRecord"/>
		<summary type="html"><![CDATA[PGX had a client come to us recently with a rather nasty deadlock issue. It took far longer than we would have liked to figure out the issue, and once we did, they were able to clear it up by dropping an unnecessary index. Still, it shouldn’t have been happening to begin with. Joel Jacobson admirably explained the issue on pgsql-hackers (and don’t miss the screencast).
Some might consider it a bug in PostgreSQL, but the truth is that PostgreSQL can obtain stronger than necessary locks.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p><a href="http://pgexperts.com/">PGX</a> had <a href="http://gluefinance.com/">a client</a> come to us recently with a rather nasty deadlock issue. It
took far longer than we would have liked to figure out the issue, and once we
did, they were able to clear it up by dropping an unnecessary index. Still, it
shouldn’t have been happening to begin with. Joel Jacobson admirably <a href="http://www.mail-archive.com/pgsql-hackers@postgresql.org/msg157869.html">explained
the issue</a> on pgsql-hackers (and don’t miss <a href="http://www.screencast.com/users/joeljacobson/folders/Jing/media/42c31028-80fa-45fe-b21f-9039110c3555">the screencast</a>).</p>
<p>Some might consider it a bug in PostgreSQL, but the truth is that PostgreSQL can
obtain stronger than necessary locks. Such locks cause some operations to block
unnecessarily and some other operations to deadlock, especially when foreign
keys are used in a busy database. And really, who doesn’t use FKs in their busy
database?</p>
<p>Fortunately, Simon Riggs <a href="http://www.mail-archive.com/pgsql-hackers@postgresql.org/msg158205.html">proposed a solution</a>. And it’s a good one. So good
that <a href="http://pgexperts.com/">PGX</a> is partnering with <a href="http://gluefinance.com/">Glue Finance</a> and <a href="http://www.commandprompt.com/">Command Prompt</a> as
founding sponsors on a new <a href="https://www.fossexperts.com/content/foreign-key-locks">FOSSExperts project</a> to actually get it done.
<a href="http://www.commandprompt.com/blogs/alvaro_herrera/">Álvaro Herrera</a> is doing the actual hacking on the project, and has already
blogged about it <a href="http://www.commandprompt.com/blogs/alvaro_herrera/2010/11/fixing_foreign_key_deadlocks/">here</a> and <a href="http://www.commandprompt.com/blogs/alvaro_herrera/2010/11/fixing_foreign_key_deadlocks_part_2/">here</a>.</p>
<p>If you use foreign key constraints (and you should!) and you have a high
transaction load on your database (or expect to soon!), this matters to you. In
fact, if you use ActiveRecord with Rails, there might even be a special place in
your heart for this issue, <a href="http://mina.naguib.ca/blog/2010/11/22/postgresql-foreign-key-deadlocks.html">says Mina Naguib</a>. We’d <em>really</em> like to get this
done in time for the PostgreSQL 9.1 release. But it will only happen if the
project can be funded.</p>
<p>Yes, that’s right, as with <a href="http://pgxn.org/">PGXN</a>, this is community project for which we’re
raising funds from the community to get it done. I think that more and more work
could be done this way, as various interested parties contribute small amounts
to collectively fund improvements to the benefit of us all. So can you help out?
Hit the <a href="https://www.fossexperts.com/content/foreign-key-locks">FOSSExperts project page</a> for all the project
details, and to <a href="https://www.fossexperts.com/content/foreign-key-locks-0">make your contribution</a>.</p>
<p>Help us help the community to make PostgreSQL better than ever!</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/fk-locks-project.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/sql/">SQL</a></li>
                <li><a href="https://justatheory.com/tags/deadlocks/">Deadlocks</a></li>
                <li><a href="https://justatheory.com/tags/fossexperts/">FOSSExperts</a></li>
                <li><a href="https://justatheory.com/tags/postgresql-experts/">PostgreSQL Experts</a></li>
                <li><a href="https://justatheory.com/tags/command-prompt/">Command Prompt</a></li>
                <li><a href="https://justatheory.com/tags/glue-finance/">Glue Finance</a></li>
                <li><a href="https://justatheory.com/tags/activerecord/">ActiveRecord</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2010/08/postgres-key-value-pairs/</id>
		<title type="html"><![CDATA[Managing Key/Value Pairs in PostgreSQL]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2010/08/postgres-key-value-pairs/"/>
		<updated>2010-08-09T13:00:00Z</updated>
		<published>2010-08-09T13:00:00Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="nosql" label="NoSQL"/>
		<category scheme="https://justatheory.com/tags" term="sql" label="SQL"/>
		<summary type="html"><![CDATA[Let’s say that you’ve been following the latest research in key/value data storage and are interested in managing such data in a PostgreSQL database. You want to have functions to store and retrieve pairs, but there is no natural way to represent pairs in SQL. Many languages have hashes or or data dictionaries to fulfill this role, and you can pass them to functional interfaces. SQL’s got nothin’. In PostgreSQL, have two options: use nested arrays (simple, fast) or use a custom composite data type (sugary, legible).]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>Let&rsquo;s say that you&rsquo;ve been following the <a href="http://it.toolbox.com/blogs/database-soup/runningwithscissorsdb-39879" title="RunningWithScissorsDB">latest research</a> in key/value data
storage and are interested in managing such data in a PostgreSQL database. You
want to have functions to store and retrieve pairs, but there is no natural way
to represent pairs in SQL. Many languages have hashes or or data dictionaries to
fulfill this role, and you can pass them to functional interfaces. SQL&rsquo;s got
nothin’. In PostgreSQL, have two options: use nested arrays (simple, fast) or
use a custom composite data type (sugary, legible).</p>
<p>Let&rsquo;s assume you have this table for storing your pairs:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">TEMPORARY</span> <span class="k">TABLE</span> <span class="n">kvstore</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">key</span>        <span class="nb">TEXT</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">value</span>      <span class="nb">TEXT</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">expires_at</span> <span class="nb">TIMESTAMPTZ</span> <span class="k">DEFAULT</span> <span class="n">NOW</span><span class="p">()</span> <span class="o">+</span> <span class="s1">&#39;12 hours&#39;</span><span class="o">::</span><span class="nb">interval</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></div><p>To store pairs, you can use nested arrays like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"> <span class="k">SELECT</span> <span class="n">store</span><span class="p">(</span><span class="k">ARRAY</span><span class="p">[</span> <span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="s1">&#39;yow&#39;</span><span class="p">]</span> <span class="p">]);</span>
</span></span></code></pre></div><p>Not too bad, and since SQL arrays are a core feature of PostgreSQL, there&rsquo;s
nothing special to do. Here&rsquo;s the <code>store()</code> function:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plpgsql" data-lang="plpgsql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="k">REPLACE</span><span class="w"> </span><span class="k">FUNCTION</span><span class="w"> </span><span class="n">store</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">params</span><span class="w"> </span><span class="nb">text</span><span class="p">[][]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">RETURNS</span><span class="w"> </span><span class="nb">VOID</span><span class="w"> </span><span class="k">LANGUAGE</span><span class="w"> </span><span class="n">plpgsql</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">$$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">BEGIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FOR</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="mf">1</span><span class="w"> </span><span class="mf">..</span><span class="w"> </span><span class="n">array_upper</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">)</span><span class="w"> </span><span class="k">LOOP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">UPDATE</span><span class="w"> </span><span class="n">kvstore</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">SET</span><span class="w"> </span><span class="k">value</span><span class="w">      </span><span class="o">=</span><span class="w"> </span><span class="n">params</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mf">2</span><span class="p">],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="n">expires_at</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">NOW</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">&#39;12 hours&#39;</span><span class="o">::</span><span class="nb">interval</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">WHERE</span><span class="w"> </span><span class="k">key</span><span class="w">        </span><span class="o">=</span><span class="w"> </span><span class="n">param</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mf">1</span><span class="p">];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">CONTINUE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="n">FOUND</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">kvstore</span><span class="w"> </span><span class="p">(</span><span class="k">key</span><span class="p">,</span><span class="w"> </span><span class="k">value</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="n">params</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mf">1</span><span class="p">],</span><span class="w"> </span><span class="n">params</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mf">2</span><span class="p">]);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">END</span><span class="w"> </span><span class="k">LOOP</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">END</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>I&rsquo;ve seen worse. The trick is to iterate over each nested array, try an update
for each, and insert when no row is updated. Alas, you have no control over how
many elements a user might include in a nested array. One might call it as:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">store</span><span class="p">(</span><span class="k">ARRAY</span><span class="p">[</span> <span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">]</span> <span class="p">]);</span>
</span></span></code></pre></div><p>Or:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">store</span><span class="p">(</span><span class="k">ARRAY</span><span class="p">[</span> <span class="p">[</span><span class="s1">&#39;foo&#39;</span><span class="p">]</span> <span class="p">]);</span>
</span></span></code></pre></div><p>No errors will be thrown in either case. In the first the &ldquo;baz&rdquo; will be ignored,
and in the second the value will default to <code>NULL</code>. If you really didn&rsquo;t like
these behaviors, you could add some code to throw an exception if
<code>array_upper(params, 2)</code> returns anything other than 2.</p>
<p>Let&rsquo;s look at fetching values for keys. PostgreSQL 8.4 added variadic function
arguments, so it&rsquo;s easy to provide a nice interface for retrieving one or more
values. The obvious one fetches a single value:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plpgsql" data-lang="plpgsql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="k">REPLACE</span><span class="w"> </span><span class="k">FUNCTION</span><span class="w"> </span><span class="n">getval</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nb">text</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">RETURNS</span><span class="w"> </span><span class="nb">TEXT</span><span class="w"> </span><span class="k">LANGUAGE</span><span class="w"> </span><span class="n">SQL</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">$$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SELECT</span><span class="w"> </span><span class="k">value</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">kvstore</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Nice and simple:</p>
<pre><code>SELECT getval('baz');

 getval 
--------'
 yow
</code></pre>
<p>The variadic version looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plpgsql" data-lang="plpgsql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="k">REPLACE</span><span class="w"> </span><span class="k">FUNCTION</span><span class="w"> </span><span class="n">getvals</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">variadic</span><span class="w"> </span><span class="nb">text</span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">RETURNS</span><span class="w"> </span><span class="k">SETOF</span><span class="w"> </span><span class="nb">text</span><span class="w"> </span><span class="k">LANGUAGE</span><span class="w"> </span><span class="n">SQL</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">$$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SELECT</span><span class="w"> </span><span class="k">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">FROM</span><span class="w"> </span><span class="n">kvstore</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">JOIN</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">generate_subscripts</span><span class="p">(</span><span class="nv">$1</span><span class="p">,</span><span class="w"> </span><span class="mf">1</span><span class="p">))</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">f</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">ON</span><span class="w"> </span><span class="n">kvstore</span><span class="mf">.</span><span class="k">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Note the use of <code>ORDER BY i</code> to ensure that the values are returned in the same
order as the keys are passed to the function. So if I&rsquo;ve got the key/value pairs
<code>'foo' =&gt; 'bar'</code> and <code>'baz' =&gt; 'yow'</code>, the output is:</p>
<pre><code>SELECT * FROM getvals('foo', 'baz');

 getvals 
---------
 bar
 yow
</code></pre>
<p>If we want to the rows to have the keys and values together, we can return them
as arrays, like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plpgsql" data-lang="plpgsql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="k">REPLACE</span><span class="w"> </span><span class="k">FUNCTION</span><span class="w"> </span><span class="n">getpairs</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">variadic</span><span class="w"> </span><span class="nb">text</span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">RETURNS</span><span class="w"> </span><span class="k">SETOF</span><span class="w"> </span><span class="nb">text</span><span class="p">[]</span><span class="w"> </span><span class="k">LANGUAGE</span><span class="w"> </span><span class="n">SQL</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">$$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SELECT</span><span class="w"> </span><span class="k">ARRAY</span><span class="p">[</span><span class="k">key</span><span class="p">,</span><span class="w"> </span><span class="k">value</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">FROM</span><span class="w"> </span><span class="n">kvstore</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">JOIN</span><span class="w"> </span><span class="n">unnest</span><span class="p">(</span><span class="nv">$1</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">k</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">kvstore</span><span class="mf">.</span><span class="k">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">k</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Here I&rsquo;m assuming that order isn&rsquo;t important, which means we can use <a href="https://www.postgresql.org/docs/current/functions-array.html" title="PostgreSQL Documentation: Array Functions and Operators"><code>unnest</code></a>
to &ldquo;flatten&rdquo; the array, instead of the slightly more baroque
<a href="https://www.postgresql.org/docs/current/functions-srf.html#FUNCTIONS-SRF-SUBSCRIPTS" title="PostgreSQL Documentation: Set Returning Functions"><code>generate_subscripts()</code></a> with array access. The output:</p>
<pre><code>SELECT * FROM getpairs('foo', 'baz');

  getpairs   
-------------
 {baz,yow}
 {foo,bar}
</code></pre>
<p>Now, this is good as far as it goes, but the use of nested arrays to represent
key/value pairs is not exactly ideal: just looking at the use of a function,
there&rsquo;s nothing to indicate that you&rsquo;re using key/value pairs. What <em>would</em> be
ideal is to use <a href="https://www.postgresql.org/docs/current/sql-expressions.html#SQL-SYNTAX-ROW-CONSTRUCTORS" title="PostgreSQL Documentation: Row Constructors">row constructors</a> to pass arbitrary pairs:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">store</span><span class="p">(</span> <span class="k">ROW</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">),</span> <span class="k">ROW</span><span class="p">(</span><span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="mf">42</span><span class="p">)</span> <span class="p">);</span>
</span></span></code></pre></div><p>Alas, one cannot pass <code>RECORD</code> values (the data type returned by <code>ROW()</code>) to
non-C functions in PostgreSQL.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" rel="footnote">1</a></sup> But if you don&rsquo;t mind your
keys and values always being <code>TEXT</code>, we can get almost all the way there by
creating an &ldquo;ordered pair&rdquo; data type as a <a href="https://www.postgresql.org/docs/current/sql-createtype.html" title="PostgreSQL Documentation: CREATE TYPE">composite type</a> like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">TYPE</span> <span class="n">pair</span> <span class="k">AS</span> <span class="p">(</span> <span class="n">k</span> <span class="nb">text</span><span class="p">,</span> <span class="n">v</span> <span class="nb">text</span> <span class="p">);</span>
</span></span></code></pre></div><p>Then we can create <code>store()</code> with a signature of <code>VARIADIC pair[]</code> and pass in
any number of these suckers:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plpgsql" data-lang="plpgsql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="k">REPLACE</span><span class="w"> </span><span class="k">FUNCTION</span><span class="w"> </span><span class="n">store</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">params</span><span class="w"> </span><span class="k">variadic</span><span class="w"> </span><span class="n">pair</span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">RETURNS</span><span class="w"> </span><span class="nb">VOID</span><span class="w"> </span><span class="k">LANGUAGE</span><span class="w"> </span><span class="n">plpgsql</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">$$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">DECLARE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">param</span><span class="w"> </span><span class="n">pair</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">BEGIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FOR</span><span class="w"> </span><span class="n">param</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">unnest</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="w"> </span><span class="k">LOOP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">UPDATE</span><span class="w"> </span><span class="n">kvstore</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">           </span><span class="k">SET</span><span class="w"> </span><span class="k">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">param</span><span class="mf">.</span><span class="n">v</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">               </span><span class="n">expires_at</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">NOW</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="s1">&#39;12 hours&#39;</span><span class="o">::</span><span class="nb">interval</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="k">WHERE</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">param</span><span class="mf">.</span><span class="n">k</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">CONTINUE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="n">FOUND</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">kvstore</span><span class="w"> </span><span class="p">(</span><span class="k">key</span><span class="p">,</span><span class="w"> </span><span class="k">value</span><span class="p">)</span><span class="w"> </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="n">param</span><span class="mf">.</span><span class="n">k</span><span class="p">,</span><span class="w"> </span><span class="n">param</span><span class="mf">.</span><span class="n">v</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">END</span><span class="w"> </span><span class="k">LOOP</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">END</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Isn&rsquo;t it nice how we can access keys and values as <code>param.k</code> and <code>param.v</code>? Call
the function like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">store</span><span class="p">(</span> <span class="k">ROW</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">)</span><span class="o">::</span><span class="n">pair</span><span class="p">,</span> <span class="k">ROW</span><span class="p">(</span><span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="s1">&#39;yow&#39;</span><span class="p">)</span><span class="o">::</span><span class="n">pair</span> <span class="p">);</span>
</span></span></code></pre></div><p>Of course, that can get a bit old, casting to <code>pair</code> all the time, so let&rsquo;s
create some <code>pair</code> constructor functions to simplify things:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">pair</span><span class="p">(</span><span class="nb">anyelement</span><span class="p">,</span> <span class="nb">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">RETURNS</span> <span class="n">pair</span> <span class="k">LANGUAGE</span> <span class="n">SQL</span> <span class="k">AS</span> <span class="s1">&#39;SELECT ROW($1, $2)::pair&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">pair</span><span class="p">(</span><span class="nb">text</span><span class="p">,</span> <span class="nb">anyelement</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">RETURNS</span> <span class="n">pair</span> <span class="k">LANGUAGE</span> <span class="n">SQL</span> <span class="k">AS</span> <span class="s1">&#39;SELECT ROW($1, $2)::pair&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">pair</span><span class="p">(</span><span class="nb">anyelement</span><span class="p">,</span> <span class="nb">anyelement</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">RETURNS</span> <span class="n">pair</span> <span class="k">LANGUAGE</span> <span class="n">SQL</span> <span class="k">AS</span> <span class="s1">&#39;SELECT ROW($1, $2)::pair&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">pair</span><span class="p">(</span><span class="nb">text</span><span class="p">,</span> <span class="nb">text</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">RETURNS</span> <span class="n">pair</span> <span class="k">LANGUAGE</span> <span class="n">SQL</span> <span class="k">AS</span> <span class="s1">&#39;SELECT ROW($1, $2)::pair;&#39;</span><span class="p">;</span>
</span></span></code></pre></div><p>I&rsquo;ve created four variants here to allow for the most common combinations of
types. So any of the following will work:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">pair</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">pair</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="mf">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">pair</span><span class="p">(</span><span class="mf">12.3</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">pair</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="mf">43</span><span class="p">);</span>
</span></span></code></pre></div><p>Alas, you can&rsquo;t mix any other types, so this will fail:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">pair</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="mf">12.3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ERROR</span><span class="p">:</span>  <span class="k">function</span> <span class="n">pair</span><span class="p">(</span><span class="nb">integer</span><span class="p">,</span> <span class="nb">numeric</span><span class="p">)</span> <span class="n">does</span> <span class="k">not</span> <span class="n">exist</span>
</span></span><span class="line"><span class="cl"><span class="nb">LINE</span> <span class="mf">1</span><span class="p">:</span> <span class="k">SELECT</span> <span class="n">pair</span><span class="p">(</span><span class="mf">1</span><span class="p">,</span> <span class="mf">12.3</span><span class="p">);</span>
</span></span></code></pre></div><p>We could create a whole slew of additional constructors, but since we&rsquo;re using a
key/value store, it&rsquo;s likely that the keys will usually be text anyway. So now
we can call <code>store()</code> like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">store</span><span class="p">(</span> <span class="n">pair</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">),</span> <span class="n">pair</span><span class="p">(</span><span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="s1">&#39;yow&#39;</span><span class="p">)</span> <span class="p">);</span>
</span></span></code></pre></div><p>Better, eh? Hell, we can go all the way and create a nice binary operator to
make it still more sugary. Just map each of the <code>pair</code> functions to the operator
like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">OPERATOR</span> <span class="o">-&gt;</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">LEFTARG</span>   <span class="o">=</span> <span class="nb">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">RIGHTARG</span>  <span class="o">=</span> <span class="nb">anyelement</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">PROCEDURE</span> <span class="o">=</span> <span class="n">pair</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">OPERATOR</span> <span class="o">-&gt;</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">LEFTARG</span>   <span class="o">=</span> <span class="nb">anyelement</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">RIGHTARG</span>  <span class="o">=</span> <span class="nb">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">PROCEDURE</span> <span class="o">=</span> <span class="n">pair</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">OPERATOR</span> <span class="o">-&gt;</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">LEFTARG</span>   <span class="o">=</span> <span class="nb">anyelement</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">RIGHTARG</span>  <span class="o">=</span> <span class="nb">anyelement</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">PROCEDURE</span> <span class="o">=</span> <span class="n">pair</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">OPERATOR</span> <span class="o">-&gt;</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">LEFTARG</span>   <span class="o">=</span> <span class="nb">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">RIGHTARG</span>  <span class="o">=</span> <span class="nb">text</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">PROCEDURE</span> <span class="o">=</span> <span class="n">pair</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></div><p>Looks like a lot of repetition, I know, but checkout the new syntax:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">store</span><span class="p">(</span> <span class="s1">&#39;foo&#39;</span> <span class="o">-&gt;</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span> <span class="o">-&gt;</span> <span class="mf">1</span> <span class="p">);</span>
</span></span></code></pre></div><p>Cute, eh? I chose to use <code>-&gt;</code> because <code>=&gt;</code> is deprecated as an operator in
PostgreSQL 9.0: SQL 2011 reserves that operator for named parameter
assignment.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" rel="footnote">2</a></sup></p>
<p>As a last twist, let&rsquo;s rewrite <code>getpairs()</code> to return <code>pair</code>s instead of arrays:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plpgsql" data-lang="plpgsql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="k">REPLACE</span><span class="w"> </span><span class="k">FUNCTION</span><span class="w"> </span><span class="n">getpairs</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">variadic</span><span class="w"> </span><span class="nb">text</span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">RETURNS</span><span class="w"> </span><span class="k">SETOF</span><span class="w"> </span><span class="n">pair</span><span class="w"> </span><span class="k">LANGUAGE</span><span class="w"> </span><span class="n">SQL</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">$$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SELECT</span><span class="w"> </span><span class="k">key</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="k">value</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">FROM</span><span class="w"> </span><span class="n">kvstore</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">JOIN</span><span class="w"> </span><span class="n">unnest</span><span class="p">(</span><span class="nv">$1</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">k</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="n">kvstore</span><span class="mf">.</span><span class="k">key</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">k</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="err">$$</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>Cute, eh? Its use is just like before, only now the output is more table-like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">getpairs</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">k</span>  <span class="o">|</span>   <span class="n">v</span>   
</span></span><span class="line"><span class="cl"><span class="c1">-----+-------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="n">baz</span> <span class="o">|</span> <span class="n">yow</span>
</span></span><span class="line"><span class="cl"> <span class="n">foo</span> <span class="o">|</span> <span class="n">bar</span>
</span></span></code></pre></div><p>You can also get them back as composites by omitting <code>* FROM</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">getpairs</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">getpairs</span>   
</span></span><span class="line"><span class="cl"><span class="c1">-------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> <span class="p">(</span><span class="n">foo</span><span class="p">,</span><span class="n">bar</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="n">baz</span><span class="p">,</span><span class="n">yow</span><span class="p">)</span>
</span></span></code></pre></div><p>Anyway, just something to consider the next time you need a function that allows
any number of key/value pairs to be passed. It&rsquo;s not perfect, but it&rsquo;s pretty
sweet.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn:1">
<p>In the <a href="http://archives.postgresql.org/pgsql-hackers/2010-08/msg00520.php">recent pgsql-hackers discussion</a> that inspired
this post, Pavel Stehule suggested adding something like <a href="http://download.oracle.com/docs/cd/B19306_01/appdev.102/b14261/collections.htm">Oracle <code>COLLECTIONs</code></a>
to address this shortcoming. I don&rsquo;t know how far this idea will get, but
it sure would be nice to be able to pass objects with varying kinds of
data, rather than be limited to data all of one type (values in an SQL
array must all be of the same type).&#160;<a href="#fnref:1" class="footnote-backref">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>No, you won&rsquo;t be able to use named parameters for this
application because named parameters are inherently non-variadic. That is,
you can only pre-declare so many named parameters: you can&rsquo;t anticipate
every parameter that&rsquo;s likely to be wanted as a key in our key/value store.&#160;<a href="#fnref:2" class="footnote-backref">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/key-value-pairs.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/nosql/">NoSQL</a></li>
                <li><a href="https://justatheory.com/tags/sql/">SQL</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2010/08/pgxn-blog-twitterstream/</id>
		<title type="html"><![CDATA[PGXN Blog and Twitterstream]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2010/08/pgxn-blog-twitterstream/"/>
		<updated>2010-08-04T16:51:39Z</updated>
		<published>2010-08-04T16:51:39Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="pgxn" label="PGXN"/>
		<category scheme="https://justatheory.com/tags" term="just-a-theory" label="Just a Theory"/>
		<summary type="html"><![CDATA[I crated the PGXN Blog yesterday. Tune in there for news and announcements. I’ll also be posting status reports once development gets underway, so that all you fans out there can follow my progress. Once the site is done (or at 1.0 anyway), the blog will be used for announcements, discussion of support issues, etc. So tune in!
Oh, and I created a PGXN Twitterstream, too. You should follow it! New blog posts will be tweeted, and once the site gets going, new uploads will be tweeted, too.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>I crated the <a href="http://blog.pgxn.org/">PGXN Blog</a> yesterday. Tune in there for news and announcements.
I’ll also be posting status reports once development gets underway, so that all
you fans out there can follow my progress. Once the site is done (or at 1.0
anyway), the blog will be used for announcements, discussion of support issues,
etc. So tune in!</p>
<p>Oh, and I created a <a href="https://twitter.com/pgxn/">PGXN Twitterstream</a>, too. You should follow it! New blog
posts will be tweeted, and once the site gets going, new uploads will be
tweeted, too. Check it out!</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/pgxn/blog-twitterstream.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/pgxn/">PGXN</a></li>
                <li><a href="https://justatheory.com/tags/just-a-theory/">Just a Theory</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2010/07/introducing-mytap/</id>
		<title type="html"><![CDATA[Introducing MyTAP]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2010/07/introducing-mytap/"/>
		<updated>2010-07-28T19:38:54Z</updated>
		<published>2010-07-28T19:38:54Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="mysql" label="MySQL"/>
		<category scheme="https://justatheory.com/tags" term="mytap" label="myTAP"/>
		<category scheme="https://justatheory.com/tags" term="pgtap" label="pgTAP"/>
		<category scheme="https://justatheory.com/tags" term="testing" label="Testing"/>
		<category scheme="https://justatheory.com/tags" term="unit-testing" label="Unit Testing"/>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="databases" label="Databases"/>
		<category scheme="https://justatheory.com/tags" term="test-driven-database-development" label="Test-Driven Database Development"/>
		<category scheme="https://justatheory.com/tags" term="test-driven-database-design" label="Test-Driven Database Design"/>
		<summary type="html"><![CDATA[After some prodding from the MySQL Community Manager, some OSCON hacking yields tangible results.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>I gave my <a href="http://www.oscon.com/oscon2010/public/schedule/detail/14168" title="Test Driven Database Development">OSCON tutorial</a> (<a href="https://www.slideshare.net/justatheory/test-drivern-database-development" title="slides on SlideShare">slides</a>) last week. It went okay. I spent <em>way</em>
too much time helping to get everyone set up with <a href="https://pgtap.org/">pgTAP</a>, and then didn&rsquo;t have
time to have the attendees do the exercises, and I had to rush through 2.5 hours
of material in 1.5 hours. Yikes! At least the video will be better when it&rsquo;s
released (more when that happens).</p>
<p>But as often happens, I was asked whether something like pgTAP exists for
<a href="http://www.mysql.com/">MySQL</a>. But this time I was asked by MySQL Community Manager <a href="http://datacharmer.blogspot.com/">Giuseppe Maxia</a>,
who also said that he&rsquo;d tried to create a test framework himself (a fellow Perl
hacker!), but that it wasn&rsquo;t as nice as pgTAP. Well, since I was at OSCON and
tend to like to hack on side projects while at conferences, and since I hoped
that Giuseppe will happily take it over once I&rsquo;ve implemented the core, I
started hacking on it myself. And today, I&rsquo;m pleased to announce the release of
<a href="http://github.com/theory/mytap/">MyTAP</a> 0.01 (<a href="http://github.com/theory/mytap/downloads">downloads</a>).</p>
<p>Once you&rsquo;ve downloaded it, install it against your MySQL server like so:</p>
<pre><code>mysql -u root &lt; mytap.sql
</code></pre>
<p>Here&rsquo;s a very simple example script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="c1">-- Start a transaction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">BEGIN</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Plan the tests.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">tap</span><span class="p">.</span><span class="nf">plan</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Run the tests.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">tap</span><span class="p">.</span><span class="nf">pass</span><span class="p">(</span><span class="w"> </span><span class="s1">&#39;My test passed, w00t!&#39;</span><span class="w"> </span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1">-- Finish the tests and clean up.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">CALL</span><span class="w"> </span><span class="n">tap</span><span class="p">.</span><span class="nf">finish</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">ROLLBACK</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></div><p>You can run this test from a <code>.sql</code> file using the <code>mysql</code> client like so:</p>
<pre><code>mysql -u root --disable-pager --batch --raw --skip-column-names --unbuffered --database try --execute 'source test.sql'
</code></pre>
<p>But that&rsquo;s a PITA and can only run one test at a time. Instead, put all of your
tests into a directory, perhaps named <code>tests</code>, each with the suffix “.my”, and
use <a href="https://metacpan.org/pod/my_prove"><code>my_prove</code></a> (install <a href="https://metacpan.org/dist/TAP-Parser-SourceHandler-MyTAP/">TAP::Parser::SourceHandler::MyTAP</a> from CPAN to get
it) instead:</p>
<pre><code>my_prove -u root --database try tests/
</code></pre>
<p>For MyTAP&rsquo;s own tests, the output looks like this:</p>
<pre><code>tests/eq.my ........ ok
tests/hastap.my .... ok
tests/matching.my .. ok
tests/moretap.my ... ok
tests/todotap.my ... ok
tests/utils.my ..... ok
All tests successful.
Files=6, Tests=137,  1 wallclock secs
(0.06 usr  0.03 sys +  0.01 cusr  0.02 csys =  0.12 CPU)
Result: PASS
</code></pre>
<p>Nice, eh? Of course there are quite a few more assertion functions. See the
<a href="http://theory.github.com/mytap/documentation.html">complete documentation</a> for details.</p>
<p>Now, I did my best to keep the interface the same as pgTAP, but there are a few
differences:</p>
<ul>
<li>MySQL temporary tables are <a href="http://dev.mysql.com/doc/refman/5.0/en/temporary-table-problems.html">teh suck</a>, so I had to use permanent tables to
track test state. To make this more feasible, MyTAP is always installed in
its own database, (named “tap” by default), and you must always
schema-qualify your use of the MyTAP functions.</li>
<li>Another side-effect of permanent tables is that MyTAP must keep track of
test outcomes without colliding with the state from tests running in
multiple concurrent connections. So MyTAP uses <a href="http://dev.mysql.com/doc/refman/5.0/en/information-functions.html#function_connection-id"><code>connection_id()</code></a> to keep
track of state for a single test run. It also deletes the state when tests
<code>finish()</code>, but if there&rsquo;s a crash before then, data can be left in those
tables. If the connection ID is ever re-used, this can lead to conflicts.
This seems mostly avoidable by using <a href="http://dev.mysql.com/doc/refman/5.0/en/innodb.html">InnoDB</a> tables and transactions in the
tests.</li>
<li>The word “is” is strictly reserved by MySQL, so the function that
corresponds to pgTAP&rsquo;s <code>is()</code> is <code>eq()</code> in MyTAP. Similarly, <code>isnt()</code> is
called <code>not_eq()</code> in MyTAP.</li>
<li>There is no way to throw an exception in MySQL functions an procedures, so
the code cheats by instead performing an illegal operation: selecting from a
non-existent column, where the name of that column is the error message.
Hinky, but should get the point across.</li>
</ul>
<p>Other than these issues, things went fairly smoothly. I finished up the 0.01
version last night and released it today with most of the core functionality in
place. And now I want to find others to take over, as I am not a MySQL hacker
myself and thus unlikely ever to use it. If you&rsquo;re interested, my
recommendations for things to do next are:</p>
<ul>
<li>
<p>Move <code>has_table()</code> to its own file, named <code>mytap-schema.sql</code> or similar, and
start porting the relevant pgTAP <a href="https://pgtap.org/documentation.html#Table+For+One">table assertion functions</a>, <a href="https://pgtap.org/documentation.html#The+Schema+Things">schema
assertion functions</a>, <a href="https://pgtap.org/documentation.html#To+Have+or+Have+Not">have assertion functions</a>, <a href="https://pgtap.org/documentation.html#Feeling+Funky">function and procedure
assertion functions</a>, and <a href="https://pgtap.org/documentation.html#Database+Deets">assorted other database object assertion
functions</a>.</p>
</li>
<li>
<p>Consider an approach to porting the <a href="https://pgtap.org/documentation.html#Pursuing+Your+Query">pgTAP relation comparison assertion
functions</a>, perhaps by requiring that prepared statements be created and
their names passed to the functions. The functions can then select from the
prepared statements into temporary tables to compare results (as in
<code>set_eq()</code> and <code>bag_eq()</code>), or use cursors to iterate over the prepared
statements row-by-row (as in <code>results_eq()</code>)</p>
</li>
<li>
<p>Set up a mail list and a permanent home for MyTAP (I&rsquo;ve used GitHub pages
for the <a href="http://theory.github.com/mytap/">current site</a>, but I don&rsquo;t think it should remain tightly
associated with my GitHub identity). I&rsquo;d like to see some folks from the
MySQL community jump on this.</p>
</li>
</ul>
<p>So fork on <a href="http://github.com/theory/mytap/" title="MyTAP on GitHub">GitHub</a> or contact me if you&rsquo;d like to be added as a collaborator
(I&rsquo;m looking at <em>you,</em> <a href="http://datacharmer.blogspot.com/">Giuseppe</a>!).</p>
<p>Hope you find it useful.</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/mysql/introducing_mysql.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/mysql/">MySQL</a></li>
                <li><a href="https://justatheory.com/tags/mytap/">myTAP</a></li>
                <li><a href="https://justatheory.com/tags/pgtap/">pgTAP</a></li>
                <li><a href="https://justatheory.com/tags/testing/">Testing</a></li>
                <li><a href="https://justatheory.com/tags/unit-testing/">Unit Testing</a></li>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/databases/">Databases</a></li>
                <li><a href="https://justatheory.com/tags/test-driven-database-development/">Test-Driven Database Development</a></li>
                <li><a href="https://justatheory.com/tags/test-driven-database-design/">Test-Driven Database Design</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2010/06/pgxn-development-project/</id>
		<title type="html"><![CDATA[PGXN Development Project]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2010/06/pgxn-development-project/"/>
		<updated>2022-05-22T21:36:57Z</updated>
		<published>2010-06-15T17:56:33Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="pgxn" label="PGXN"/>
		<category scheme="https://justatheory.com/tags" term="cpan" label="CPAN"/>
		<category scheme="https://justatheory.com/tags" term="fundraising" label="Fundraising"/>
		<summary type="html"><![CDATA[I’m pleased to announce the launch of the PGXN development project. I’ve written a detailed specification and pushed it through general approval on pgsql-hackers. I’ve written up a detailed project plan and estimated things at a highly reduced PostgreSQL Experts rate to come up with a fundraising goal: $25,000. And now, thanks to founding contributions from myYearbook.com, and PostgreSQL Experts, we have started the fundraising phase of the project.
So what’s this all about?]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>I&rsquo;m pleased to announce the launch of the <a href="http://pgxn.org/" title="PostgreSQL Extension Network">PGXN</a> development project. I&rsquo;ve
written a <a href="http://wiki.postgresql.org/wiki/PGXN" title="PGXN Specification">detailed specification</a> and pushed it through general approval <a href="http://www.mail-archive.com/pgsql-hackers@postgresql.org/msg143645.html" title="pgsql-hackers archive: RFC: PostgreSQL Add-On Network">on
pgsql-hackers</a>. I&rsquo;ve written up a detailed <a href="http://pgxn.org/status.html" title="PGXN Project Status">project plan</a> and estimated things
at a highly reduced <a href="http://www.pgexperts.com/">PostgreSQL Experts</a> rate to come up with a fundraising
goal: $25,000. And now, thanks to <a href="http://pgxn.org/contributors.html" title="PGXN Contributors">founding contributions</a> from
<a href="http://www.myyearbook.com">myYearbook.com</a>, and <a href="http://www.pgexperts.com/">PostgreSQL Experts</a>, we have started the fundraising
phase of the project.</p>
<p>So what’s this all about? PGXN, the PostgreSQL Extension Network, is modeled on
<a href="http://cpan.org">CPAN</a>, the Perl community’s archive of “all things Perl.” PGXN will provide
four major pieces of infrastructure to the PostgreSQL community:</p>
<ul>
<li>An upload and distribution infrastructure for extension developers (models:
<a href="http://pause.perl.org">PAUSE</a> &amp; <a href="http://cpan.org/">CPAN</a>, <a href="http://openjsan.org/jause/">JAUSE</a>)</li>
<li>A centralized index and API of distribution metadata (models: <a href="http://cpanmetadb.appspot.com/">CPAN Meta
DB</a>, <a href="http://cpan.perl.org/modules/02packages.details.txt">02packages.details.txt</a>)</li>
<li>A website for searching extensions and perusing their documentation (models:
<a href="https://search.cpan.org/">search.cpan.org</a>, <a href="https://web.archive.org/web/20100528163151/http://kobesearch.cpan.org/">Kobesearch</a>, <a href="http://openjsan.org/">JSAN</a>)</li>
<li>A command-line client for downloading, testing, and installing extensions
(models: <a href="http://cpanmin.us/">cpanminus</a>, <a href="https://metacpan.org/pod/cpan">CPAN.pm</a>, <a href="https://metacpan.org/pod/jsan">JSAN Shell</a>)</li>
</ul>
<p>I&rsquo;ve been wanting to start this project for a long time, but given my need to
pay the bills, it didn’t seem like I&rsquo;d ever be able to find the time for it.
Then Josh Berkus suggested that we try to get community interest and raise money
for me to have the time to work on it. So I jumped on that, putting in the hours
needed to get general approval from the core PostgreSQL developers and to create
a reasonable project plan and web site. And thanks to MyYearbook’s and PGX’s
backing, I&rsquo;m really excited about it. I hope to start on it in August.</p>
<p>If you&rsquo;d like to contribute, first: <strong>Thank You!</strong>. The <a href="http://pgxn.org/" title="PGXN">PGXN site</a> has a Google
Checkout widget that makes it easy to make a donation. If you&rsquo;d rather pay by
some other means (checks are great for us!), <a href="mailto:pgxn@pgexpergts.com">drop me a line</a> and we&rsquo;ll work
something out. We have a few levels of <a href="http://pgxn.org/contributors.html" title="PGXN Contributors">contribution</a> as
well, including permanent linkage on the PGXN site for your organization, as
well as the usual t-shirts launch party invitations.</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/pgxn-development-project.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/pgxn/">PGXN</a></li>
                <li><a href="https://justatheory.com/tags/cpan/">CPAN</a></li>
                <li><a href="https://justatheory.com/tags/fundraising/">Fundraising</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2010/05/pgan-bikeshedding/</id>
		<title type="html"><![CDATA[PGAN Bikeshedding]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2010/05/pgan-bikeshedding/"/>
		<updated>2010-05-24T19:15:55Z</updated>
		<published>2010-05-24T19:15:55Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="cpan" label="CPAN"/>
		<summary type="html"><![CDATA[Help me pick a good name for the PostgreSQL extension distribution network and site.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>I’ve put together a <a href="https://wiki.postgresql.org/wiki/PGAN">description of PGAN</a>, the PostgreSQL extension distribution
system I plan to develop later this year based on the Comprehensive Archive Perl
Network or <a href="https://search.cpan.org/">CPAN</a>. Its primary features will be:</p>
<ul>
<li>Extension distribution</li>
<li>Search site with extension documentation</li>
<li>Client for downloading, building, testing, and installing extensions.</li>
</ul>
<p>I’ve never been thrilled with the name, though, so I’m asking for suggestions
for a better one. I’ve used the term &ldquo;extension&rdquo; here because it seems to be the
term that the PostgreSQL community has <a href="https://wiki.postgresql.org/wiki/ExtensionPackaging">settled on</a>, but other terms might work,
since things other than extensions might be distributed.</p>
<p>What I’ve come up with so far is:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Long Name</th>
<th>Pronunciation</th>
<th>Advantages</th>
<th>Disadvantages</th>
</tr>
</thead>
<tbody>
<tr>
<td>PGAN</td>
<td>PostgreSQL Add-on Network</td>
<td>pee-gan</td>
<td>Short, similar to CPAN</td>
<td>Ugly</td>
</tr>
<tr>
<td>PGEX</td>
<td>PostgreSQL Extensions</td>
<td>pee-gee-ex or pee-gex</td>
<td>Short, easier to pronounce</td>
<td>Too similar to <a href="https://pgexperts.com/">PGX</a>)</td>
</tr>
<tr>
<td>PGCAN</td>
<td>PostgreSQL Comprehensive Archive Network</td>
<td>pee-gee-can</td>
<td>Similar to CPAN</td>
<td>Similar to CPAN</td>
</tr>
<tr>
<td>PGDAN</td>
<td>PostgreSQL Distribution Archive Network</td>
<td>pee-gee-dan</td>
<td>Short, easy to pronounce</td>
<td>Who’s “Dan”? Doesn’t distribute PostgreSQL itself.</td>
</tr>
<tr>
<td>PGEDAN</td>
<td>PostgreSQL Extension Distribution Archive Network</td>
<td>pee-gee-ee-dan</td>
<td>References extensions</td>
<td>Long, sounds stupid</td>
</tr>
</tbody>
</table>
<p>Of these, I think I like “PGEX” best, but none are really great. So I’m opening
up the <a href="https://en.wikipedia.org/wiki/Parkinson's_Law_of_Triviality">bike shed</a> to all. What’s a better name? Or if you can’t think of one,
which of the above do you like best? Just leave a comment on this post. The only
requirements for suggestions are that a .org domain be available and that it
suck less than the alternatives.</p>
<p>Comments close in 2 weeks. Thanks!</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/pgan-bikeshedding.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/cpan/">CPAN</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2010/04/execute-sql-on-connect/</id>
		<title type="html"><![CDATA[Execute SQL Code on Connect]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2010/04/execute-sql-on-connect/"/>
		<updated>2010-04-28T00:14:07Z</updated>
		<published>2010-04-28T00:14:07Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="perl" label="Perl"/>
		<category scheme="https://justatheory.com/tags" term="ruby" label="Ruby"/>
		<category scheme="https://justatheory.com/tags" term="ruby-on-rails" label="Ruby on Rails"/>
		<category scheme="https://justatheory.com/tags" term="catalyst" label="Catalyst"/>
		<category scheme="https://justatheory.com/tags" term="dbi" label="DBI"/>
		<category scheme="https://justatheory.com/tags" term="pl/perl" label="PL/Perl"/>
		<summary type="html"><![CDATA[I’ve been writing a fair bit of PL/Perl for a client, and one of the things I’ve been doing is eliminating a ton of duplicate code by creating utility functions in the %_SHARED hash. This is great, as long as the code that creates those functions gets executed at the beginning of every database connection. So I put the utility generation code into a single function, called prepare_perl_utils(). It looks something like this:]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>I’ve been writing a fair bit of <a href="https://www.postgresql.org/docs/current/plperl.html">PL/Perl</a> for a client, and one of the things
I’ve been doing is eliminating a ton of duplicate code by <a href="https://www.depesz.com/2008/08/01/writing-sprintf-and-overcoming-limitations-in-plperl/">creating utility
functions</a> in the <code>%_SHARED</code> hash. This is great, as long as the code that
creates those functions gets executed at the beginning of every database
connection. So I put the utility generation code into a single function, called
<code>prepare_perl_utils()</code>. It looks something like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plpgsql" data-lang="plpgsql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">OR</span><span class="w"> </span><span class="k">REPLACE</span><span class="w"> </span><span class="k">FUNCTION</span><span class="w"> </span><span class="n">prepare_perl_utils</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w"> </span><span class="k">RETURNS</span><span class="w"> </span><span class="nb">bool</span><span class="w"> </span><span class="k">LANGUAGE</span><span class="w"> </span><span class="n">plperl</span><span class="w"> </span><span class="k">IMMUTABLE</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="err">$$</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">#</span><span class="w"> </span><span class="n">Don</span><span class="s1">&#39;t bother if we&#39;</span><span class="n">ve</span><span class="w"> </span><span class="n">already</span><span class="w"> </span><span class="n">loaded</span><span class="mf">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mf">1</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="err">$</span><span class="n">_SHARED</span><span class="p">{</span><span class="n">escape_literal</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="err">$</span><span class="n">_SHARED</span><span class="p">{</span><span class="n">escape_literal</span><span class="p">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sub</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="err">$</span><span class="n">_</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span><span class="w"> </span><span class="o">=~</span><span class="w"> </span><span class="n">s</span><span class="o">/</span><span class="s1">&#39;/&#39;&#39;/g; $_[0] =~ s/\\/\\\\/g; $_[0];
</span></span></span><span class="line"><span class="cl"><span class="s1">    };
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    # Create other code refs in %_SHARED…
</span></span></span><span class="line"><span class="cl"><span class="s1">$$;
</span></span></span></code></pre></div><p>So now all I have to do is make sure that all the client’s apps execute this
function as soon as they connect, so that the utilities will all be loaded up
and ready to go. Here’s how I did it.</p>
<p>First, for the Perl app, I just took advantage of the <a href="https://dbi.perl.org">DBI</a>’s <a href="https://metacpan.org/pod/DBI#Callbacks">callbacks</a> to
execute the SQL I need when the DBI connects to the database. That link might
not work just yet, as the DBI’s callbacks have only just been documented and
that documentation appears only in dev releases so far. Once 1.611 drops, the
link should work. At any rate, the use of callbacks I’m exploiting here has been
in the DBI since 1.49, which was released in November 2005.</p>
<p>The approach is the same as I’ve <a href="https://justatheory.com/2009/09/dbi-connect-cached-hack/">described before</a>: Just specify the
<code>Callbacks</code> parameter to <code>DBI-&gt;connect</code>, like so:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="line"><span class="cl"><span class="k">my</span> <span class="nv">$dbh</span> <span class="o">=</span> <span class="nn">DBI</span><span class="o">-&gt;</span><span class="n">connect_cached</span><span class="p">(</span><span class="nv">$dsn</span><span class="p">,</span> <span class="nv">$user</span><span class="p">,</span> <span class="nv">$pass</span><span class="p">,</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">PrintError</span>     <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">RaiseError</span>     <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">AutoCommit</span>     <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">Callbacks</span>      <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">connected</span> <span class="o">=&gt;</span> <span class="k">sub</span> <span class="p">{</span> <span class="nb">shift</span><span class="o">-&gt;</span><span class="k">do</span><span class="p">(</span><span class="s">&#39;SELECT prepare_perl_utils()&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></div><p>That’s it. The <code>connected</code> method is a no-op in the DBI that gets called to
alert subclasses that they can do any post-connection initialization. Even
without a subclass, we can take advantage of it to do our own initialization.</p>
<p>It was a bit trickier to make the same thing happen for the client’s <a href="https://rubyonrails.org">Rails</a>
app. Rails, alas, provides no on-connection callbacks. So we instead have to
monkey-patch Rails to do what we want. With some help from “dfr|mac” on
#rubyonrails (I haven’t touched Rails in 3 years!), I got it worked down to
this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ActiveRecord</span><span class="o">::</span><span class="no">ConnectionAdapters</span><span class="o">::</span><span class="no">PostgreSQLAdapter</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">initialize_with_perl_utils</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">returning</span><span class="p">(</span><span class="n">initialize_without_perl_utils</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">))</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">        <span class="n">execute</span><span class="p">(</span><span class="s1">&#39;SELECT prepare_perl_utils()&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="n">alias_method_chain</span> <span class="ss">:initialize</span><span class="p">,</span> <span class="ss">:perl_utils</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></div><p>Basically, we overpower the PostgreSQL adapter’s <code>initialize</code> method and have it
call <code>initialize_with_perl_utils</code> before it returns. It’s a neat trick; if
you’re going to practice <a href="https://justatheory.com/2009/05/fuck-typing/">fuck typing</a>, <code>alias_method_chain</code> makes it about as
clean as can be, albeit a little too magical for my tastes.</p>
<p>Anyway, recorded here for posterity (my blog is my other brain!).</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/execute-on-select.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/perl/">Perl</a></li>
                <li><a href="https://justatheory.com/tags/ruby/">Ruby</a></li>
                <li><a href="https://justatheory.com/tags/ruby-on-rails/">Ruby on Rails</a></li>
                <li><a href="https://justatheory.com/tags/catalyst/">Catalyst</a></li>
                <li><a href="https://justatheory.com/tags/dbi/">DBI</a></li>
                <li><a href="https://justatheory.com/tags/pl/perl/">PL/Perl</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2010/03/no-more-use-pgxs/</id>
		<title type="html"><![CDATA[No more USE_PGXS=1?]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2010/03/no-more-use-pgxs/"/>
		<updated>2010-03-15T18:33:18Z</updated>
		<published>2010-03-15T18:33:18Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="makefile" label="Makefile"/>
		<summary type="html"><![CDATA[I&rsquo;m tired of having to remember to set USE_PGXS=1 when building third-party PostgreSQL extensions like pgTAP. Aren&rsquo;t you?]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>I&rsquo;ve become very tired of having to set <code>USE_PGXS=1</code> every time I build pgTAP
outside the <code>contrib</code> directory of a PostgreSQL distribution:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make <span class="nv">USE_PGXS</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">make <span class="nv">USE_PGXS</span><span class="o">=</span><span class="m">1</span> install
</span></span><span class="line"><span class="cl">make <span class="nv">USE_PGXS</span><span class="o">=</span><span class="m">1</span> installcheck
</span></span></code></pre></div><p>I am forever forgetting to set it, and it’s just not how one normally expects a
build incantation to work. It was required because that’s how the core <a href="https://www.postgresql.org/docs/8.4/static/contrib.html" title="PostgreSQL Documentation: “Additional Supplied Modules”">contrib
extensions</a> work: They all have this code in their <code>Makefile</code>s, which those of
us who develop third-party modules have borrowed:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ifdef USE_PGXS
</span></span><span class="line"><span class="cl"><span class="nv">PG_CONFIG</span> <span class="o">=</span> pg_config
</span></span><span class="line"><span class="cl">PGXS :<span class="o">=</span> <span class="k">$(</span>shell <span class="k">$(</span>PG_CONFIG<span class="k">)</span> --pgxs<span class="k">)</span>
</span></span><span class="line"><span class="cl">include <span class="k">$(</span>PGXS<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl"><span class="nv">subdir</span> <span class="o">=</span> contrib/citext
</span></span><span class="line"><span class="cl"><span class="nv">top_builddir</span> <span class="o">=</span> ../..
</span></span><span class="line"><span class="cl">include <span class="k">$(</span>top_builddir<span class="k">)</span>/src/Makefile.global
</span></span><span class="line"><span class="cl">include <span class="k">$(</span>top_srcdir<span class="k">)</span>/contrib/contrib-global.mk
</span></span><span class="line"><span class="cl">endif
</span></span></code></pre></div><p>They generally expect <code>../../src/Makefile.global</code> to exist, and if it doesn’t,
you have to tell it so. I find this annoying, because third-party extensions are
almost never built from the <code>contrib</code> directory, so one must always remember to
specify <code>USE_PGXS=1</code>.</p>
<p>I&rsquo;d like to propose, instead, that those of us who maintain third-party
extensions like <a href="https://pgtap.org">pgTAP</a>, <a href="http://github.com/leto/plparrot/">PL/Parrot</a>, and <a href="http://temporal.projects.postgresql.org/">Temporal PostgreSQL</a> not force our
users to have to remember this special variable by instead checking to see if
it’s needed ourselves. As such, I&rsquo;ve just <a href="http://github.com/theory/pgtap/commit/400db6d2db7ebabb90fbc528100bb9e518f7fbc3">added</a> this code to pgTAP’s
<code>Makefile</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ifdef USE_PGXS
</span></span><span class="line"><span class="cl"><span class="nv">PG_CONFIG</span> <span class="o">=</span> pg_config
</span></span><span class="line"><span class="cl">PGXS :<span class="o">=</span> <span class="k">$(</span>shell <span class="k">$(</span>PG_CONFIG<span class="k">)</span> --pgxs<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">ifeq <span class="o">(</span>exists, <span class="k">$(</span>shell <span class="o">[</span> -e ../../src/bin/pg_config/pg_config <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span> exists<span class="k">)</span> <span class="o">)</span> 
</span></span><span class="line"><span class="cl"><span class="nv">top_builddir</span> <span class="o">=</span> ../..
</span></span><span class="line"><span class="cl">PG_CONFIG :<span class="o">=</span> <span class="k">$(</span>top_builddir<span class="k">)</span>/src/bin/pg_config/pg_config
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl"><span class="nv">PG_CONFIG</span> <span class="o">=</span> pg_config
</span></span><span class="line"><span class="cl">PGXS :<span class="o">=</span> <span class="k">$(</span>shell <span class="k">$(</span>PG_CONFIG<span class="k">)</span> --pgxs<span class="k">)</span>
</span></span><span class="line"><span class="cl">endif
</span></span><span class="line"><span class="cl">endif
</span></span></code></pre></div><p>So it still respects <code>USE_PGXS=1</code>, but if it’s not set, it looks to see if it
can find <code>pg_config</code> where it would expect it to be if built from the <code>contrib</code>
directory. If it’s not there, it simply uses <code>pg_config</code> as if <code>USE_PGXS=1</code> was
set. This makes building from the <code>contrib</code> directory or from anywhere else the
same process:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">make
</span></span><span class="line"><span class="cl">make install
</span></span><span class="line"><span class="cl">make installcheck
</span></span></code></pre></div><p>Much better, much easier to remember.</p>
<p>Is there any reason why third-party PostgreSQL extensions should <em>not</em> adopt
this pattern? I don’t think it makes sense for contrib extensions in core to do
it, but for those that will never be in core, I think it makes a lot of sense.</p>
<p>Comments?</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/no_more_use_pgxs.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/makefile/">Makefile</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
	<entry>
		<id>https://justatheory.com/2010/01/somethingest-from-each-entity/</id>
		<title type="html"><![CDATA[SQL Hack: The Something-est From Each Entity]]></title>
		<link rel="alternate" type="text/html" href="https://justatheory.com/2010/01/somethingest-from-each-entity/"/>
		<updated>2022-06-12T22:42:22Z</updated>
		<published>2010-01-12T06:12:02Z</published>
		<author>
			<name>David E. Wheeler</name>
			<email>david@justatheory.com</email>
			<uri>https://justatheory.com/</uri>
		</author>
		<category scheme="https://justatheory.com/tags" term="postgres" label="Postgres"/>
		<category scheme="https://justatheory.com/tags" term="sql" label="SQL"/>
		<category scheme="https://justatheory.com/tags" term="window-functions" label="Window Functions"/>
		<category scheme="https://justatheory.com/tags" term="common-table-expressions" label="Common Table Expressions"/>
		<summary type="html"><![CDATA[This is a pattern that I have dealt with many times, but never figured out how to adequately handle. Say that you have imported a mailbox into your database, and you want a list of the latest messages between each pair of recipients (sender and receiver — I’m ignoring multiple receivers for the moment). The data might look like this:
BEGIN; CREATE TABLE messages ( sender TEXT NOT NULL, receiver TEXT NOT NULL, sent_at TIMESTAMPTZ NOT NULL DEFAULT clock_timestamp(), body TEXT NOT NULL DEFAULT '' ); INSERT INTO messages ( sender, receiver, body ) VALUES ('Theory', 'Strongrrl', 'Hi There.]]></summary>
		<content type="html" xml:base="https://justatheory.com/" xml:space="preserve">
<![CDATA[    <article class="post">
        <div class="text">
<p>This is a pattern that I have dealt with many times, but never figured out how
to adequately handle. Say that you have imported a mailbox into your database,
and you want a list of the latest messages between each pair of recipients
(sender and receiver — I&rsquo;m ignoring multiple receivers for the moment). The data
might look like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">BEGIN</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">messages</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">sender</span>   <span class="nb">TEXT</span>        <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">receiver</span> <span class="nb">TEXT</span>        <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">sent_at</span>  <span class="nb">TIMESTAMPTZ</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span> <span class="n">clock_timestamp</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">body</span>     <span class="nb">TEXT</span>        <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">messages</span> <span class="p">(</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">body</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Theory&#39;</span><span class="p">,</span> <span class="s1">&#39;Strongrrl&#39;</span><span class="p">,</span> <span class="s1">&#39;Hi There.&#39;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">messages</span> <span class="p">(</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">body</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Strongrrl&#39;</span><span class="p">,</span> <span class="s1">&#39;Theory&#39;</span><span class="p">,</span> <span class="s1">&#39;Hi yourself.&#39;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">messages</span> <span class="p">(</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">body</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Anna&#39;</span><span class="p">,</span> <span class="s1">&#39;Theory&#39;</span><span class="p">,</span> <span class="s1">&#39;What&#39;&#39;s for dinner?&#39;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">messages</span> <span class="p">(</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">body</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Theory&#39;</span><span class="p">,</span> <span class="s1">&#39;Anna&#39;</span><span class="p">,</span> <span class="s1">&#39;Brussels Sprouts.&#39;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">messages</span> <span class="p">(</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">body</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;Anna&#39;</span><span class="p">,</span> <span class="s1">&#39;Theory&#39;</span><span class="p">,</span> <span class="s1">&#39;Oh man!&#39;</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">COMMIT</span><span class="p">;</span>
</span></span></code></pre></div><p>So the goal is to show the most recent message between Theory and Strongrrl and
the most recent message between Theory and Anna, without regard to who is the
sender and who is the receiver. After running into this many times, today I
consulted my <a href="https://web.archive.org/web/20100106235814/http://www.pgexperts.com/people.html" title="PostgreSQL Experts">colleagues</a>, showing them this dead simple (and wrong!) query to
demonstrate what I wanted:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">sender</span><span class="p">,</span> <span class="n">recipient</span><span class="p">,</span> <span class="n">sent_at</span><span class="p">,</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">  <span class="k">FROM</span> <span class="n">messages</span>
</span></span><span class="line"><span class="cl"> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">sender</span><span class="p">,</span> <span class="n">recipient</span>
</span></span><span class="line"><span class="cl"><span class="k">HAVING</span> <span class="n">sent_at</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">sent_at</span><span class="p">);</span>
</span></span></code></pre></div><p>That’s wrong because one can’t have columns in the <code>SELECT</code> expression that are
not either aggregate expressions or included in the<code>GROUP BY</code> expression. It’s a
violation of the standard (and prone to errors, I suspect). <a href="https://adpgtech.blogspot.com" title="Andrew's PostgreSQL blog">Andrew</a> immediately
said, “Classic case for <code>DISTINCT ON</code>”. This lovely little expression is a
PostgreSQL extension not included in the SQL standard. It’s implementation looks
like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="k">ON</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">          <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">receiver</span> <span class="o">&gt;</span> <span class="n">sender</span>
</span></span><span class="line"><span class="cl">               <span class="k">THEN</span> <span class="n">receiver</span> <span class="o">||</span> <span class="n">sender</span>
</span></span><span class="line"><span class="cl">               <span class="k">ELSE</span> <span class="n">sender</span>   <span class="o">||</span> <span class="n">receiver</span>
</span></span><span class="line"><span class="cl">          <span class="k">END</span>
</span></span><span class="line"><span class="cl">       <span class="p">)</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">sent_at</span><span class="p">,</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">  <span class="k">FROM</span> <span class="n">messages</span>
</span></span><span class="line"><span class="cl"> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">receiver</span> <span class="o">&gt;</span> <span class="n">sender</span>
</span></span><span class="line"><span class="cl">               <span class="k">THEN</span> <span class="n">receiver</span> <span class="o">||</span> <span class="n">sender</span>
</span></span><span class="line"><span class="cl">               <span class="k">ELSE</span> <span class="n">sender</span>   <span class="o">||</span> <span class="n">receiver</span>
</span></span><span class="line"><span class="cl">          <span class="k">END</span><span class="p">,</span> <span class="n">sent_at</span> <span class="k">DESC</span><span class="p">;</span>
</span></span></code></pre></div><p>This query is saying, “fetch the rows where the sender and the receiver are
distinct, and order by <code>sent_at DESC</code>. THE <code>CASE</code> statement to get a uniform
value for the combination of sender and receiver is a bit unfortunate, but it
does the trick:</p>
<pre><code>  sender   | receiver |            sent_at            |     body     
-----------+----------+-------------------------------+--------------
 Anna      | Theory   | 2010-01-12 05:00:07.026711+00 | Oh man!
 Strongrrl | Theory   | 2010-01-12 05:00:07.02589+00  | Hi yourself.
</code></pre>
<p>Great, exactly the data I wanted. And the <code>CASE</code> statement can actually be
indexed to speed up filtering. But I wondered if it would be possible to get the
same results without the <code>DISTINCT ON</code>. In other words, can this be done with
standard SQL? If you&rsquo;re using PostgreSQL 8.4, the answer is “yes.” All you have
to do is exploit <a href="https://www.postgresql.org/docs/current/tutorial-window.html" title="PostgreSQL Documentation: Window Functions">window functions</a> and a subquery. It looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">sent_at</span><span class="p">,</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">  <span class="k">FROM</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">SELECT</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">sent_at</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">row_number</span><span class="p">()</span> <span class="k">OVER</span> <span class="p">(</span> <span class="k">PARTITION</span> <span class="k">BY</span> 
</span></span><span class="line"><span class="cl">               <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">receiver</span> <span class="o">&gt;</span> <span class="n">sender</span>
</span></span><span class="line"><span class="cl">                    <span class="k">THEN</span> <span class="n">receiver</span> <span class="o">||</span> <span class="n">sender</span>
</span></span><span class="line"><span class="cl">                    <span class="k">ELSE</span> <span class="n">sender</span>   <span class="o">||</span> <span class="n">receiver</span>
</span></span><span class="line"><span class="cl">               <span class="k">END</span>
</span></span><span class="line"><span class="cl">               <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">sent_at</span> <span class="k">DESC</span>
</span></span><span class="line"><span class="cl">           <span class="p">)</span> <span class="k">AS</span> <span class="n">rnum</span>
</span></span><span class="line"><span class="cl">      <span class="k">FROM</span> <span class="n">messages</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"> <span class="k">WHERE</span> <span class="n">rnum</span> <span class="o">=</span> <span class="mf">1</span><span class="p">;</span>
</span></span></code></pre></div><p>Same nasty <code>CASE</code> statement as before (no way around it with this database
design, alas), but this is fully conforming SQL. It’s also the first time I&rsquo;ve
ever used window functions. If you just focus on the <code>row_number() OVER ()</code>
expression, it’s simply partitioning the table according to the same value as in
the <code>DISTINCT ON</code> value, but it’s ordering it by <code>sent_at</code> directly. The result
is a row number, where the first is 1 for the most recent message for each
combination of recipients. Then we just filter for that in the <code>WHERE</code> clause.</p>
<p>Not exactly intuitive (I&rsquo;m really only understanding it now as I explain write
it out), but quite straight-forward once you accept the expressivity in this
particular <code>OVER</code> expression. It might be easier to understand if we remove some
of the cruft. If instead we wanted the most recent message from each sender
(regardless of the recipient), we&rsquo;d write:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">SELECT</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">sent_at</span><span class="p">,</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">  <span class="k">FROM</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">SELECT</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">sent_at</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">row_number</span><span class="p">()</span> <span class="k">OVER</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">               <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">sender</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">sent_at</span> <span class="k">DESC</span>
</span></span><span class="line"><span class="cl">           <span class="p">)</span> <span class="k">AS</span> <span class="n">rnum</span>
</span></span><span class="line"><span class="cl">      <span class="k">FROM</span> <span class="n">messages</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span> <span class="k">AS</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl"> <span class="k">WHERE</span> <span class="n">rnum</span> <span class="o">=</span> <span class="mf">1</span><span class="p">;</span>
</span></span></code></pre></div><p>And that yields:</p>
<pre><code>  sender   | receiver |            sent_at            |     body     
-----------+----------+-------------------------------+--------------
 Anna      | Theory   | 2010-01-12 05:00:07.026711+00 | Oh man!
 Strongrrl | Theory   | 2010-01-12 05:00:07.02589+00  | Hi yourself.
 Theory    | Anna     | 2010-01-12 05:00:07.24982+00  | Brussels Sprouts.
</code></pre>
<p>Furthermore, we can use a <a href="https://www.postgresql.org/docs/current/queries-with.html" title="PostgreSQL Documentation: WITH Queries">common table expression</a> to eliminate the subquery.
This query is functionally identical to the subquery example (returning to
uniqueness for sender and receiver), just with the <code>WITH</code> clause coming before
the <code>SELECT</code> clause, setting things up for it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">WITH</span> <span class="n">t</span> <span class="k">AS</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">SELECT</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">sent_at</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">           <span class="n">row_number</span><span class="p">()</span> <span class="k">OVER</span> <span class="p">(</span><span class="k">PARTITION</span> <span class="k">BY</span> <span class="k">CASE</span>
</span></span><span class="line"><span class="cl">               <span class="k">WHEN</span> <span class="n">receiver</span> <span class="o">&gt;</span> <span class="n">sender</span>
</span></span><span class="line"><span class="cl">                   <span class="k">THEN</span> <span class="n">receiver</span> <span class="o">||</span> <span class="n">sender</span>
</span></span><span class="line"><span class="cl">                   <span class="k">ELSE</span> <span class="n">sender</span>   <span class="o">||</span> <span class="n">receiver</span>
</span></span><span class="line"><span class="cl">                   <span class="k">END</span>
</span></span><span class="line"><span class="cl">               <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">sent_at</span> <span class="k">DESC</span>
</span></span><span class="line"><span class="cl">           <span class="p">)</span> <span class="k">AS</span> <span class="n">rnum</span>
</span></span><span class="line"><span class="cl">      <span class="k">FROM</span> <span class="n">messages</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="k">SELECT</span> <span class="n">sender</span><span class="p">,</span> <span class="n">receiver</span><span class="p">,</span> <span class="n">sent_at</span><span class="p">,</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">    <span class="k">FROM</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl">   <span class="k">WHERE</span> <span class="n">rnum</span> <span class="o">=</span> <span class="mf">1</span><span class="p">;</span>
</span></span></code></pre></div><p>So it’s kind of like putting the subquery first, only it’s not a subquery, it’s
more like a <em>temporary view</em>. Nice, eh? Either way, the results are the same as
before:</p>
<pre><code>  sender   | receiver |            sent_at            |     body     
-----------+----------+-------------------------------+--------------
 Anna      | Theory   | 2010-01-12 05:00:07.026711+00 | Oh man!
 Strongrrl | Theory   | 2010-01-12 05:00:07.02589+00  | Hi yourself.
</code></pre>
<p>I hereby dub this “The Entity’s Something-est” pattern (I&rsquo;m certain someone else
has already come up with a good name for it, but this will do). I can see it
working any place requiring the highest, lowest, latest, earliest, or something
else-est item from each of a list of entities. Perhaps the latest headline from
every news source:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">WITH</span> <span class="n">t</span> <span class="k">AS</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">SELECT</span> <span class="n">source</span><span class="p">,</span> <span class="n">headline</span><span class="p">,</span> <span class="n">dateline</span><span class="p">,</span> <span class="n">row_number</span><span class="p">()</span> <span class="k">OVER</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">               <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">source</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">dateline</span> <span class="k">DESC</span>
</span></span><span class="line"><span class="cl">           <span class="p">)</span> <span class="k">AS</span> <span class="n">rnum</span>
</span></span><span class="line"><span class="cl">      <span class="k">FROM</span> <span class="n">news</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="k">SELECT</span> <span class="n">source</span><span class="p">,</span> <span class="n">headline</span><span class="p">,</span> <span class="n">dateline</span>
</span></span><span class="line"><span class="cl">    <span class="k">FROM</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl">   <span class="k">WHERE</span> <span class="n">rnum</span> <span class="o">=</span> <span class="mf">1</span><span class="p">;</span>
</span></span></code></pre></div><p>Or perhaps the lowest score for for each basketball team over the course of a
season:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-postgres" data-lang="postgres"><span class="line"><span class="cl"><span class="k">WITH</span> <span class="n">t</span> <span class="k">AS</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="k">SELECT</span> <span class="n">team</span><span class="p">,</span> <span class="nb">date</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">row_number</span><span class="p">()</span> <span class="k">OVER</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">               <span class="k">PARTITION</span> <span class="k">BY</span> <span class="n">team</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">score</span>
</span></span><span class="line"><span class="cl">           <span class="p">)</span> <span class="k">AS</span> <span class="n">rnum</span>
</span></span><span class="line"><span class="cl">      <span class="k">FROM</span> <span class="n">games</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="k">SELECT</span> <span class="n">team</span><span class="p">,</span> <span class="nb">date</span><span class="p">,</span> <span class="n">score</span>
</span></span><span class="line"><span class="cl">    <span class="k">FROM</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl">   <span class="k">WHERE</span> <span class="n">rnum</span> <span class="o">=</span> <span class="mf">1</span><span class="p">;</span>
</span></span></code></pre></div><p>Easy! How have you handled a situation like this in your database hacking?</p>

            <p class="past"><small>Looking for the comments? Try the <a rel="nofollow" href="https://past.justatheory.com/computers/databases/postgresql/somethingest-from-each-entity.html">old layout</a>.</small></p>
        </div>

        <footer class="tags">
            <h5>More about…</h5>
            <ul>
                <li><a href="https://justatheory.com/tags/postgres/">Postgres</a></li>
                <li><a href="https://justatheory.com/tags/sql/">SQL</a></li>
                <li><a href="https://justatheory.com/tags/window-functions/">Window Functions</a></li>
                <li><a href="https://justatheory.com/tags/common-table-expressions/">Common Table Expressions</a></li>
            </ul>
        </footer>
    </article>
]]></content>
	</entry>
</feed>
